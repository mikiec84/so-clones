"Content"
"    public class GoogleLocationService {&#xD;&#xA;    private GoogleServicesCallbacks callbacks = new GoogleServicesCallbacks();&#xD;&#xA;    LocationUpdateListener locationUpdateListener;&#xD;&#xA;    Context activity;&#xD;&#xA;    protected GoogleApiClient mGoogleApiClient;&#xD;&#xA;    protected LocationRequest mLocationRequest;&#xD;&#xA;    public static final long UPDATE_INTERVAL_IN_MILLISECONDS = 30000;&#xD;&#xA;   &#xD;&#xA;    public GoogleLocationService(Context activity, LocationUpdateListener locationUpdateListener) {&#xD;&#xA;        this.locationUpdateListener = locationUpdateListener;&#xD;&#xA;        this.activity = activity;&#xD;&#xA;        buildGoogleApiClient();&#xD;&#xA;    }&#xD;&#xA;    protected synchronized void buildGoogleApiClient() {&#xD;&#xA;        //Log.i(TAG, """"Building GoogleApiClient"""");&#xD;&#xA;        mGoogleApiClient = new GoogleApiClient.Builder(activity)&#xD;&#xA;                .addConnectionCallbacks(callbacks)&#xD;&#xA;                .addOnConnectionFailedListener(callbacks)&#xD;&#xA;                .addApi(LocationServices.API)&#xD;&#xA;                .build();&#xD;&#xA;        createLocationRequest();&#xD;&#xA;        mGoogleApiClient.connect();&#xD;&#xA;    }&#xD;&#xA;    protected void createLocationRequest() {&#xD;&#xA;        mLocationRequest = new LocationRequest();&#xD;&#xA;        mLocationRequest.setInterval(UPDATE_INTERVAL_IN_MILLISECONDS);&#xD;&#xA;        mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);&#xD;&#xA;    }&#xD;&#xA;    private class GoogleServicesCallbacks implements GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, LocationListener {&#xD;&#xA;        @Override&#xD;&#xA;        public void onConnected(Bundle bundle) {&#xD;&#xA;            startLocationUpdates();&#xD;&#xA;        }&#xD;&#xA;        @Override&#xD;&#xA;        public void onConnectionSuspended(int i) {&#xD;&#xA;            mGoogleApiClient.connect();&#xD;&#xA;        }&#xD;&#xA;        @Override&#xD;&#xA;        public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {&#xD;&#xA;            if (connectionResult.getErrorCode() == ConnectionResult.SERVICE_VERSION_UPDATE_REQUIRED) {&#xD;&#xA;                Toast.makeText(activity, """"Google play service not updated"""", Toast.LENGTH_LONG).show();&#xD;&#xA;            }&#xD;&#xA;            locationUpdateListener.cannotReceiveLocationUpdates();&#xD;&#xA;        }&#xD;&#xA;        @Override&#xD;&#xA;        public void onLocationChanged(Location location) {&#xD;&#xA;            if (location.hasAccuracy()) {&#xD;&#xA;                if (location.getAccuracy() < 30) {&#xD;&#xA;                    locationUpdateListener.updateLocation(location);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    private static boolean locationEnabled(Context context) {&#xD;&#xA;        boolean gps_enabled = false;&#xD;&#xA;        LocationManager lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);&#xD;&#xA;        try {&#xD;&#xA;            gps_enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);&#xD;&#xA;        } catch (Exception ex) {&#xD;&#xA;            ex.printStackTrace();&#xD;&#xA;        }&#xD;&#xA;        return gps_enabled;&#xD;&#xA;    }&#xD;&#xA;    private boolean servicesConnected(Context context) {&#xD;&#xA;        return isPackageInstalled(GooglePlayServicesUtil.GOOGLE_PLAY_STORE_PACKAGE, context);&#xD;&#xA;    }&#xD;&#xA;    private boolean isPackageInstalled(String packagename, Context context) {&#xD;&#xA;        PackageManager pm = context.getPackageManager();&#xD;&#xA;        try {&#xD;&#xA;            pm.getPackageInfo(packagename, PackageManager.GET_ACTIVITIES);&#xD;&#xA;            return true;&#xD;&#xA;        } catch (PackageManager.NameNotFoundException e) {&#xD;&#xA;            e.printStackTrace();&#xD;&#xA;            return false;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    public void startUpdates() {&#xD;&#xA;        /*&#xD;&#xA;         * Connect the client. Don't re-start any requests here; instead, wait&#xD;&#xA;		 * for onResume()&#xD;&#xA;		 */&#xD;&#xA;        if (servicesConnected(activity)) {&#xD;&#xA;            if (locationEnabled(activity)) {&#xD;&#xA;                locationUpdateListener.canReceiveLocationUpdates();&#xD;&#xA;                startLocationUpdates();&#xD;&#xA;            } else {&#xD;&#xA;                locationUpdateListener.cannotReceiveLocationUpdates();&#xD;&#xA;                Toast.makeText(activity, """"Unable to get your location.Please turn on your device Gps"""", Toast.LENGTH_LONG).show();&#xD;&#xA;            }&#xD;&#xA;        } else {&#xD;&#xA;            locationUpdateListener.cannotReceiveLocationUpdates();&#xD;&#xA;            Toast.makeText(activity, """"Google play service not available"""", Toast.LENGTH_LONG).show();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    //stop location updates&#xD;&#xA;    public void stopUpdates() {&#xD;&#xA;        stopLocationUpdates();&#xD;&#xA;    }&#xD;&#xA;    //start location updates&#xD;&#xA;    private void startLocationUpdates() {&#xD;&#xA;        if (checkSelfPermission(activity, ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && checkSelfPermission(activity, ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        if (mGoogleApiClient.isConnected()) {&#xD;&#xA;            LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, callbacks);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    public void stopLocationUpdates() {&#xD;&#xA;        if (mGoogleApiClient.isConnected()) {&#xD;&#xA;            LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, callbacks);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    public void startGoogleApi() {&#xD;&#xA;        mGoogleApiClient.connect();&#xD;&#xA;    }&#xD;&#xA;    public void closeGoogleApi() {&#xD;&#xA;        mGoogleApiClient.disconnect();&#xD;&#xA;    }&#xD;&#xA;     }"
