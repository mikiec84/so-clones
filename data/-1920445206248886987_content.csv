"Content"
"    <?php&#xD;&#xA;    &#xD;&#xA;    	// CONFIG: Enable debug mode. This means we'll log requests into 'ipn.log' in the same directory.&#xD;&#xA;    	// Especially useful if you encounter network errors or other intermittent problems with IPN (validation).&#xD;&#xA;    	// Set this to 0 once you go live or don't require logging.&#xD;&#xA;    	define(""""DEBUG"""", 1);&#xD;&#xA;    	// Set to 0 once you're ready to go live&#xD;&#xA;    	define(""""USE_SANDBOX"""", 1);&#xD;&#xA;    	define(""""LOG_FILE"""", """"./ipn.log"""");&#xD;&#xA;    	// Read POST data&#xD;&#xA;    	// reading posted data directly from $_POST causes serialization&#xD;&#xA;    	// issues with array data in POST. Reading raw POST data from input stream instead.&#xD;&#xA;    	$raw_post_data = file_get_contents('php://input');&#xD;&#xA;    	$raw_post_array = explode('&', $raw_post_data);&#xD;&#xA;    	$myPost = array();&#xD;&#xA;    	foreach ($raw_post_array as $keyval) {&#xD;&#xA;    		$keyval = explode ('=', $keyval);&#xD;&#xA;    		if (count($keyval) == 2)&#xD;&#xA;    			$myPost[$keyval[0]] = urldecode($keyval[1]);&#xD;&#xA;    	}&#xD;&#xA;    	// read the post from PayPal system and add 'cmd'&#xD;&#xA;    	$req = 'cmd=_notify-validate';&#xD;&#xA;    	if(function_exists('get_magic_quotes_gpc')) {&#xD;&#xA;    		$get_magic_quotes_exists = true;&#xD;&#xA;    	}&#xD;&#xA;    	foreach ($myPost as $key => $value) {&#xD;&#xA;    		if($get_magic_quotes_exists == true && get_magic_quotes_gpc() == 1) {&#xD;&#xA;    			$value = urlencode(stripslashes($value));&#xD;&#xA;    		} else {&#xD;&#xA;    			$value = urlencode($value);&#xD;&#xA;    		}&#xD;&#xA;    		$req .= """"&$key=$value"""";&#xD;&#xA;    	}&#xD;&#xA;    	// Post IPN data back to PayPal to validate the IPN data is genuine&#xD;&#xA;    	// Without this step anyone can fake IPN data&#xD;&#xA;    	if(USE_SANDBOX == true) {&#xD;&#xA;    		$paypal_url = """"https://www.sandbox.paypal.com/cgi-bin/webscr"""";&#xD;&#xA;    	} else {&#xD;&#xA;    		$paypal_url = """"https://www.paypal.com/cgi-bin/webscr"""";&#xD;&#xA;    	}&#xD;&#xA;    	$ch = curl_init($paypal_url);&#xD;&#xA;    	if ($ch == FALSE) {&#xD;&#xA;    		return FALSE;&#xD;&#xA;    	}&#xD;&#xA;    	curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);&#xD;&#xA;    	curl_setopt($ch, CURLOPT_POST, 1);&#xD;&#xA;    	curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);&#xD;&#xA;    	curl_setopt($ch, CURLOPT_POSTFIELDS, $req);&#xD;&#xA;    	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);&#xD;&#xA;    	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);&#xD;&#xA;    	curl_setopt($ch, CURLOPT_FORBID_REUSE, 1);&#xD;&#xA;    	if(DEBUG == true) {&#xD;&#xA;    		curl_setopt($ch, CURLOPT_HEADER, 1);&#xD;&#xA;    		curl_setopt($ch, CURLINFO_HEADER_OUT, 1);&#xD;&#xA;    	}&#xD;&#xA;    	// CONFIG: Optional proxy configuration&#xD;&#xA;    	//curl_setopt($ch, CURLOPT_PROXY, $proxy);&#xD;&#xA;    	//curl_setopt($ch, CURLOPT_HTTPPROXYTUNNEL, 1);&#xD;&#xA;    	// Set TCP timeout to 30 seconds&#xD;&#xA;    	curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);&#xD;&#xA;    	curl_setopt($ch, CURLOPT_HTTPHEADER, array('Connection: Close'));&#xD;&#xA;    	// CONFIG: Please download 'cacert.pem' from """"http://curl.haxx.se/docs/caextract.html"""" and set the directory path&#xD;&#xA;    	// of the certificate as shown below. Ensure the file is readable by the webserver.&#xD;&#xA;    	// This is mandatory for some environments.&#xD;&#xA;    	//$cert = __DIR__ . """"./cacert.pem"""";&#xD;&#xA;    	//curl_setopt($ch, CURLOPT_CAINFO, $cert);&#xD;&#xA;    	$res = curl_exec($ch);&#xD;&#xA;    	if (curl_errno($ch) != 0) // cURL error&#xD;&#xA;    		{&#xD;&#xA;    		if(DEBUG == true) {	&#xD;&#xA;    			error_log(date('[Y-m-d H:i e] '). """"Can't connect to PayPal to validate IPN message: """" . curl_error($ch) . PHP_EOL, 3, LOG_FILE);&#xD;&#xA;    		}&#xD;&#xA;    		curl_close($ch);&#xD;&#xA;    		exit;&#xD;&#xA;    	} else {&#xD;&#xA;    		// Log the entire HTTP response if debug is switched on.&#xD;&#xA;    		if(DEBUG == true) {&#xD;&#xA;    			error_log(date('[Y-m-d H:i e] '). """"HTTP request of validation request:"""". curl_getinfo($ch, CURLINFO_HEADER_OUT) ."""" for IPN payload: $req"""" . PHP_EOL, 3, LOG_FILE);&#xD;&#xA;    			error_log(date('[Y-m-d H:i e] '). """"HTTP response of validation request: $res"""" . PHP_EOL, 3, LOG_FILE);&#xD;&#xA;    		}&#xD;&#xA;    		curl_close($ch);&#xD;&#xA;    	}&#xD;&#xA;    	// Inspect IPN validation result and act accordingly&#xD;&#xA;    	// Split response headers and payload, a better way for strcmp&#xD;&#xA;    	$tokens = explode(""""\r\n\r\n"""", trim($res));&#xD;&#xA;    	$res = trim(end($tokens));&#xD;&#xA;    	if (strcmp ($res, """"VERIFIED"""") == 0) {&#xD;&#xA;    		// check whether the payment_status is Completed&#xD;&#xA;    		// check that txn_id has not been previously processed&#xD;&#xA;    		// check that receiver_email is your PayPal email&#xD;&#xA;    		// check that payment_amount/payment_currency are correct&#xD;&#xA;    		// process payment and mark item as paid.&#xD;&#xA;    		// assign posted variables to local variables&#xD;&#xA;    		//$item_name = $_POST['item_name'];&#xD;&#xA;    		//$item_number = $_POST['item_number'];&#xD;&#xA;    		//$payment_status = $_POST['payment_status'];&#xD;&#xA;    		//$payment_amount = $_POST['mc_gross'];&#xD;&#xA;    		//$payment_currency = $_POST['mc_currency'];&#xD;&#xA;    		//$txn_id = $_POST['txn_id'];&#xD;&#xA;    		//$receiver_email = $_POST['receiver_email'];&#xD;&#xA;    		//$payer_email = $_POST['payer_email'];&#xD;&#xA;    &#xD;&#xA;    		if(DEBUG == true) {&#xD;&#xA;    			error_log(date('[Y-m-d H:i e] '). """"Verified IPN: $req """". PHP_EOL, 3, LOG_FILE);&#xD;&#xA;    		}&#xD;&#xA;    	} else if (strcmp ($res, """"INVALID"""") == 0) {&#xD;&#xA;    		// log for manual investigation&#xD;&#xA;    		// Add business logic here which deals with invalid IPN messages&#xD;&#xA;    		if(DEBUG == true) {&#xD;&#xA;    			error_log(date('[Y-m-d H:i e] '). """"Invalid IPN: $req"""" . PHP_EOL, 3, LOG_FILE);&#xD;&#xA;    		}&#xD;&#xA;    	}&#xD;&#xA;    ?>"
