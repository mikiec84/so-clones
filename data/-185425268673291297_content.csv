"Content"
"    package com.example.gpstracking;&#xD;&#xA;    &#xD;&#xA;    import android.app.AlertDialog;&#xD;&#xA;    import android.app.Service;&#xD;&#xA;    import android.content.Context;&#xD;&#xA;    import android.content.DialogInterface;&#xD;&#xA;    import android.content.Intent;&#xD;&#xA;    import android.location.Location;&#xD;&#xA;    import android.location.LocationListener;&#xD;&#xA;    import android.location.LocationManager;&#xD;&#xA;    import android.net.ConnectivityManager;&#xD;&#xA;    import android.net.NetworkInfo;&#xD;&#xA;    import android.net.wifi.WifiManager;&#xD;&#xA;    import android.os.Bundle;&#xD;&#xA;    import android.os.IBinder;&#xD;&#xA;    import android.provider.Settings;&#xD;&#xA;    import android.util.Log;&#xD;&#xA;    import android.widget.Toast;&#xD;&#xA;    &#xD;&#xA;    public class GPSTracker extends Service implements LocationListener {&#xD;&#xA;    &#xD;&#xA;    	private final Context mContext;&#xD;&#xA;    &#xD;&#xA;    	// flag for GPS status&#xD;&#xA;    	boolean isGPSEnabled = false;&#xD;&#xA;    &#xD;&#xA;    	// flag for GPS status&#xD;&#xA;    	boolean canGetLocation = false;&#xD;&#xA;    &#xD;&#xA;    	Location location; // location&#xD;&#xA;    	double latitude; // latitude&#xD;&#xA;    	double longitude; // longitude&#xD;&#xA;    &#xD;&#xA;    	// The minimum distance to change Updates in meters&#xD;&#xA;    	private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10; // 10 meters&#xD;&#xA;    &#xD;&#xA;    	// The minimum time between updates in milliseconds&#xD;&#xA;    	private static final long MIN_TIME_BW_UPDATES = 1000 * 60 * 1; // 1 minute&#xD;&#xA;    &#xD;&#xA;    	// Declaring a Location Manager&#xD;&#xA;    	protected LocationManager locationManager;&#xD;&#xA;    &#xD;&#xA;    	public GPSTracker(Context context) {&#xD;&#xA;    		this.mContext = context;&#xD;&#xA;    		getLocation();&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	public Location getLocation() {&#xD;&#xA;    		try {&#xD;&#xA;    			locationManager = (LocationManager) mContext.getSystemService(LOCATION_SERVICE);&#xD;&#xA;    &#xD;&#xA;    			// getting GPS status&#xD;&#xA;    			isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);&#xD;&#xA;    &#xD;&#xA;    			// getting network status&#xD;&#xA;    			boolean wifiEnabled = AndroidGPSTrackingActivity.wifiManager.isWifiEnabled();&#xD;&#xA;    &#xD;&#xA;    			ConnectivityManager cm = (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);&#xD;&#xA;    			NetworkInfo activeNetwork = cm.getActiveNetworkInfo();&#xD;&#xA;    &#xD;&#xA;    			this.canGetLocation = true;&#xD;&#xA;    &#xD;&#xA;    			// if DATA Enabled get lat/long using WIFI Services&#xD;&#xA;    			if (activeNetwork.isConnected()) {&#xD;&#xA;    				locationManager.requestLocationUpdates(&#xD;&#xA;    						LocationManager.NETWORK_PROVIDER,&#xD;&#xA;    						MIN_TIME_BW_UPDATES,&#xD;&#xA;    						MIN_DISTANCE_CHANGE_FOR_UPDATES, this);&#xD;&#xA;    				Log.d(""""Network"""", """"Network"""");&#xD;&#xA;    				if (locationManager != null) {&#xD;&#xA;    					location = locationManager&#xD;&#xA;    							.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);&#xD;&#xA;    &#xD;&#xA;    				}&#xD;&#xA;    			}&#xD;&#xA;    			// if WIFI Enabled get lat/long using WIFI Services&#xD;&#xA;    			if (wifiEnabled) {&#xD;&#xA;    				locationManager.requestLocationUpdates(&#xD;&#xA;    						LocationManager.NETWORK_PROVIDER,&#xD;&#xA;    						MIN_TIME_BW_UPDATES,&#xD;&#xA;    						MIN_DISTANCE_CHANGE_FOR_UPDATES, this);&#xD;&#xA;    				Log.d(""""Network"""", """"Network"""");&#xD;&#xA;    				if (locationManager != null) {&#xD;&#xA;    					location = locationManager&#xD;&#xA;    							.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);&#xD;&#xA;    &#xD;&#xA;    				}&#xD;&#xA;    			}&#xD;&#xA;    			// if GPS Enabled get lat/long using GPS Services&#xD;&#xA;    			if (isGPSEnabled) {&#xD;&#xA;    				if (location == null) {&#xD;&#xA;    					locationManager.requestLocationUpdates(&#xD;&#xA;    							LocationManager.GPS_PROVIDER,&#xD;&#xA;    							MIN_TIME_BW_UPDATES,&#xD;&#xA;    							MIN_DISTANCE_CHANGE_FOR_UPDATES, this);&#xD;&#xA;    					Log.d(""""GPS Enabled"""", """"GPS Enabled"""");&#xD;&#xA;    					if (locationManager != null) {&#xD;&#xA;    						location = locationManager&#xD;&#xA;    								.getLastKnownLocation(LocationManager.GPS_PROVIDER);&#xD;&#xA;    &#xD;&#xA;    					}&#xD;&#xA;    				}&#xD;&#xA;    			}&#xD;&#xA;    			if (location != null) {&#xD;&#xA;    				latitude = location.getLatitude();&#xD;&#xA;    				longitude = location.getLongitude();&#xD;&#xA;    			}&#xD;&#xA;    &#xD;&#xA;    		} catch (Exception e) {&#xD;&#xA;    			e.printStackTrace();&#xD;&#xA;    		}&#xD;&#xA;    &#xD;&#xA;    		return location;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	/**&#xD;&#xA;    	 * Stop using GPS listener&#xD;&#xA;    	 * Calling this function will stop using GPS in your app&#xD;&#xA;    	 * */&#xD;&#xA;    	public void stopUsingGPS(){&#xD;&#xA;    		if(locationManager != null){&#xD;&#xA;    			locationManager.removeUpdates(GPSTracker.this);&#xD;&#xA;    		}		&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	/**&#xD;&#xA;    	 * Function to get latitude&#xD;&#xA;    	 * */&#xD;&#xA;    	public double getLatitude(){&#xD;&#xA;    		if(location != null){&#xD;&#xA;    			latitude = location.getLatitude();&#xD;&#xA;    		}&#xD;&#xA;    &#xD;&#xA;    		// return latitude&#xD;&#xA;    		return latitude;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	/**&#xD;&#xA;    	 * Function to get longitude&#xD;&#xA;    	 * */&#xD;&#xA;    	public double getLongitude(){&#xD;&#xA;    		if(location != null){&#xD;&#xA;    			longitude = location.getLongitude();&#xD;&#xA;    		}&#xD;&#xA;    &#xD;&#xA;    		// return longitude&#xD;&#xA;    		return longitude;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	/**&#xD;&#xA;    	 * Function to check GPS/wifi enabled&#xD;&#xA;    	 * @return boolean&#xD;&#xA;    	 * */&#xD;&#xA;    	public boolean canGetLocation() {&#xD;&#xA;    		return this.canGetLocation;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	/**&#xD;&#xA;    	 * Function to show settings alert dialog&#xD;&#xA;    	 * On pressing Settings button will lauch Settings Options&#xD;&#xA;    	 * */&#xD;&#xA;    	public void showSettingsAlert(){&#xD;&#xA;    		AlertDialog.Builder alertDialog = new AlertDialog.Builder(mContext);&#xD;&#xA;    &#xD;&#xA;    		// Setting Dialog Title&#xD;&#xA;    		alertDialog.setTitle(""""GPS is settings"""");&#xD;&#xA;    &#xD;&#xA;    		// Setting Dialog Message&#xD;&#xA;    		alertDialog.setMessage(""""GPS is not enabled. Do you want to go to settings menu?"""");&#xD;&#xA;    &#xD;&#xA;    		// On pressing Settings button&#xD;&#xA;    		alertDialog.setPositiveButton(""""Settings"""", new DialogInterface.OnClickListener() {&#xD;&#xA;    			public void onClick(DialogInterface dialog,int which) {&#xD;&#xA;    				Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);&#xD;&#xA;    				mContext.startActivity(intent);&#xD;&#xA;    			}&#xD;&#xA;    		});&#xD;&#xA;    &#xD;&#xA;    		// on pressing cancel button&#xD;&#xA;    		alertDialog.setNegativeButton(""""Cancel"""", new DialogInterface.OnClickListener() {&#xD;&#xA;    			public void onClick(DialogInterface dialog, int which) {&#xD;&#xA;    				dialog.cancel();&#xD;&#xA;    			}&#xD;&#xA;    		});&#xD;&#xA;    &#xD;&#xA;    		// Showing Alert Message&#xD;&#xA;    		alertDialog.show();&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	@Override&#xD;&#xA;    	public void onLocationChanged(Location location) {&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	@Override&#xD;&#xA;    	public void onProviderDisabled(String provider) {&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	@Override&#xD;&#xA;    	public void onProviderEnabled(String provider) {&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	@Override&#xD;&#xA;    	public void onStatusChanged(String provider, int status, Bundle extras) {&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	@Override&#xD;&#xA;    	public IBinder onBind(Intent arg0) {&#xD;&#xA;    		return null;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    }"
