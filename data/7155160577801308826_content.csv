"Content"
"    Sub Copy_To_Workbooks()&#xD;&#xA;    'Note: This macro use the function LastRow&#xD;&#xA;        Dim My_Range As Range&#xD;&#xA;        Dim FieldNum As Long&#xD;&#xA;        Dim FileExtStr As String&#xD;&#xA;        Dim FileFormatNum As Long&#xD;&#xA;        Dim CalcMode As Long&#xD;&#xA;        Dim ViewMode As Long&#xD;&#xA;        Dim ws2 As Worksheet&#xD;&#xA;        Dim MyPath As String&#xD;&#xA;        Dim foldername As String&#xD;&#xA;        Dim Lrow As Long&#xD;&#xA;        Dim cell As Range&#xD;&#xA;        Dim CCount As Long&#xD;&#xA;        Dim WSNew As Worksheet&#xD;&#xA;        Dim ErrNum As Long&#xD;&#xA;    &#xD;&#xA;        'Set filter range on ActiveSheet: A1 is the top left cell of your filter range&#xD;&#xA;        'and the header of the first column, D is the last column in the filter range.&#xD;&#xA;        'You can also add the sheet name to the code like this :&#xD;&#xA;        'Worksheets(""""Sheet1"""").Range(""""A1:D"""" & LastRow(Worksheets(""""Sheet1"""")))&#xD;&#xA;        'No need that the sheet is active then when you run the macro when you use this.&#xD;&#xA;        Set My_Range = Range(""""A1:D"""" & LastRow(ActiveSheet))&#xD;&#xA;        My_Range.Parent.Select&#xD;&#xA;    &#xD;&#xA;        If ActiveWorkbook.ProtectStructure = True Or _&#xD;&#xA;           My_Range.Parent.ProtectContents = True Then&#xD;&#xA;            MsgBox """"Sorry, not working when the workbook or worksheet is protected"""", _&#xD;&#xA;                   vbOKOnly, """"Copy to new workbook""""&#xD;&#xA;            Exit Sub&#xD;&#xA;        End If&#xD;&#xA;    &#xD;&#xA;        'This example filters on the first column in the range(change the field if needed)&#xD;&#xA;        'In this case the range starts in A so Field:=1 is column A, 2 = column B, ......&#xD;&#xA;        FieldNum = 1&#xD;&#xA;    &#xD;&#xA;        'Turn off AutoFilter&#xD;&#xA;        My_Range.Parent.AutoFilterMode = False&#xD;&#xA;    &#xD;&#xA;        'Set the file extension/format&#xD;&#xA;        If Val(Application.Version) < 12 Then&#xD;&#xA;            'You use Excel 97-2003&#xD;&#xA;            FileExtStr = """".xls"""": FileFormatNum = -4143&#xD;&#xA;        Else&#xD;&#xA;            'You use Excel 2007-2013&#xD;&#xA;            If ActiveWorkbook.FileFormat = 56 Then&#xD;&#xA;                FileExtStr = """".xls"""": FileFormatNum = 56&#xD;&#xA;            Else&#xD;&#xA;                FileExtStr = """".xlsx"""": FileFormatNum = 51&#xD;&#xA;            End If&#xD;&#xA;        End If&#xD;&#xA;    &#xD;&#xA;        'Change ScreenUpdating, Calculation, EnableEvents, ....&#xD;&#xA;        With Application&#xD;&#xA;            CalcMode = .Calculation&#xD;&#xA;            .Calculation = xlCalculationManual&#xD;&#xA;            .ScreenUpdating = False&#xD;&#xA;            .EnableEvents = False&#xD;&#xA;        End With&#xD;&#xA;        ViewMode = ActiveWindow.View&#xD;&#xA;        ActiveWindow.View = xlNormalView&#xD;&#xA;        ActiveSheet.DisplayPageBreaks = False&#xD;&#xA;    &#xD;&#xA;        'Delete the sheet RDBLogSheet if it exists&#xD;&#xA;        On Error Resume Next&#xD;&#xA;        Application.DisplayAlerts = False&#xD;&#xA;        Sheets(""""RDBLogSheet"""").Delete&#xD;&#xA;        Application.DisplayAlerts = True&#xD;&#xA;        On Error GoTo 0&#xD;&#xA;    &#xD;&#xA;        ' Add worksheet to copy/Paste the unique list&#xD;&#xA;        Set ws2 = Worksheets.Add(After:=Sheets(Sheets.Count))&#xD;&#xA;        ws2.Name = """"RDBLogSheet""""&#xD;&#xA;    &#xD;&#xA;        'Fill in the path\folder where you want the new folder with the files&#xD;&#xA;        'you can use also this """"C:\Users\Ron\test""""&#xD;&#xA;        MyPath = Application.DefaultFilePath&#xD;&#xA;    &#xD;&#xA;        'Add a slash at the end if the user forget it&#xD;&#xA;        If Right(MyPath, 1) <> """"\"""" Then&#xD;&#xA;            MyPath = MyPath & """"\""""&#xD;&#xA;        End If&#xD;&#xA;    &#xD;&#xA;        'Create folder for the new files&#xD;&#xA;        foldername = MyPath & Format(Now, """"yyyy-mm-dd hh-mm-ss"""") & """"\""""&#xD;&#xA;        MkDir foldername&#xD;&#xA;    &#xD;&#xA;        With ws2&#xD;&#xA;            'first we copy the Unique data from the filter field to ws2&#xD;&#xA;            My_Range.Columns(FieldNum).AdvancedFilter _&#xD;&#xA;                    Action:=xlFilterCopy, _&#xD;&#xA;                    CopyToRange:=.Range(""""A3""""), Unique:=True&#xD;&#xA;    &#xD;&#xA;            'loop through the unique list in ws2 and filter/copy to a new sheet&#xD;&#xA;            Lrow = .Cells(Rows.Count, """"A"""").End(xlUp).Row&#xD;&#xA;            For Each cell In .Range(""""A4:A"""" & Lrow)&#xD;&#xA;    &#xD;&#xA;                'Filter the range&#xD;&#xA;                My_Range.AutoFilter Field:=FieldNum, Criteria1:=""""="""" & _&#xD;&#xA;                 Replace(Replace(Replace(cell.Value, """"~"""", """"~~""""), """"*"""", """"~*""""), """"?"""", """"~?"""")&#xD;&#xA;    &#xD;&#xA;                'Check if there are no more then 8192 areas(limit of areas)&#xD;&#xA;                CCount = 0&#xD;&#xA;                On Error Resume Next&#xD;&#xA;                CCount = My_Range.Columns(1).SpecialCells(xlCellTypeVisible) _&#xD;&#xA;                         .Areas(1).Cells.Count&#xD;&#xA;                On Error GoTo 0&#xD;&#xA;                If CCount = 0 Then&#xD;&#xA;                    MsgBox """"There are more than 8192 areas for the value : """" & cell.Value _&#xD;&#xA;                         & vbNewLine & """"It is not possible to copy the visible data."""" _&#xD;&#xA;                         & vbNewLine & """"Tip: Sort your data before you use this macro."""", _&#xD;&#xA;                           vbOKOnly, """"Split in worksheets""""&#xD;&#xA;                Else&#xD;&#xA;                    'Add new workbook with one sheet&#xD;&#xA;                    Set WSNew = Workbooks.Add(xlWBATWorksheet).Worksheets(1)&#xD;&#xA;    &#xD;&#xA;                    'Copy/paste the visible data to the new workbook&#xD;&#xA;                    My_Range.SpecialCells(xlCellTypeVisible).Copy&#xD;&#xA;                    With WSNew.Range(""""A1"""")&#xD;&#xA;                        ' Paste:=8 will copy the columnwidth in Excel 2000 and higher&#xD;&#xA;                        ' Remove this line if you use Excel 97&#xD;&#xA;                        .PasteSpecial Paste:=8&#xD;&#xA;                        .PasteSpecial xlPasteValues&#xD;&#xA;                        .PasteSpecial xlPasteFormats&#xD;&#xA;                        Application.CutCopyMode = False&#xD;&#xA;                        .Select&#xD;&#xA;                    End With&#xD;&#xA;    &#xD;&#xA;                    'Save the file in the new folder and close it&#xD;&#xA;                    On Error Resume Next&#xD;&#xA;                    WSNew.Parent.SaveAs foldername & _&#xD;&#xA;                                        cell.Value & FileExtStr, FileFormatNum&#xD;&#xA;                    If Err.Number > 0 Then&#xD;&#xA;                        Err.Clear&#xD;&#xA;                        ErrNum = ErrNum + 1&#xD;&#xA;    &#xD;&#xA;                        WSNew.Parent.SaveAs foldername & _&#xD;&#xA;                         """"Error_"""" & Format(ErrNum, """"0000"""") & FileExtStr, FileFormatNum&#xD;&#xA;    &#xD;&#xA;                        .Cells(cell.Row, """"B"""").Formula = """"=Hyperlink("""""""""""" & foldername & _&#xD;&#xA;                          """"Error_"""" & Format(ErrNum, """"0000"""") & FileExtStr & """""""""""")""""&#xD;&#xA;    &#xD;&#xA;                        .Cells(cell.Row, """"A"""").Interior.Color = vbRed&#xD;&#xA;                    Else&#xD;&#xA;                        .Cells(cell.Row, """"B"""").Formula = _&#xD;&#xA;                        """"=Hyperlink("""""""""""" & foldername & cell.Value & FileExtStr & """""""""""")""""&#xD;&#xA;                    End If&#xD;&#xA;    &#xD;&#xA;                    WSNew.Parent.Close False&#xD;&#xA;                    On Error GoTo 0&#xD;&#xA;                End If&#xD;&#xA;    &#xD;&#xA;                'Show all the data in the range&#xD;&#xA;                My_Range.AutoFilter Field:=FieldNum&#xD;&#xA;    &#xD;&#xA;            Next cell&#xD;&#xA;            .Cells(1, """"A"""").Value = """"Red cell: can't use the Unique name as file name""""&#xD;&#xA;            .Cells(1, """"B"""").Value = """"Created Files (Click on the link to open a file)""""&#xD;&#xA;            .Cells(3, """"A"""").Value = """"Unique Values""""&#xD;&#xA;            .Cells(3, """"B"""").Value = """"Full Path and File name""""&#xD;&#xA;            .Cells(3, """"A"""").Font.Bold = True&#xD;&#xA;            .Cells(3, """"B"""").Font.Bold = True&#xD;&#xA;            .Columns(""""A:B"""").AutoFit&#xD;&#xA;    &#xD;&#xA;        End With&#xD;&#xA;    &#xD;&#xA;        'Turn off AutoFilter&#xD;&#xA;        My_Range.Parent.AutoFilterMode = False&#xD;&#xA;    &#xD;&#xA;        If ErrNum > 0 Then&#xD;&#xA;            MsgBox """"Rename every WorkSheet name that start with """"""""Error_"""""""" manually"""" _&#xD;&#xA;                 & vbNewLine & """"There are characters in the name that are not allowed"""" _&#xD;&#xA;                 & vbNewLine & """"in a sheet name or the worksheet already exist.""""&#xD;&#xA;        End If&#xD;&#xA;    &#xD;&#xA;        'Restore ScreenUpdating, Calculation, EnableEvents, ....&#xD;&#xA;        My_Range.Parent.Select&#xD;&#xA;        ActiveWindow.View = ViewMode&#xD;&#xA;        ws2.Select&#xD;&#xA;        With Application&#xD;&#xA;            .ScreenUpdating = True&#xD;&#xA;            .EnableEvents = True&#xD;&#xA;            .Calculation = CalcMode&#xD;&#xA;        End With&#xD;&#xA;    &#xD;&#xA;    End Sub&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    Function LastRow(sh As Worksheet)&#xD;&#xA;        On Error Resume Next&#xD;&#xA;        LastRow = sh.Cells.Find(What:=""""*"""", _&#xD;&#xA;                                After:=sh.Range(""""A1""""), _&#xD;&#xA;                                Lookat:=xlPart, _&#xD;&#xA;                                LookIn:=xlValues, _&#xD;&#xA;                                SearchOrder:=xlByRows, _&#xD;&#xA;                                SearchDirection:=xlPrevious, _&#xD;&#xA;                                MatchCase:=False).Row&#xD;&#xA;        On Error GoTo 0&#xD;&#xA;    End Function"
