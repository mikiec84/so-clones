"Content"
"    private String selectedImagePath = """""""";&#xD;&#xA;    	final private int PICK_IMAGE = 1;&#xD;&#xA;    	final private int CAPTURE_IMAGE = 2;&#xD;&#xA;    &#xD;&#xA;    public Uri setImageUri() {&#xD;&#xA;    		// Store image in dcim&#xD;&#xA;    		File file = new File(Environment.getExternalStorageDirectory() + """"/DCIM/"""", """"image"""" + new Date().getTime() + """".png"""");&#xD;&#xA;    		Uri imgUri = Uri.fromFile(file);&#xD;&#xA;    		this.imgPath = file.getAbsolutePath();&#xD;&#xA;    		return imgUri;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	&#xD;&#xA;    	public String getImagePath() {&#xD;&#xA;    		return imgPath;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    btnGallery.setOnClickListener(new OnClickListener() {&#xD;&#xA;    &#xD;&#xA;    			@Override&#xD;&#xA;    			public void onClick(View v) {&#xD;&#xA;    				Intent intent = new Intent();&#xD;&#xA;    				intent.setType(""""image/*"""");&#xD;&#xA;    				intent.setAction(Intent.ACTION_GET_CONTENT);&#xD;&#xA;    				startActivityForResult(Intent.createChooser(intent, """"""""), PICK_IMAGE);&#xD;&#xA;    &#xD;&#xA;    			}&#xD;&#xA;    		});&#xD;&#xA;    &#xD;&#xA;    		btnCapture.setOnClickListener(new OnClickListener() {&#xD;&#xA;    &#xD;&#xA;    			@Override&#xD;&#xA;    			public void onClick(View v) {&#xD;&#xA;    				final Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);&#xD;&#xA;    				intent.putExtra(MediaStore.EXTRA_OUTPUT, setImageUri());&#xD;&#xA;    				startActivityForResult(intent, CAPTURE_IMAGE);&#xD;&#xA;    			}&#xD;&#xA;    		});&#xD;&#xA;    &#xD;&#xA;    @Override&#xD;&#xA;    	protected void onActivityResult(int requestCode, int resultCode, Intent data) {&#xD;&#xA;    		if (resultCode != Activity.RESULT_CANCELED) {&#xD;&#xA;    			if (requestCode == PICK_IMAGE) {&#xD;&#xA;    				selectedImagePath = getAbsolutePath(data.getData());&#xD;&#xA;    				imgUser.setImageBitmap(decodeFile(selectedImagePath));&#xD;&#xA;    			} else if (requestCode == CAPTURE_IMAGE) {&#xD;&#xA;    				selectedImagePath = getImagePath();&#xD;&#xA;    				imgUser.setImageBitmap(decodeFile(selectedImagePath));&#xD;&#xA;    			} else {&#xD;&#xA;    				super.onActivityResult(requestCode, resultCode, data);&#xD;&#xA;    			}&#xD;&#xA;    		}&#xD;&#xA;    &#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    public Bitmap decodeFile(String path) {&#xD;&#xA;    		try {&#xD;&#xA;    			// Decode image size&#xD;&#xA;    			BitmapFactory.Options o = new BitmapFactory.Options();&#xD;&#xA;    			o.inJustDecodeBounds = true;&#xD;&#xA;    			BitmapFactory.decodeFile(path, o);&#xD;&#xA;    			// The new size we want to scale to&#xD;&#xA;    			final int REQUIRED_SIZE = 70;&#xD;&#xA;    &#xD;&#xA;    			// Find the correct scale value. It should be the power of 2.&#xD;&#xA;    			int scale = 1;&#xD;&#xA;    			while (o.outWidth / scale / 2 >= REQUIRED_SIZE && o.outHeight / scale / 2 >= REQUIRED_SIZE)&#xD;&#xA;    				scale *= 2;&#xD;&#xA;    &#xD;&#xA;    			// Decode with inSampleSize&#xD;&#xA;    			BitmapFactory.Options o2 = new BitmapFactory.Options();&#xD;&#xA;    			o2.inSampleSize = scale;&#xD;&#xA;    			return BitmapFactory.decodeFile(path, o2);&#xD;&#xA;    		} catch (Throwable e) {&#xD;&#xA;    			e.printStackTrace();&#xD;&#xA;    		}&#xD;&#xA;    		return null;&#xD;&#xA;    &#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    public String getAbsolutePath(Uri uri) {&#xD;&#xA;    		String[] projection = { MediaColumns.DATA };&#xD;&#xA;    		@SuppressWarnings(""""deprecation"""")&#xD;&#xA;    		Cursor cursor = managedQuery(uri, projection, null, null, null);&#xD;&#xA;    		if (cursor != null) {&#xD;&#xA;    			int column_index = cursor.getColumnIndexOrThrow(MediaColumns.DATA);&#xD;&#xA;    			cursor.moveToFirst();&#xD;&#xA;    			return cursor.getString(column_index);&#xD;&#xA;    		} else&#xD;&#xA;    			return null;&#xD;&#xA;    	}"
