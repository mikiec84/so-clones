"Content"
"     var fs = require('fs');&#xD;&#xA;        var readline = require('readline');&#xD;&#xA;        var google = require('googleapis');&#xD;&#xA;        var googleAuth = require('google-auth-library');&#xD;&#xA;        &#xD;&#xA;        // If modifying these scopes, delete your previously saved credentials&#xD;&#xA;        // at ~/.credentials/gmail-nodejs-quickstart.json&#xD;&#xA;        var SCOPES = ['https://www.googleapis.com/auth/gmail.readonly'];&#xD;&#xA;        var TOKEN_DIR = (process.env.HOME || process.env.HOMEPATH ||&#xD;&#xA;            process.env.USERPROFILE) + '/.credentials/';&#xD;&#xA;        var TOKEN_PATH = TOKEN_DIR + 'gmail-nodejs-quickstart.json';&#xD;&#xA;        &#xD;&#xA;        // Load client secrets from a local file.&#xD;&#xA;        fs.readFile('client_secret.json', function processClientSecrets(err, content) {&#xD;&#xA;          if (err) {&#xD;&#xA;            console.log('Error loading client secret file: ' + err);&#xD;&#xA;            return;&#xD;&#xA;          }&#xD;&#xA;          // Authorize a client with the loaded credentials, then call the&#xD;&#xA;          // Gmail API.&#xD;&#xA;          authorize(JSON.parse(content), listLabels);&#xD;&#xA;        });&#xD;&#xA;        &#xD;&#xA;        /**&#xD;&#xA;         * Create an OAuth2 client with the given credentials, and then execute the&#xD;&#xA;         * given callback function.&#xD;&#xA;         *&#xD;&#xA;         * @param {Object} credentials The authorization client credentials.&#xD;&#xA;         * @param {function} callback The callback to call with the authorized client.&#xD;&#xA;         */&#xD;&#xA;        function authorize(credentials, callback) {&#xD;&#xA;          var clientSecret = credentials.installed.client_secret;&#xD;&#xA;          var clientId = credentials.installed.client_id;&#xD;&#xA;          var redirectUrl = credentials.installed.redirect_uris[0];&#xD;&#xA;          var auth = new googleAuth();&#xD;&#xA;          var oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);&#xD;&#xA;        &#xD;&#xA;          // Check if we have previously stored a token.&#xD;&#xA;          fs.readFile(TOKEN_PATH, function(err, token) {&#xD;&#xA;            if (err) {&#xD;&#xA;              getNewToken(oauth2Client, callback);&#xD;&#xA;            } else {&#xD;&#xA;              oauth2Client.credentials = JSON.parse(token);&#xD;&#xA;              callback(oauth2Client);&#xD;&#xA;            }&#xD;&#xA;          });&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        /**&#xD;&#xA;         * Get and store new token after prompting for user authorization, and then&#xD;&#xA;         * execute the given callback with the authorized OAuth2 client.&#xD;&#xA;         *&#xD;&#xA;         * @param {google.auth.OAuth2} oauth2Client The OAuth2 client to get token for.&#xD;&#xA;         * @param {getEventsCallback} callback The callback to call with the authorized&#xD;&#xA;         *     client.&#xD;&#xA;         */&#xD;&#xA;        function getNewToken(oauth2Client, callback) {&#xD;&#xA;          var authUrl = oauth2Client.generateAuthUrl({&#xD;&#xA;            access_type: 'offline',&#xD;&#xA;            scope: SCOPES&#xD;&#xA;          });&#xD;&#xA;          console.log('Authorize this app by visiting this url: ', authUrl);&#xD;&#xA;          var rl = readline.createInterface({&#xD;&#xA;            input: process.stdin,&#xD;&#xA;            output: process.stdout&#xD;&#xA;          });&#xD;&#xA;          rl.question('Enter the code from that page here: ', function(code) {&#xD;&#xA;            rl.close();&#xD;&#xA;            oauth2Client.getToken(code, function(err, token) {&#xD;&#xA;              if (err) {&#xD;&#xA;                console.log('Error while trying to retrieve access token', err);&#xD;&#xA;                return;&#xD;&#xA;              }&#xD;&#xA;              oauth2Client.credentials = token;&#xD;&#xA;              storeToken(token);&#xD;&#xA;              callback(oauth2Client);&#xD;&#xA;            });&#xD;&#xA;          });&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        /**&#xD;&#xA;         * Store token to disk be used in later program executions.&#xD;&#xA;         *&#xD;&#xA;         * @param {Object} token The token to store to disk.&#xD;&#xA;         */&#xD;&#xA;        function storeToken(token) {&#xD;&#xA;          try {&#xD;&#xA;            fs.mkdirSync(TOKEN_DIR);&#xD;&#xA;          } catch (err) {&#xD;&#xA;            if (err.code != 'EEXIST') {&#xD;&#xA;              throw err;&#xD;&#xA;            }&#xD;&#xA;          }&#xD;&#xA;          fs.writeFile(TOKEN_PATH, JSON.stringify(token));&#xD;&#xA;          console.log('Token stored to ' + TOKEN_PATH);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        /**&#xD;&#xA;         * Lists the labels in the user's account.&#xD;&#xA;         *&#xD;&#xA;         * @param {google.auth.OAuth2} auth An authorized OAuth2 client.&#xD;&#xA;         */&#xD;&#xA;        function listLabels(auth) {&#xD;&#xA;          var gmail = google.gmail('v1');&#xD;&#xA;          gmail.users.labels.list({&#xD;&#xA;            auth: auth,&#xD;&#xA;            userId: 'me',&#xD;&#xA;          }, function(err, response) {&#xD;&#xA;            if (err) {&#xD;&#xA;              console.log('The API returned an error: ' + err);&#xD;&#xA;              return;&#xD;&#xA;            }&#xD;&#xA;            var labels = response.labels;&#xD;&#xA;            if (labels.length == 0) {&#xD;&#xA;              console.log('No labels found.');&#xD;&#xA;            } else {&#xD;&#xA;              console.log('Labels:');&#xD;&#xA;              for (var i = 0; i < labels.length; i++) {&#xD;&#xA;                var label = labels[i];&#xD;&#xA;                console.log('- %s', label.name);&#xD;&#xA;              }&#xD;&#xA;            }&#xD;&#xA;          });&#xD;&#xA;        }"
