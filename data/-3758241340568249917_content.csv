"Content"
"        import java.awt.*;&#xD;&#xA;    import java.awt.event.*;&#xD;&#xA;    import java.awt.image.BufferedImage;&#xD;&#xA;    import java.io.IOException;&#xD;&#xA;    import java.net.*;&#xD;&#xA;    import java.util.HashMap;&#xD;&#xA;    import java.util.Map;&#xD;&#xA;    import javax.imageio.ImageIO;&#xD;&#xA;    import javax.swing.*;&#xD;&#xA;    &#xD;&#xA;    public class MoveIcon extends JPanel {&#xD;&#xA;    &#xD;&#xA;        private static final long serialVersionUID = 1L;&#xD;&#xA;        private static final String IMAGE_PATH = """"http://duke.kenai.com/misc/Bullfight.jpg"""";&#xD;&#xA;        private static final String IMAGE_PATH_PLAYER = """"http://duke.kenai.com/iconSized/duke4.gif"""";&#xD;&#xA;        public static final int STEP = 3;&#xD;&#xA;        private static final int TIMER_DELAY = STEP * 8;&#xD;&#xA;        private BufferedImage bkgrndImage = null;&#xD;&#xA;        private BufferedImage playerImage = null;&#xD;&#xA;        private Map<Direction, Boolean> directionMap = new HashMap<Direction, Boolean>();&#xD;&#xA;        private int playerX = 0;&#xD;&#xA;        private int playerY = 0;&#xD;&#xA;    &#xD;&#xA;        enum Direction {&#xD;&#xA;    &#xD;&#xA;            UP(KeyEvent.VK_UP, 0, -1), DOWN(KeyEvent.VK_DOWN, 0, 1),&#xD;&#xA;            LEFT(KeyEvent.VK_LEFT, -1, 0), RIGHT(KeyEvent.VK_RIGHT, 1, 0);&#xD;&#xA;            private int keyCode;&#xD;&#xA;            private int xDirection;&#xD;&#xA;            private int yDirection;&#xD;&#xA;    &#xD;&#xA;            private Direction(int keyCode, int xDirection, int yDirection) {&#xD;&#xA;                this.keyCode = keyCode;&#xD;&#xA;                this.xDirection = xDirection;&#xD;&#xA;                this.yDirection = yDirection;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public int getKeyCode() {&#xD;&#xA;                return keyCode;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public int getXDirection() {&#xD;&#xA;                return xDirection;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public int getYDirection() {&#xD;&#xA;                return yDirection;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public MoveIcon() {&#xD;&#xA;            try {&#xD;&#xA;                URL bkgrdImageURL = new URL(IMAGE_PATH);&#xD;&#xA;                URL playerImageURL = new URL(IMAGE_PATH_PLAYER);&#xD;&#xA;                bkgrndImage = ImageIO.read(bkgrdImageURL);&#xD;&#xA;                playerImage = ImageIO.read(playerImageURL);&#xD;&#xA;                setPreferredSize(new Dimension(bkgrndImage.getWidth(), bkgrndImage.getHeight()));&#xD;&#xA;            } catch (MalformedURLException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            } catch (IOException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;            for (Direction direction : Direction.values()) {&#xD;&#xA;                directionMap.put(direction, false);&#xD;&#xA;            }&#xD;&#xA;            setKeyBindings();&#xD;&#xA;            Timer timer = new Timer(TIMER_DELAY, new TimerListener());&#xD;&#xA;            timer.start();&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void setKeyBindings() {&#xD;&#xA;            InputMap inMap = getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);&#xD;&#xA;            ActionMap actMap = getActionMap();&#xD;&#xA;            for (final Direction direction : Direction.values()) {&#xD;&#xA;                KeyStroke pressed = KeyStroke.getKeyStroke(direction.getKeyCode(), 0, false);&#xD;&#xA;                KeyStroke released = KeyStroke.getKeyStroke(direction.getKeyCode(), 0, true);&#xD;&#xA;                inMap.put(pressed, direction.toString() + """"pressed"""");&#xD;&#xA;                inMap.put(released, direction.toString() + """"released"""");&#xD;&#xA;                actMap.put(direction.toString() + """"pressed"""", new AbstractAction() {&#xD;&#xA;    &#xD;&#xA;                    private static final long serialVersionUID = 1L;&#xD;&#xA;    &#xD;&#xA;                    @Override&#xD;&#xA;                    public void actionPerformed(ActionEvent e) {&#xD;&#xA;                        directionMap.put(direction, true);&#xD;&#xA;                    }&#xD;&#xA;                });&#xD;&#xA;                actMap.put(direction.toString() + """"released"""", new AbstractAction() {&#xD;&#xA;    &#xD;&#xA;                    private static final long serialVersionUID = 1L;&#xD;&#xA;    &#xD;&#xA;                    @Override&#xD;&#xA;                    public void actionPerformed(ActionEvent e) {&#xD;&#xA;                        directionMap.put(direction, false);&#xD;&#xA;                    }&#xD;&#xA;                });&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        protected void paintComponent(Graphics g) {&#xD;&#xA;            super.paintComponent(g);&#xD;&#xA;            if (bkgrndImage != null) {&#xD;&#xA;                g.drawImage(bkgrndImage, 0, 0, null);&#xD;&#xA;            }&#xD;&#xA;            if (playerImage != null) {&#xD;&#xA;                g.drawImage(playerImage, playerX, playerY, null);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private class TimerListener implements ActionListener {&#xD;&#xA;    &#xD;&#xA;            @Override&#xD;&#xA;            public void actionPerformed(ActionEvent e) {&#xD;&#xA;                boolean moved = false;&#xD;&#xA;                for (Direction direction : Direction.values()) {&#xD;&#xA;                    if (directionMap.get(direction)) {&#xD;&#xA;                        playerX += STEP * direction.getXDirection();&#xD;&#xA;                        playerY += STEP * direction.getYDirection();&#xD;&#xA;                        moved = true;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                if (moved) {&#xD;&#xA;                    int x = playerX - 2 * STEP;&#xD;&#xA;                    int y = playerY - 2 * STEP;&#xD;&#xA;                    int w = playerImage.getWidth() + 4 * STEP;&#xD;&#xA;                    int h = playerImage.getHeight() + 4 * STEP;&#xD;&#xA;                    MoveIcon.this.repaint(x, y, w, h); // !! repaint just the player&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private static void createAndShowUI() {&#xD;&#xA;            JFrame frame = new JFrame(""""MoveIcon"""");&#xD;&#xA;            frame.getContentPane().add(new MoveIcon());&#xD;&#xA;            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#xD;&#xA;            frame.pack();&#xD;&#xA;            frame.setLocationRelativeTo(null);&#xD;&#xA;            frame.setVisible(true);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static void main(String[] args) {&#xD;&#xA;            java.awt.EventQueue.invokeLater(new Runnable() {&#xD;&#xA;    &#xD;&#xA;                @Override&#xD;&#xA;                public void run() {&#xD;&#xA;                    createAndShowUI();&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    }"
