"Content"
"    public class SimpleThreads {&#xD;&#xA;        // Display a message, preceded by&#xD;&#xA;        // the name of the current thread&#xD;&#xA;        static void threadMessage(String message) {&#xD;&#xA;            String threadName =&#xD;&#xA;                Thread.currentThread().getName();&#xD;&#xA;            System.out.format(""""%s: %s%n"""",&#xD;&#xA;                              threadName,&#xD;&#xA;                              message);&#xD;&#xA;        }&#xD;&#xA;        private static class MessageLoop&#xD;&#xA;            implements Runnable {&#xD;&#xA;            public void run() {&#xD;&#xA;                String importantInfo[] = {&#xD;&#xA;                    """"Mares eat oats"""",&#xD;&#xA;                    """"Does eat oats"""",&#xD;&#xA;                    """"Little lambs eat ivy"""",&#xD;&#xA;                    """"A kid will eat ivy too""""&#xD;&#xA;                };&#xD;&#xA;                try {&#xD;&#xA;                    for (int i = 0;&#xD;&#xA;                         i < importantInfo.length;&#xD;&#xA;                         i++) {&#xD;&#xA;                        // Pause for 4 seconds&#xD;&#xA;                        Thread.sleep(4000);&#xD;&#xA;                        // Print a message&#xD;&#xA;                        threadMessage(importantInfo[i]);&#xD;&#xA;                    }&#xD;&#xA;                } catch (InterruptedException e) {&#xD;&#xA;                    threadMessage(""""I wasn't done!"""");&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        public static void main(String args[])&#xD;&#xA;            throws InterruptedException {&#xD;&#xA;            // Delay, in milliseconds before&#xD;&#xA;            // we interrupt MessageLoop&#xD;&#xA;            // thread (default one hour).&#xD;&#xA;            long patience = 1000 * 60 * 60;&#xD;&#xA;            // If command line argument&#xD;&#xA;            // present, gives patience&#xD;&#xA;            // in seconds.&#xD;&#xA;            if (args.length > 0) {&#xD;&#xA;                try {&#xD;&#xA;                    patience = Long.parseLong(args[0]) * 1000;&#xD;&#xA;                } catch (NumberFormatException e) {&#xD;&#xA;                    System.err.println(""""Argument must be an integer."""");&#xD;&#xA;                    System.exit(1);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            threadMessage(""""Starting MessageLoop thread"""");&#xD;&#xA;            long startTime = System.currentTimeMillis();&#xD;&#xA;            Thread t = new Thread(new MessageLoop());&#xD;&#xA;            t.start();&#xD;&#xA;            threadMessage(""""Waiting for MessageLoop thread to finish"""");&#xD;&#xA;            // loop until MessageLoop&#xD;&#xA;            // thread exits&#xD;&#xA;            while (t.isAlive()) {&#xD;&#xA;                threadMessage(""""Still waiting..."""");&#xD;&#xA;                // Wait maximum of 1 second&#xD;&#xA;                // for MessageLoop thread&#xD;&#xA;                // to finish.&#xD;&#xA;                t.join(1000);&#xD;&#xA;                if (((System.currentTimeMillis() - startTime) > patience)&#xD;&#xA;                      && t.isAlive()) {&#xD;&#xA;                    threadMessage(""""Tired of waiting!"""");&#xD;&#xA;                    t.interrupt();&#xD;&#xA;                    // Shouldn't be long now&#xD;&#xA;                    // -- wait indefinitely&#xD;&#xA;                    t.join();&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            threadMessage(""""Finally!"""");&#xD;&#xA;        }&#xD;&#xA;    }"
