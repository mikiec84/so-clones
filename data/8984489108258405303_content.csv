"Content"
"    #include <windows.h>&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;    #include <tchar.h>&#xD;&#xA;    &#xD;&#xA;    void _tmain( int argc, TCHAR *argv[] )&#xD;&#xA;    {&#xD;&#xA;        STARTUPINFO si;&#xD;&#xA;        PROCESS_INFORMATION pi;&#xD;&#xA;    &#xD;&#xA;        ZeroMemory( &si, sizeof(si) );&#xD;&#xA;        si.cb = sizeof(si);&#xD;&#xA;        ZeroMemory( &pi, sizeof(pi) );&#xD;&#xA;    &#xD;&#xA;        if( argc != 2 )&#xD;&#xA;        {&#xD;&#xA;            printf(""""Usage: %s [cmdline]\n"""", argv[0]);&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        // Start the child process. &#xD;&#xA;        if( !CreateProcess( NULL,   // No module name (use command line)&#xD;&#xA;            argv[1],        // Command line&#xD;&#xA;            NULL,           // Process handle not inheritable&#xD;&#xA;            NULL,           // Thread handle not inheritable&#xD;&#xA;            FALSE,          // Set handle inheritance to FALSE&#xD;&#xA;            0,              // No creation flags&#xD;&#xA;            NULL,           // Use parent's environment block&#xD;&#xA;            NULL,           // Use parent's starting directory &#xD;&#xA;            &si,            // Pointer to STARTUPINFO structure&#xD;&#xA;            &pi )           // Pointer to PROCESS_INFORMATION structure&#xD;&#xA;        ) &#xD;&#xA;        {&#xD;&#xA;            printf( """"CreateProcess failed (%d).\n"""", GetLastError() );&#xD;&#xA;    		return;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        // Wait until child process exits.&#xD;&#xA;        WaitForSingleObject( pi.hProcess, INFINITE );&#xD;&#xA;    &#xD;&#xA;        // Close process and thread handles. &#xD;&#xA;        CloseHandle( pi.hProcess );&#xD;&#xA;        CloseHandle( pi.hThread );&#xD;&#xA;    }"
