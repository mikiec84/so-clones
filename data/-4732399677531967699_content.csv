"Content"
"        public class MyAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {&#xD;&#xA;        class ViewHolder0 extends RecyclerView.ViewHolder {&#xD;&#xA;            ...&#xD;&#xA;            public ViewHolder0(View itemView){&#xD;&#xA;            ...&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        class ViewHolder2 extends RecyclerView.ViewHolder {&#xD;&#xA;            ...&#xD;&#xA;            public ViewHolder2(View itemView){&#xD;&#xA;            ...&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public int getItemViewType(int position) {&#xD;&#xA;            // Just as an example, return 0 or 2 depending on position&#xD;&#xA;            // Note that unlike in ListView adapters, types don't have to be contiguous&#xD;&#xA;            return position % 2 * 2;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {&#xD;&#xA;             switch (viewType) {&#xD;&#xA;                 case 0: return new ViewHolder0(...);&#xD;&#xA;                 case 2: return new ViewHolder2(...);&#xD;&#xA;                 ...&#xD;&#xA;             }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void onBindViewHolder(final RecyclerView.ViewHolder holder, final int position) {&#xD;&#xA;            switch (holder.getItemViewType()) {&#xD;&#xA;                case 0:&#xD;&#xA;                    ViewHolder0 viewHolder0 = (ViewHolder0)holder;&#xD;&#xA;                    ...&#xD;&#xA;                    break;&#xD;&#xA;    &#xD;&#xA;                case 2:&#xD;&#xA;                    ViewHolder2 viewHolder2 = (ViewHolder2)holder;&#xD;&#xA;                    ...&#xD;&#xA;                    break;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }"
