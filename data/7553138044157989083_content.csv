"Content"
"	[HttpPost]&#xD;&#xA;	[AllowAnonymous]&#xD;&#xA;	[ValidateAntiForgeryToken]&#xD;&#xA;	public async Task<ActionResult> Login(LoginViewModel model, string returnUrl)&#xD;&#xA;	{&#xD;&#xA;		if (!ModelState.IsValid)&#xD;&#xA;		{&#xD;&#xA;			return View(model);&#xD;&#xA;		}&#xD;&#xA;		// This doesn't count login failures towards account lockout&#xD;&#xA;		// To enable password failures to trigger account lockout, change to shouldLockout: true&#xD;&#xA;		var result = await SignInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, shouldLockout: false);&#xD;&#xA;		switch (result)&#xD;&#xA;		{&#xD;&#xA;			case SignInStatus.Success:&#xD;&#xA;				return RedirectToLocal(returnUrl);&#xD;&#xA;			case SignInStatus.LockedOut:&#xD;&#xA;				return View(""""Lockout"""");&#xD;&#xA;			case SignInStatus.RequiresVerification:&#xD;&#xA;				return RedirectToAction(""""SendCode"""", new { ReturnUrl = returnUrl, RememberMe = model.RememberMe });&#xD;&#xA;			case SignInStatus.Failure:&#xD;&#xA;			default:&#xD;&#xA;				ModelState.AddModelError("""""""", """"Invalid login attempt."""");&#xD;&#xA;				return View(model);&#xD;&#xA;		}&#xD;&#xA;	}"
