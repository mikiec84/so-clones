"Content"
"    public class DisposeExample&#xD;&#xA;    {&#xD;&#xA;        // A base class that implements IDisposable. &#xD;&#xA;        // By implementing IDisposable, you are announcing that &#xD;&#xA;        // instances of this type allocate scarce resources. &#xD;&#xA;        public class MyResource: IDisposable&#xD;&#xA;        {&#xD;&#xA;            // Pointer to an external unmanaged resource. &#xD;&#xA;            private IntPtr handle;&#xD;&#xA;            // Other managed resource this class uses. &#xD;&#xA;            private Component component = new Component();&#xD;&#xA;            // Track whether Dispose has been called. &#xD;&#xA;            private bool disposed = false;&#xD;&#xA;    &#xD;&#xA;            // The class constructor. &#xD;&#xA;            public MyResource(IntPtr handle)&#xD;&#xA;            {&#xD;&#xA;                this.handle = handle;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            // Implement IDisposable. &#xD;&#xA;            // Do not make this method virtual. &#xD;&#xA;            // A derived class should not be able to override this method. &#xD;&#xA;            public void Dispose()&#xD;&#xA;            {&#xD;&#xA;                Dispose(true);&#xD;&#xA;                // This object will be cleaned up by the Dispose method. &#xD;&#xA;                // Therefore, you should call GC.SupressFinalize to &#xD;&#xA;                // take this object off the finalization queue &#xD;&#xA;                // and prevent finalization code for this object &#xD;&#xA;                // from executing a second time.&#xD;&#xA;                GC.SuppressFinalize(this);&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            // Dispose(bool disposing) executes in two distinct scenarios. &#xD;&#xA;            // If disposing equals true, the method has been called directly &#xD;&#xA;            // or indirectly by a user's code. Managed and unmanaged resources &#xD;&#xA;            // can be disposed. &#xD;&#xA;            // If disposing equals false, the method has been called by the &#xD;&#xA;            // runtime from inside the finalizer and you should not reference &#xD;&#xA;            // other objects. Only unmanaged resources can be disposed. &#xD;&#xA;            protected virtual void Dispose(bool disposing)&#xD;&#xA;            {&#xD;&#xA;                // Check to see if Dispose has already been called. &#xD;&#xA;                if(!this.disposed)&#xD;&#xA;                {&#xD;&#xA;                    // If disposing equals true, dispose all managed &#xD;&#xA;                    // and unmanaged resources. &#xD;&#xA;                    if(disposing)&#xD;&#xA;                    {&#xD;&#xA;                        // Dispose managed resources.&#xD;&#xA;                        component.Dispose();&#xD;&#xA;                    }&#xD;&#xA;    &#xD;&#xA;                    // Call the appropriate methods to clean up &#xD;&#xA;                    // unmanaged resources here. &#xD;&#xA;                    // If disposing is false, &#xD;&#xA;                    // only the following code is executed.&#xD;&#xA;                    CloseHandle(handle);&#xD;&#xA;                    handle = IntPtr.Zero;&#xD;&#xA;    &#xD;&#xA;                    // Note disposing has been done.&#xD;&#xA;                    disposed = true;&#xD;&#xA;    &#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            // Use interop to call the method necessary &#xD;&#xA;            // to clean up the unmanaged resource.&#xD;&#xA;            [System.Runtime.InteropServices.DllImport(""""Kernel32"""")]&#xD;&#xA;            private extern static Boolean CloseHandle(IntPtr handle);&#xD;&#xA;    &#xD;&#xA;            // Use C# destructor syntax for finalization code. &#xD;&#xA;            // This destructor will run only if the Dispose method &#xD;&#xA;            // does not get called. &#xD;&#xA;            // It gives your base class the opportunity to finalize. &#xD;&#xA;            // Do not provide destructors in types derived from this class.&#xD;&#xA;            ~MyResource()&#xD;&#xA;            {&#xD;&#xA;                // Do not re-create Dispose clean-up code here. &#xD;&#xA;                // Calling Dispose(false) is optimal in terms of &#xD;&#xA;                // readability and maintainability.&#xD;&#xA;                Dispose(false);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        public static void Main()&#xD;&#xA;        {&#xD;&#xA;            // Insert code here to create &#xD;&#xA;            // and use the MyResource object.&#xD;&#xA;        }&#xD;&#xA;    }"
