"Content"
"        const path = require('path');&#xD;&#xA;    const webpack = require('webpack');&#xD;&#xA;    const merge = require('webpack-merge');&#xD;&#xA;    const AotPlugin = require('@ngtools/webpack').AotPlugin;&#xD;&#xA;    const CheckerPlugin = require('awesome-typescript-loader').CheckerPlugin;&#xD;&#xA;    &#xD;&#xA;    module.exports = (env) => {&#xD;&#xA;        // Configuration in common to both client-side and server-side bundles&#xD;&#xA;        const isDevBuild = !(env && env.prod);&#xD;&#xA;        const sharedConfig = {&#xD;&#xA;            stats: { modules: false },&#xD;&#xA;            context: __dirname,&#xD;&#xA;            resolve: { extensions: [ '.js', '.ts' ] },&#xD;&#xA;            output: {&#xD;&#xA;                filename: '[name].js',&#xD;&#xA;                publicPath: 'dist/' // Webpack dev middleware, if enabled, handles requests for this URL prefix&#xD;&#xA;            },&#xD;&#xA;            module: {&#xD;&#xA;                rules: [&#xD;&#xA;                    //{ test: /\.ts$/, include: /ClientApp/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },&#xD;&#xA;                    { test: /\.html$/, use: 'html-loader?minimize=false' },&#xD;&#xA;                    { test: /\.css$/, use: [ 'to-string-loader', isDevBuild ? 'css-loader' : 'css-loader?minimize' ] },&#xD;&#xA;                    { test: /\.(png|jpg|jpeg|gif|svg)$/, use: 'url-loader?limit=25000' }&#xD;&#xA;                ]&#xD;&#xA;            },&#xD;&#xA;            plugins: [new CheckerPlugin()]&#xD;&#xA;        };&#xD;&#xA;    &#xD;&#xA;        // Configuration for client-side bundle suitable for running in browsers&#xD;&#xA;        const clientBundleOutputDir = './wwwroot/dist';&#xD;&#xA;        const clientBundleConfig = merge(sharedConfig, {&#xD;&#xA;            entry: { 'main-client': './ClientApp/boot.browser.ts' },&#xD;&#xA;            output: { path: path.join(__dirname, clientBundleOutputDir) },&#xD;&#xA;            plugins: [&#xD;&#xA;                new webpack.DllReferencePlugin({&#xD;&#xA;                    context: __dirname,&#xD;&#xA;                    manifest: require('./wwwroot/dist/vendor-manifest.json')&#xD;&#xA;                })&#xD;&#xA;            ].concat(isDevBuild ? [&#xD;&#xA;                // Plugins that apply in development builds only&#xD;&#xA;                new webpack.SourceMapDevToolPlugin({&#xD;&#xA;                    filename: '[file].map', // Remove this line if you prefer inline source maps&#xD;&#xA;                    moduleFilenameTemplate: path.relative(clientBundleOutputDir, '[resourcePath]') // Point sourcemap entries to the original file locations on disk&#xD;&#xA;                })&#xD;&#xA;            ] : [&#xD;&#xA;                // Plugins that apply in production builds only&#xD;&#xA;                new webpack.optimize.UglifyJsPlugin(),&#xD;&#xA;                new AotPlugin({&#xD;&#xA;                    tsConfigPath: './tsconfig.json',&#xD;&#xA;                    entryModule: path.join(__dirname, 'ClientApp/app/app.module.browser#AppModule'),&#xD;&#xA;                    exclude: ['./**/*.server.ts']&#xD;&#xA;                })&#xD;&#xA;            ])&#xD;&#xA;        });&#xD;&#xA;    &#xD;&#xA;        // Configuration for server-side (prerendering) bundle suitable for running in Node&#xD;&#xA;        const serverBundleConfig = merge(sharedConfig, {&#xD;&#xA;            resolve: { mainFields: ['main'] },&#xD;&#xA;            entry: { 'main-server': './ClientApp/boot.server.ts' },&#xD;&#xA;            plugins: [&#xD;&#xA;                new webpack.DllReferencePlugin({&#xD;&#xA;                    context: __dirname,&#xD;&#xA;                    manifest: require('./ClientApp/dist/vendor-manifest.json'),&#xD;&#xA;                    sourceType: 'commonjs2',&#xD;&#xA;                    name: './vendor'&#xD;&#xA;                })&#xD;&#xA;            ].concat(isDevBuild ? [] : [&#xD;&#xA;                // Plugins that apply in production builds only&#xD;&#xA;                new AotPlugin({&#xD;&#xA;                    tsConfigPath: './tsconfig.json',&#xD;&#xA;                    entryModule: path.join(__dirname, 'ClientApp/app/app.module.server#AppModule'),&#xD;&#xA;                    exclude: ['./**/*.browser.ts']&#xD;&#xA;                })&#xD;&#xA;            ]),&#xD;&#xA;            output: {&#xD;&#xA;                libraryTarget: 'commonjs',&#xD;&#xA;                path: path.join(__dirname, './ClientApp/dist')&#xD;&#xA;            },&#xD;&#xA;            target: 'node',&#xD;&#xA;            devtool: 'inline-source-map'&#xD;&#xA;        });&#xD;&#xA;    &#xD;&#xA;        return [clientBundleConfig, serverBundleConfig];&#xD;&#xA;    };"
