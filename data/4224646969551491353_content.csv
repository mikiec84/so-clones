"Content"
"    public boolean onLayoutChild(CoordinatorLayout parent, V child, int layoutDirection) {&#xD;&#xA;        // First let the parent lay it out&#xD;&#xA;        if (mState != STATE_DRAGGING && mState != STATE_SETTLING) {&#xD;&#xA;            if (ViewCompat.getFitsSystemWindows(parent) &&&#xD;&#xA;                    !ViewCompat.getFitsSystemWindows(child)) {&#xD;&#xA;                ViewCompat.setFitsSystemWindows(child, true);&#xD;&#xA;            }&#xD;&#xA;            parent.onLayoutChild(child, layoutDirection);&#xD;&#xA;        }&#xD;&#xA;        // Offset the bottom sheet&#xD;&#xA;        mParentHeight = parent.getHeight();&#xD;&#xA;        mMinOffset = Math.max(0, mParentHeight - child.getHeight());&#xD;&#xA;        mMaxOffset = Math.max(mParentHeight - mPeekHeight, mMinOffset);&#xD;&#xA;        //if (mState == STATE_EXPANDED) {&#xD;&#xA;        //    ViewCompat.offsetTopAndBottom(child, mMinOffset);&#xD;&#xA;        //} else if (mHideable && mState == STATE_HIDDEN...&#xD;&#xA;        if (mState == STATE_ANCHOR_POINT) {&#xD;&#xA;            ViewCompat.offsetTopAndBottom(child, mAnchorPoint);&#xD;&#xA;        } else if (mState == STATE_EXPANDED) {&#xD;&#xA;            ViewCompat.offsetTopAndBottom(child, mMinOffset);&#xD;&#xA;        } else if (mHideable && mState == STATE_HIDDEN) {&#xD;&#xA;            ViewCompat.offsetTopAndBottom(child, mParentHeight);&#xD;&#xA;        } else if (mState == STATE_COLLAPSED) {&#xD;&#xA;            ViewCompat.offsetTopAndBottom(child, mMaxOffset);&#xD;&#xA;        }&#xD;&#xA;        if (mViewDragHelper == null) {&#xD;&#xA;            mViewDragHelper = ViewDragHelper.create(parent, mDragCallback);&#xD;&#xA;        }&#xD;&#xA;        mViewRef = new WeakReference<>(child);&#xD;&#xA;        mNestedScrollingChildRef = new WeakReference<>(findScrollingChild(child));&#xD;&#xA;        return true;&#xD;&#xA;    }&#xD;&#xA;    public void onStopNestedScroll(CoordinatorLayout coordinatorLayout, V child, View target) {&#xD;&#xA;        if (child.getTop() == mMinOffset) {&#xD;&#xA;            setStateInternal(STATE_EXPANDED);&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        if (target != mNestedScrollingChildRef.get() || !mNestedScrolled) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        int top;&#xD;&#xA;        int targetState;&#xD;&#xA;        if (mLastNestedScrollDy > 0) {&#xD;&#xA;            //top = mMinOffset;&#xD;&#xA;            //targetState = STATE_EXPANDED;&#xD;&#xA;            int currentTop = child.getTop();&#xD;&#xA;            if (currentTop > mAnchorPoint) {&#xD;&#xA;                top = mAnchorPoint;&#xD;&#xA;                targetState = STATE_ANCHOR_POINT;&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;                top = mMinOffset;&#xD;&#xA;                targetState = STATE_EXPANDED;&#xD;&#xA;            }&#xD;&#xA;        } else if (mHideable && shouldHide(child, getYVelocity())) {&#xD;&#xA;            top = mParentHeight;&#xD;&#xA;            targetState = STATE_HIDDEN;&#xD;&#xA;        } else if (mLastNestedScrollDy == 0) {&#xD;&#xA;            int currentTop = child.getTop();&#xD;&#xA;            if (Math.abs(currentTop - mMinOffset) < Math.abs(currentTop - mMaxOffset)) {&#xD;&#xA;                top = mMinOffset;&#xD;&#xA;                targetState = STATE_EXPANDED;&#xD;&#xA;            } else {&#xD;&#xA;                top = mMaxOffset;&#xD;&#xA;                targetState = STATE_COLLAPSED;&#xD;&#xA;            }&#xD;&#xA;        } else {&#xD;&#xA;            //top = mMaxOffset;&#xD;&#xA;            //targetState = STATE_COLLAPSED;&#xD;&#xA;            int currentTop = child.getTop();&#xD;&#xA;            if (currentTop > mAnchorPoint) {&#xD;&#xA;                top = mMaxOffset;&#xD;&#xA;                targetState = STATE_COLLAPSED;&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;                top = mAnchorPoint;&#xD;&#xA;                targetState = STATE_ANCHOR_POINT;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        if (mViewDragHelper.smoothSlideViewTo(child, child.getLeft(), top)) {&#xD;&#xA;            setStateInternal(STATE_SETTLING);&#xD;&#xA;            ViewCompat.postOnAnimation(child, new SettleRunnable(child, targetState));&#xD;&#xA;        } else {&#xD;&#xA;            setStateInternal(targetState);&#xD;&#xA;        }&#xD;&#xA;        mNestedScrolled = false;&#xD;&#xA;    }&#xD;&#xA;    public final void setState(@State int state) {&#xD;&#xA;        if (state == mState) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        if (mViewRef == null) {&#xD;&#xA;            // The view is not laid out yet; modify mState and let onLayoutChild handle it later&#xD;&#xA;            /**&#xD;&#xA;             * New behavior (added: state == STATE_ANCHOR_POINT ||)&#xD;&#xA;             */&#xD;&#xA;            if (state == STATE_COLLAPSED || state == STATE_EXPANDED ||&#xD;&#xA;                    state == STATE_ANCHOR_POINT ||&#xD;&#xA;                    (mHideable && state == STATE_HIDDEN)) {&#xD;&#xA;                mState = state;&#xD;&#xA;            }&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        V child = mViewRef.get();&#xD;&#xA;        if (child == null) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        int top;&#xD;&#xA;        if (state == STATE_COLLAPSED) {&#xD;&#xA;            top = mMaxOffset;&#xD;&#xA;        } else if (state == STATE_ANCHOR_POINT) {&#xD;&#xA;            top = mAnchorPoint;&#xD;&#xA;        } else if (state == STATE_EXPANDED) {&#xD;&#xA;            top = mMinOffset;&#xD;&#xA;        } else if (mHideable && state == STATE_HIDDEN) {&#xD;&#xA;            top = mParentHeight;&#xD;&#xA;        } else {&#xD;&#xA;            throw new IllegalArgumentException(""""Illegal state argument: """" + state);&#xD;&#xA;        }&#xD;&#xA;        setStateInternal(STATE_SETTLING);&#xD;&#xA;        if (mViewDragHelper.smoothSlideViewTo(child, child.getLeft(), top)) {&#xD;&#xA;            ViewCompat.postOnAnimation(child, new SettleRunnable(child, state));&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    public static <V extends View> BottomSheetBehaviorGoogleMapsLike<V> from(V view) {&#xD;&#xA;        ViewGroup.LayoutParams params = view.getLayoutParams();&#xD;&#xA;        if (!(params instanceof CoordinatorLayout.LayoutParams)) {&#xD;&#xA;            throw new IllegalArgumentException(""""The view is not a child of CoordinatorLayout"""");&#xD;&#xA;        }&#xD;&#xA;        CoordinatorLayout.Behavior behavior = ((CoordinatorLayout.LayoutParams) params)&#xD;&#xA;                .getBehavior();&#xD;&#xA;        if (!(behavior instanceof BottomSheetBehaviorGoogleMapsLike)) {&#xD;&#xA;            throw new IllegalArgumentException(&#xD;&#xA;                    """"The view is not associated with BottomSheetBehaviorGoogleMapsLike"""");&#xD;&#xA;        }&#xD;&#xA;        return (BottomSheetBehaviorGoogleMapsLike<V>) behavior;&#xD;&#xA;    }"
