"Content"
"    public static class EnumHelper  &#xD;&#xA;    {  &#xD;&#xA;        //Creates a SelectList for a nullable enum value  &#xD;&#xA;        public static SelectList SelectListFor<T>(T? selected)  &#xD;&#xA;            where T : struct  &#xD;&#xA;        {  &#xD;&#xA;            return selected == null ? SelectListFor<T>()  &#xD;&#xA;                                    : SelectListFor(selected.Value);  &#xD;&#xA;        }  &#xD;&#xA;      &#xD;&#xA;        //Creates a SelectList for an enum type  &#xD;&#xA;        public static SelectList SelectListFor<T>() where T : struct  &#xD;&#xA;        {  &#xD;&#xA;            Type t = typeof (T);  &#xD;&#xA;            if (t.IsEnum)  &#xD;&#xA;            {  &#xD;&#xA;                var values = Enum.GetValues(typeof(T)).Cast<enum>()  &#xD;&#xA;                                 .Select(e => new { Id = Convert.ToInt32(e), Name = e.GetDescription() });  &#xD;&#xA;      &#xD;&#xA;                return new SelectList(values, """"Id"""", """"Name"""");  &#xD;&#xA;            }  &#xD;&#xA;            return null;  &#xD;&#xA;        }  &#xD;&#xA;      &#xD;&#xA;        //Creates a SelectList for an enum value  &#xD;&#xA;        public static SelectList SelectListFor<T>(T selected) where T : struct   &#xD;&#xA;        {  &#xD;&#xA;            Type t = typeof(T);  &#xD;&#xA;            if (t.IsEnum)  &#xD;&#xA;            {  &#xD;&#xA;                var values = Enum.GetValues(t).Cast<Enum>()  &#xD;&#xA;                                 .Select(e => new { Id = Convert.ToInt32(e), Name = e.GetDescription() });  &#xD;&#xA;      &#xD;&#xA;                return new SelectList(values, """"Id"""", """"Name"""", Convert.ToInt32(selected));  &#xD;&#xA;            }  &#xD;&#xA;            return null;  &#xD;&#xA;        }   &#xD;&#xA;      &#xD;&#xA;        // Get the value of the description attribute if the   &#xD;&#xA;        // enum has one, otherwise use the value.  &#xD;&#xA;        public static string GetDescription<TEnum>(this TEnum value)  &#xD;&#xA;        {  &#xD;&#xA;            FieldInfo fi = value.GetType().GetField(value.ToString());  &#xD;&#xA;      &#xD;&#xA;            if (fi != null)  &#xD;&#xA;            {  &#xD;&#xA;                DescriptionAttribute[] attributes =  &#xD;&#xA;                 (DescriptionAttribute[])fi.GetCustomAttributes(  &#xD;&#xA;        typeof(DescriptionAttribute),  &#xD;&#xA;        false);  &#xD;&#xA;      &#xD;&#xA;                if (attributes.Length > 0)  &#xD;&#xA;                {  &#xD;&#xA;                     return attributes[0].Description;  &#xD;&#xA;                }  &#xD;&#xA;            }  &#xD;&#xA;      &#xD;&#xA;            return value.ToString();  &#xD;&#xA;        }  &#xD;&#xA;    }  "
