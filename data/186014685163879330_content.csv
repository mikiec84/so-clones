"Content"
"    public class MyBluetoothService {&#xD;&#xA;        private static final String TAG = """"MY_APP_DEBUG_TAG"""";&#xD;&#xA;        private Handler mHandler; // handler that gets info from Bluetooth service&#xD;&#xA;        // Defines several constants used when transmitting messages between the&#xD;&#xA;        // service and the UI.&#xD;&#xA;        private interface MessageConstants {&#xD;&#xA;            public static final int MESSAGE_READ = 0;&#xD;&#xA;            public static final int MESSAGE_WRITE = 1;&#xD;&#xA;            public static final int MESSAGE_TOAST = 2;&#xD;&#xA;            // ... (Add other message types here as needed.)&#xD;&#xA;        }&#xD;&#xA;        private class ConnectedThread extends Thread {&#xD;&#xA;            private final BluetoothSocket mmSocket;&#xD;&#xA;            private final InputStream mmInStream;&#xD;&#xA;            private final OutputStream mmOutStream;&#xD;&#xA;            private byte[] mmBuffer; // mmBuffer store for the stream&#xD;&#xA;            public ConnectedThread(BluetoothSocket socket) {&#xD;&#xA;                mmSocket = socket;&#xD;&#xA;                InputStream tmpIn = null;&#xD;&#xA;                OutputStream tmpOut = null;&#xD;&#xA;                // Get the input and output streams; using temp objects because&#xD;&#xA;                // member streams are final.&#xD;&#xA;                try {&#xD;&#xA;                    tmpIn = socket.getInputStream();&#xD;&#xA;                } catch (IOException e) {&#xD;&#xA;                    Log.e(TAG, """"Error occurred when creating input stream"""", e);&#xD;&#xA;                }&#xD;&#xA;                try {&#xD;&#xA;                    tmpOut = socket.getOutputStream();&#xD;&#xA;                } catch (IOException e) {&#xD;&#xA;                    Log.e(TAG, """"Error occurred when creating output stream"""", e);&#xD;&#xA;                }&#xD;&#xA;                mmInStream = tmpIn;&#xD;&#xA;                mmOutStream = tmpOut;&#xD;&#xA;            }&#xD;&#xA;            public void run() {&#xD;&#xA;                mmBuffer = new byte[1024];&#xD;&#xA;                int numBytes; // bytes returned from read()&#xD;&#xA;                // Keep listening to the InputStream until an exception occurs.&#xD;&#xA;                while (true) {&#xD;&#xA;                    try {&#xD;&#xA;                        // Read from the InputStream.&#xD;&#xA;                        numBytes = mmInStream.read(mmBuffer);&#xD;&#xA;                        // Send the obtained bytes to the UI activity.&#xD;&#xA;                        Message readMsg = mHandler.obtainMessage(&#xD;&#xA;                                MessageConstants.MESSAGE_READ, numBytes, -1,&#xD;&#xA;                                mmBuffer);&#xD;&#xA;                        readMsg.sendToTarget();&#xD;&#xA;                    } catch (IOException e) {&#xD;&#xA;                        Log.d(TAG, """"Input stream was disconnected"""", e);&#xD;&#xA;                        break;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            // Call this from the main activity to send data to the remote device.&#xD;&#xA;            public void write(byte[] bytes) {&#xD;&#xA;                try {&#xD;&#xA;                    mmOutStream.write(bytes);&#xD;&#xA;                    // Share the sent message with the UI activity.&#xD;&#xA;                    Message writtenMsg = mHandler.obtainMessage(&#xD;&#xA;                            MessageConstants.MESSAGE_WRITE, -1, -1, mmBuffer);&#xD;&#xA;                    writtenMsg.sendToTarget();&#xD;&#xA;                } catch (IOException e) {&#xD;&#xA;                    Log.e(TAG, """"Error occurred when sending data"""", e);&#xD;&#xA;                    // Send a failure message back to the activity.&#xD;&#xA;                    Message writeErrorMsg =&#xD;&#xA;                            mHandler.obtainMessage(MessageConstants.MESSAGE_TOAST);&#xD;&#xA;                    Bundle bundle = new Bundle();&#xD;&#xA;                    bundle.putString(""""toast"""",&#xD;&#xA;                            """"Couldn't send data to the other device"""");&#xD;&#xA;                    writeErrorMsg.setData(bundle);&#xD;&#xA;                    mHandler.sendMessage(writeErrorMsg);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            // Call this method from the main activity to shut down the connection.&#xD;&#xA;            public void cancel() {&#xD;&#xA;                try {&#xD;&#xA;                    mmSocket.close();&#xD;&#xA;                } catch (IOException e) {&#xD;&#xA;                    Log.e(TAG, """"Could not close the connect socket"""", e);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }"
