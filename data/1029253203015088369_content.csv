"Content"
"        public static class HtmlPrefixScopeExtensions&#xD;&#xA;    {&#xD;&#xA;        private const string idsToReuseKey = """"__htmlPrefixScopeExtensions_IdsToReuse_"""";&#xD;&#xA;        public static IDisposable BeginCollectionItem(this HtmlHelper html, string collectionName)&#xD;&#xA;        {&#xD;&#xA;            var idsToReuse = GetIdsToReuse(html.ViewContext.HttpContext, collectionName);&#xD;&#xA;            string itemIndex = idsToReuse.Count > 0 ? idsToReuse.Dequeue() : Guid.NewGuid().ToString();&#xD;&#xA;            // autocomplete=""""off"""" is needed to work around a very annoying Chrome behaviour whereby it reuses old values after the user clicks """"Back"""", which causes the xyz.index and xyz[...] values to get out of sync.&#xD;&#xA;            html.ViewContext.Writer.WriteLine(string.Format(""""<input type=\""""hidden\"""" name=\""""{0}.index\"""" autocomplete=\""""off\"""" value=\""""{1}\"""" />"""", collectionName, html.Encode(itemIndex)));&#xD;&#xA;            return BeginHtmlFieldPrefixScope(html, string.Format(""""{0}[{1}]"""", collectionName, itemIndex));&#xD;&#xA;        }&#xD;&#xA;        public static IDisposable BeginHtmlFieldPrefixScope(this HtmlHelper html, string htmlFieldPrefix)&#xD;&#xA;        {&#xD;&#xA;            return new HtmlFieldPrefixScope(html.ViewData.TemplateInfo, htmlFieldPrefix);&#xD;&#xA;        }&#xD;&#xA;        private static Queue<string> GetIdsToReuse(HttpContextBase httpContext, string collectionName)&#xD;&#xA;        {&#xD;&#xA;            // We need to use the same sequence of IDs following a server-side validation failure,  &#xD;&#xA;            // otherwise the framework won't render the validation error messages next to each item.&#xD;&#xA;            string key = idsToReuseKey + collectionName;&#xD;&#xA;            var queue = (Queue<string>)httpContext.Items[key];&#xD;&#xA;            if (queue == null) {&#xD;&#xA;                httpContext.Items[key] = queue = new Queue<string>();&#xD;&#xA;                var previouslyUsedIds = httpContext.Request[collectionName + """".index""""];&#xD;&#xA;                if (!string.IsNullOrEmpty(previouslyUsedIds))&#xD;&#xA;                    foreach (string previouslyUsedId in previouslyUsedIds.Split(','))&#xD;&#xA;                        queue.Enqueue(previouslyUsedId);&#xD;&#xA;            }&#xD;&#xA;            return queue;&#xD;&#xA;        }&#xD;&#xA;        private class HtmlFieldPrefixScope : IDisposable&#xD;&#xA;        {&#xD;&#xA;            private readonly TemplateInfo templateInfo;&#xD;&#xA;            private readonly string previousHtmlFieldPrefix;&#xD;&#xA;            public HtmlFieldPrefixScope(TemplateInfo templateInfo, string htmlFieldPrefix)&#xD;&#xA;            {&#xD;&#xA;                this.templateInfo = templateInfo;&#xD;&#xA;                previousHtmlFieldPrefix = templateInfo.HtmlFieldPrefix;&#xD;&#xA;                templateInfo.HtmlFieldPrefix = htmlFieldPrefix;&#xD;&#xA;            }&#xD;&#xA;            public void Dispose()&#xD;&#xA;            {&#xD;&#xA;                templateInfo.HtmlFieldPrefix = previousHtmlFieldPrefix;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }"
