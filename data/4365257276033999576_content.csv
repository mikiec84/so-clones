"Content"
"    <?php&#xD;&#xA;    &#xD;&#xA;    class DB_Functions {&#xD;&#xA;    &#xD;&#xA;        private $db;&#xD;&#xA;    &#xD;&#xA;        //put your code here&#xD;&#xA;        // constructor&#xD;&#xA;        function __construct() {&#xD;&#xA;            require_once 'DB_Connect.php';&#xD;&#xA;            // connecting to database&#xD;&#xA;            $this->db = new DB_Connect();&#xD;&#xA;            $this->db->connect();&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        // destructor&#xD;&#xA;        function __destruct() {&#xD;&#xA;            &#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        /**&#xD;&#xA;         * Storing new user&#xD;&#xA;         * returns user details&#xD;&#xA;         */&#xD;&#xA;        public function storeUser($name, $email, $password) {&#xD;&#xA;            $uuid = uniqid('', true);&#xD;&#xA;            $hash = $this->hashSSHA($password);&#xD;&#xA;            $encrypted_password = $hash[""""encrypted""""]; // encrypted password&#xD;&#xA;            $salt = $hash[""""salt""""]; // salt&#xD;&#xA;            $result = mysql_query(""""INSERT INTO users(unique_id, name, email, encrypted_password, salt, created_at) VALUES('$uuid', '$name', '$email', '$encrypted_password', '$salt', NOW())"""");&#xD;&#xA;            // check for successful store&#xD;&#xA;            if ($result) {&#xD;&#xA;                // get user details &#xD;&#xA;                $uid = mysql_insert_id(); // last inserted id&#xD;&#xA;                $result = mysql_query(""""SELECT * FROM users WHERE uid = $uid"""");&#xD;&#xA;                // return user details&#xD;&#xA;                return mysql_fetch_array($result);&#xD;&#xA;            } else {&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        /**&#xD;&#xA;         * Get user by email and password&#xD;&#xA;         */&#xD;&#xA;        public function getUserByEmailAndPassword($email, $password) {&#xD;&#xA;            $result = mysql_query(""""SELECT * FROM users WHERE email = '$email'"""") or die(mysql_error());&#xD;&#xA;            // check for result &#xD;&#xA;            $no_of_rows = mysql_num_rows($result);&#xD;&#xA;            if ($no_of_rows > 0) {&#xD;&#xA;                $result = mysql_fetch_array($result);&#xD;&#xA;                $salt = $result['salt'];&#xD;&#xA;                $encrypted_password = $result['encrypted_password'];&#xD;&#xA;                $hash = $this->checkhashSSHA($salt, $password);&#xD;&#xA;                // check for password equality&#xD;&#xA;                if ($encrypted_password == $hash) {&#xD;&#xA;                    // user authentication details are correct&#xD;&#xA;                    return $result;&#xD;&#xA;                }&#xD;&#xA;            } else {&#xD;&#xA;                // user not found&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        /**&#xD;&#xA;         * Check user is existed or not&#xD;&#xA;         */&#xD;&#xA;        public function isUserExisted($email) {&#xD;&#xA;            $result = mysql_query(""""SELECT email from users WHERE email = '$email'"""");&#xD;&#xA;            $no_of_rows = mysql_num_rows($result);&#xD;&#xA;            if ($no_of_rows > 0) {&#xD;&#xA;                // user existed &#xD;&#xA;                return true;&#xD;&#xA;            } else {&#xD;&#xA;                // user not existed&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        /**&#xD;&#xA;         * Encrypting password&#xD;&#xA;         * @param password&#xD;&#xA;         * returns salt and encrypted password&#xD;&#xA;         */&#xD;&#xA;        public function hashSSHA($password) {&#xD;&#xA;    &#xD;&#xA;            $salt = sha1(rand());&#xD;&#xA;            $salt = substr($salt, 0, 10);&#xD;&#xA;            $encrypted = base64_encode(sha1($password . $salt, true) . $salt);&#xD;&#xA;            $hash = array(""""salt"""" => $salt, """"encrypted"""" => $encrypted);&#xD;&#xA;            return $hash;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        /**&#xD;&#xA;         * Decrypting password&#xD;&#xA;         * @param salt, password&#xD;&#xA;         * returns hash string&#xD;&#xA;         */&#xD;&#xA;        public function checkhashSSHA($salt, $password) {&#xD;&#xA;    &#xD;&#xA;            $hash = base64_encode(sha1($password . $salt, true) . $salt);&#xD;&#xA;    &#xD;&#xA;            return $hash;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    ?>"
