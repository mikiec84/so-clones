"Content"
"                    public class ColorPickerDialog extends Dialog {&#xD;&#xA;                     public interface OnColorChangedListener {&#xD;&#xA;                      void colorChanged(int color);&#xD;&#xA;                      }&#xD;&#xA;                         private OnColorChangedListener mListener;&#xD;&#xA;                            private int mInitialColor;&#xD;&#xA;                        private static class ColorPickerView extends View {&#xD;&#xA;                        private Paint mPaint;&#xD;&#xA;                        private Paint mCenterPaint;&#xD;&#xA;                       private final int[] mColors;&#xD;&#xA;                       private OnColorChangedListener mListener;&#xD;&#xA;    ColorPickerView(Context c, OnColorChangedListener l, int color) {&#xD;&#xA;        super(c);&#xD;&#xA;        mListener = l;&#xD;&#xA;        mColors = new int[] {&#xD;&#xA;            0xFFFF0000, 0xFFFF00FF, 0xFF0000FF, 0xFF00FFFF, 0xFF00FF00,&#xD;&#xA;            0xFFFFFF00, 0xFFFF0000&#xD;&#xA;        };&#xD;&#xA;        Shader s = new SweepGradient(0, 0, mColors, null);&#xD;&#xA;        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);&#xD;&#xA;        mPaint.setShader(s);&#xD;&#xA;        mPaint.setStyle(Paint.Style.STROKE);&#xD;&#xA;        mPaint.setStrokeWidth(32);&#xD;&#xA;        mCenterPaint = new Paint(Paint.ANTI_ALIAS_FLAG);&#xD;&#xA;        mCenterPaint.setColor(color);&#xD;&#xA;        mCenterPaint.setStrokeWidth(5);&#xD;&#xA;    }&#xD;&#xA;    private boolean mTrackingCenter;&#xD;&#xA;    private boolean mHighlightCenter;&#xD;&#xA;    @Override&#xD;&#xA;    protected void onDraw(Canvas canvas) {&#xD;&#xA;        float r = CENTER_X - mPaint.getStrokeWidth()*0.5f;&#xD;&#xA;        canvas.translate(CENTER_X, CENTER_X);&#xD;&#xA;        canvas.drawOval(new RectF(-r, -r, r, r), mPaint);&#xD;&#xA;        canvas.drawCircle(0, 0, CENTER_RADIUS, mCenterPaint);&#xD;&#xA;        if (mTrackingCenter) {&#xD;&#xA;            int c = mCenterPaint.getColor();&#xD;&#xA;            mCenterPaint.setStyle(Paint.Style.STROKE);&#xD;&#xA;            if (mHighlightCenter) {&#xD;&#xA;                mCenterPaint.setAlpha(0xFF);&#xD;&#xA;            } else {&#xD;&#xA;                mCenterPaint.setAlpha(0x80);&#xD;&#xA;            }&#xD;&#xA;            canvas.drawCircle(0, 0,&#xD;&#xA;                              CENTER_RADIUS + mCenterPaint.getStrokeWidth(),&#xD;&#xA;                              mCenterPaint);&#xD;&#xA;            mCenterPaint.setStyle(Paint.Style.FILL);&#xD;&#xA;            mCenterPaint.setColor(c);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    @Override&#xD;&#xA;    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {&#xD;&#xA;        setMeasuredDimension(CENTER_X*2, CENTER_Y*2);&#xD;&#xA;    }&#xD;&#xA;    private static final int CENTER_X = 100;&#xD;&#xA;    private static final int CENTER_Y = 100;&#xD;&#xA;    private static final int CENTER_RADIUS = 32;&#xD;&#xA;    private int floatToByte(float x) {&#xD;&#xA;        int n = java.lang.Math.round(x);&#xD;&#xA;        return n;&#xD;&#xA;    }&#xD;&#xA;    private int pinToByte(int n) {&#xD;&#xA;        if (n < 0) {&#xD;&#xA;            n = 0;&#xD;&#xA;        } else if (n > 255) {&#xD;&#xA;            n = 255;&#xD;&#xA;        }&#xD;&#xA;        return n;&#xD;&#xA;    }&#xD;&#xA;    private int ave(int s, int d, float p) {&#xD;&#xA;        return s + java.lang.Math.round(p * (d - s));&#xD;&#xA;    }&#xD;&#xA;    private int interpColor(int colors[], float unit) {&#xD;&#xA;        if (unit <= 0) {&#xD;&#xA;            return colors[0];&#xD;&#xA;        }&#xD;&#xA;        if (unit >= 1) {&#xD;&#xA;            return colors[colors.length - 1];&#xD;&#xA;        }&#xD;&#xA;        float p = unit * (colors.length - 1);&#xD;&#xA;        int i = (int)p;&#xD;&#xA;        p -= i;&#xD;&#xA;        // now p is just the fractional part [0...1) and i is the index&#xD;&#xA;        int c0 = colors[i];&#xD;&#xA;        int c1 = colors[i+1];&#xD;&#xA;        int a = ave(Color.alpha(c0), Color.alpha(c1), p);&#xD;&#xA;        int r = ave(Color.red(c0), Color.red(c1), p);&#xD;&#xA;        int g = ave(Color.green(c0), Color.green(c1), p);&#xD;&#xA;        int b = ave(Color.blue(c0), Color.blue(c1), p);&#xD;&#xA;        return Color.argb(a, r, g, b);&#xD;&#xA;    }&#xD;&#xA;    private int rotateColor(int color, float rad) {&#xD;&#xA;        float deg = rad * 180 / 3.1415927f;&#xD;&#xA;        int r = Color.red(color);&#xD;&#xA;        int g = Color.green(color);&#xD;&#xA;        int b = Color.blue(color);&#xD;&#xA;        ColorMatrix cm = new ColorMatrix();&#xD;&#xA;        ColorMatrix tmp = new ColorMatrix();&#xD;&#xA;        cm.setRGB2YUV();&#xD;&#xA;        tmp.setRotate(0, deg);&#xD;&#xA;        cm.postConcat(tmp);&#xD;&#xA;        tmp.setYUV2RGB();&#xD;&#xA;        cm.postConcat(tmp);&#xD;&#xA;        final float[] a = cm.getArray();&#xD;&#xA;        int ir = floatToByte(a[0] * r +  a[1] * g +  a[2] * b);&#xD;&#xA;        int ig = floatToByte(a[5] * r +  a[6] * g +  a[7] * b);&#xD;&#xA;        int ib = floatToByte(a[10] * r + a[11] * g + a[12] * b);&#xD;&#xA;        return Color.argb(Color.alpha(color), pinToByte(ir),&#xD;&#xA;                          pinToByte(ig), pinToByte(ib));&#xD;&#xA;    }&#xD;&#xA;    private static final float PI = 3.1415926f;&#xD;&#xA;    @Override&#xD;&#xA;    public boolean onTouchEvent(MotionEvent event) {&#xD;&#xA;        float x = event.getX() - CENTER_X;&#xD;&#xA;        float y = event.getY() - CENTER_Y;&#xD;&#xA;        boolean inCenter = java.lang.Math.sqrt(x*x + y*y) <= CENTER_RADIUS;&#xD;&#xA;        switch (event.getAction()) {&#xD;&#xA;            case MotionEvent.ACTION_DOWN:&#xD;&#xA;                mTrackingCenter = inCenter;&#xD;&#xA;                if (inCenter) {&#xD;&#xA;                    mHighlightCenter = true;&#xD;&#xA;                    invalidate();&#xD;&#xA;                    break;&#xD;&#xA;                }&#xD;&#xA;            case MotionEvent.ACTION_MOVE:&#xD;&#xA;                if (mTrackingCenter) {&#xD;&#xA;                    if (mHighlightCenter != inCenter) {&#xD;&#xA;                        mHighlightCenter = inCenter;&#xD;&#xA;                        invalidate();&#xD;&#xA;                    }&#xD;&#xA;                } else {&#xD;&#xA;                    float angle = (float)java.lang.Math.atan2(y, x);&#xD;&#xA;                    // need to turn angle [-PI ... PI] into unit [0....1]&#xD;&#xA;                    float unit = angle/(2*PI);&#xD;&#xA;                    if (unit < 0) {&#xD;&#xA;                        unit += 1;&#xD;&#xA;                    }&#xD;&#xA;                    mCenterPaint.setColor(interpColor(mColors, unit));&#xD;&#xA;                    invalidate();&#xD;&#xA;                }&#xD;&#xA;                break;&#xD;&#xA;            case MotionEvent.ACTION_UP:&#xD;&#xA;                if (mTrackingCenter) {&#xD;&#xA;                    if (inCenter) {&#xD;&#xA;                        mListener.colorChanged(mCenterPaint.getColor());&#xD;&#xA;                    }&#xD;&#xA;                    mTrackingCenter = false;    // so we draw w/o halo&#xD;&#xA;                    invalidate();&#xD;&#xA;                }&#xD;&#xA;                break;&#xD;&#xA;        }&#xD;&#xA;        return true;&#xD;&#xA;       }&#xD;&#xA;      }&#xD;&#xA;                 public ColorPickerDialog(Context context,&#xD;&#xA;                         OnColorChangedListener listener,&#xD;&#xA;                         int initialColor) {&#xD;&#xA;                         super(context);&#xD;&#xA;                         mListener = listener;&#xD;&#xA;                         mInitialColor = initialColor;&#xD;&#xA;                     }&#xD;&#xA;                         @Override&#xD;&#xA;                        protected void onCreate(Bundle savedInstanceState) {&#xD;&#xA;                        super.onCreate(savedInstanceState);&#xD;&#xA;                        OnColorChangedListener l = new OnColorChangedListener() {&#xD;&#xA;                        public void colorChanged(int color) {&#xD;&#xA;                         mListener.colorChanged(color);&#xD;&#xA;                         dismiss();&#xD;&#xA;           }&#xD;&#xA;         };&#xD;&#xA;           setContentView(new ColorPickerView(getContext(), l, mInitialColor));&#xD;&#xA;           setTitle(""""Pick a Color"""");&#xD;&#xA;          }&#xD;&#xA;         }"
