"Content"
"    try {&#xD;&#xA;    &#xD;&#xA;    	// Find out how many items are in the table&#xD;&#xA;    	$total = $dbh->query('&#xD;&#xA;    		SELECT&#xD;&#xA;    			COUNT(*)&#xD;&#xA;    		FROM&#xD;&#xA;    			table&#xD;&#xA;    	')->fetchColumn();&#xD;&#xA;    &#xD;&#xA;    	// How many items to list per page&#xD;&#xA;    	$limit = 20;&#xD;&#xA;    &#xD;&#xA;    	// How many pages will there be&#xD;&#xA;    	$pages = ceil($total / $limit);&#xD;&#xA;    &#xD;&#xA;    	// What page are we currently on?&#xD;&#xA;    	$page = min($pages, filter_input(INPUT_GET, 'page', FILTER_VALIDATE_INT, array(&#xD;&#xA;    		'options' => array(&#xD;&#xA;    			'default'   => 1,&#xD;&#xA;    			'min_range' => 1,&#xD;&#xA;    		),&#xD;&#xA;    	)));&#xD;&#xA;    &#xD;&#xA;    	// Calculate the offset for the query&#xD;&#xA;    	$offset = ($page - 1)  * $limit;&#xD;&#xA;    &#xD;&#xA;    	// Some information to display to the user&#xD;&#xA;    	$start = $offset + 1;&#xD;&#xA;    	$end = min(($offset + $limit), $total);&#xD;&#xA;    &#xD;&#xA;    	// The """"back"""" link&#xD;&#xA;    	$prevlink = ($page > 1) ? '<a href=""""?page=1"""" title=""""First page"""">&laquo;</a> <a href=""""?page=' . ($page - 1) . '"""" title=""""Previous page"""">&lsaquo;</a>' : '<span class=""""disabled"""">&laquo;</span> <span class=""""disabled"""">&lsaquo;</span>';&#xD;&#xA;    &#xD;&#xA;    	// The """"forward"""" link&#xD;&#xA;    	$nextlink = ($page < $pages) ? '<a href=""""?page=' . ($page + 1) . '"""" title=""""Next page"""">&rsaquo;</a> <a href=""""?page=' . $pages . '"""" title=""""Last page"""">&raquo;</a>' : '<span class=""""disabled"""">&rsaquo;</span> <span class=""""disabled"""">&raquo;</span>';&#xD;&#xA;    &#xD;&#xA;    	// Display the paging information&#xD;&#xA;    	echo '<div id=""""paging""""><p>', $prevlink, ' Page ', $page, ' of ', $pages, ' pages, displaying ', $start, '-', $end, ' of ', $total, ' results ', $nextlink, ' </p></div>';&#xD;&#xA;    &#xD;&#xA;    	// Prepare the paged query&#xD;&#xA;    	$stmt = $dbh->prepare('&#xD;&#xA;    		SELECT&#xD;&#xA;    			*&#xD;&#xA;    		FROM&#xD;&#xA;    			table&#xD;&#xA;    		ORDER BY&#xD;&#xA;    			name&#xD;&#xA;    		LIMIT&#xD;&#xA;    			:limit&#xD;&#xA;    		OFFSET&#xD;&#xA;    			:offset&#xD;&#xA;    	');&#xD;&#xA;    &#xD;&#xA;    	// Bind the query params&#xD;&#xA;    	$stmt->bindParam(':limit', $limit, PDO::PARAM_INT);&#xD;&#xA;    	$stmt->bindParam(':offset', $offset, PDO::PARAM_INT);&#xD;&#xA;    	$stmt->execute();&#xD;&#xA;    &#xD;&#xA;    	// Do we have any results?&#xD;&#xA;    	if ($stmt->rowCount() > 0) {&#xD;&#xA;    		// Define how we want to fetch the results&#xD;&#xA;    		$stmt->setFetchMode(PDO::FETCH_ASSOC);&#xD;&#xA;    		$iterator = new IteratorIterator($stmt);&#xD;&#xA;    &#xD;&#xA;    		// Display the results&#xD;&#xA;    		foreach ($iterator as $row) {&#xD;&#xA;    			echo '<p>', $row['name'], '</p>';&#xD;&#xA;    		}&#xD;&#xA;    &#xD;&#xA;    	} else {&#xD;&#xA;    		echo '<p>No results could be displayed.</p>';&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    } catch (Exception $e) {&#xD;&#xA;    	echo '<p>', $e->getMessage(), '</p>';&#xD;&#xA;    }"
