"Content"
"    #!/usr/bin/perl&#xD;&#xA;    &#xD;&#xA;    use strict;&#xD;&#xA;    use warnings;&#xD;&#xA;    &#xD;&#xA;    use threads;&#xD;&#xA;    &#xD;&#xA;    use Thread::Queue;&#xD;&#xA;    &#xD;&#xA;    my $nthreads = 5;&#xD;&#xA;    &#xD;&#xA;    my $process_q = Thread::Queue->new();&#xD;&#xA;    my $failed_q  = Thread::Queue->new();&#xD;&#xA;    &#xD;&#xA;    #this is a subroutine, but that runs 'as a thread'.&#xD;&#xA;    #when it starts, it inherits the program state 'as is'. E.g.&#xD;&#xA;    #the variable declarations above all apply - but changes to&#xD;&#xA;    #values within the program are 'thread local' unless the&#xD;&#xA;    #variable is defined as 'shared'.&#xD;&#xA;    #Behind the scenes - Thread::Queue are 'shared' arrays.&#xD;&#xA;    &#xD;&#xA;    sub worker {&#xD;&#xA;        #NB - this will sit a loop indefinitely, until you close the queue.&#xD;&#xA;        #using $process_q -> end&#xD;&#xA;        #we do this once we've queued all the things we want to process&#xD;&#xA;        #and the sub completes and exits neatly.&#xD;&#xA;        #however if you _don't_ end it, this will sit waiting forever.&#xD;&#xA;        while ( my $server = $process_q->dequeue() ) {&#xD;&#xA;            chomp($server);&#xD;&#xA;            print threads->self()->tid() . """": pinging $server\n"""";&#xD;&#xA;            my $result = `/bin/ping -c 1 $server`;&#xD;&#xA;            if ($?) { $failed_q->enqueue($server) }&#xD;&#xA;            print $result;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    #insert tasks into thread queue.&#xD;&#xA;    open( my $input_fh, """"<"""", """"server_list"""" ) or die $!;&#xD;&#xA;    $process_q->enqueue(<$input_fh>);&#xD;&#xA;    close($input_fh);&#xD;&#xA;    &#xD;&#xA;    #we 'end' process_q  - when we do, no more items may be inserted,&#xD;&#xA;    #and 'dequeue' returns 'undefined' when the queue is emptied.&#xD;&#xA;    #this means our worker threads (in their 'while' loop) will then exit.&#xD;&#xA;    $process_q->end();&#xD;&#xA;    &#xD;&#xA;    #start some threads&#xD;&#xA;    for ( 1 .. $nthreads ) {&#xD;&#xA;        threads->create( \&worker );&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    #Wait for threads to all finish processing.&#xD;&#xA;    foreach my $thr ( threads->list() ) {&#xD;&#xA;        $thr->join();&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    #collate results. ('synchronise' operation)&#xD;&#xA;    while ( my $server = $failed_q->dequeue_nb() ) {&#xD;&#xA;        print """"$server failed to ping\n"""";&#xD;&#xA;    }"
