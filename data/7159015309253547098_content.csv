"Content"
"    - (UIImage *) fixrotation:(UIImage *)image {&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    if (image.imageOrientation == UIImageOrientationUp) return image;&#xD;&#xA;    CGAffineTransform transform = CGAffineTransformIdentity;&#xD;&#xA;    &#xD;&#xA;    switch (image.imageOrientation) {&#xD;&#xA;        case UIImageOrientationDown:&#xD;&#xA;        case UIImageOrientationDownMirrored:&#xD;&#xA;            transform = CGAffineTransformTranslate(transform, image.size.width, image.size.height);&#xD;&#xA;            transform = CGAffineTransformRotate(transform, M_PI);&#xD;&#xA;            break;&#xD;&#xA;            &#xD;&#xA;        case UIImageOrientationLeft:&#xD;&#xA;        case UIImageOrientationLeftMirrored:&#xD;&#xA;            transform = CGAffineTransformTranslate(transform, image.size.width, 0);&#xD;&#xA;            transform = CGAffineTransformRotate(transform, M_PI_2);&#xD;&#xA;            break;&#xD;&#xA;            &#xD;&#xA;        case UIImageOrientationRight:&#xD;&#xA;        case UIImageOrientationRightMirrored:&#xD;&#xA;            transform = CGAffineTransformTranslate(transform, 0, image.size.height);&#xD;&#xA;            transform = CGAffineTransformRotate(transform, -M_PI_2);&#xD;&#xA;            break;&#xD;&#xA;        case UIImageOrientationUp:&#xD;&#xA;        case UIImageOrientationUpMirrored:&#xD;&#xA;            break;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    switch (image.imageOrientation) {&#xD;&#xA;        case UIImageOrientationUpMirrored:&#xD;&#xA;        case UIImageOrientationDownMirrored:&#xD;&#xA;            transform = CGAffineTransformTranslate(transform, image.size.width, 0);&#xD;&#xA;            transform = CGAffineTransformScale(transform, -1, 1);&#xD;&#xA;            break;&#xD;&#xA;            &#xD;&#xA;        case UIImageOrientationLeftMirrored:&#xD;&#xA;        case UIImageOrientationRightMirrored:&#xD;&#xA;            transform = CGAffineTransformTranslate(transform, image.size.height, 0);&#xD;&#xA;            transform = CGAffineTransformScale(transform, -1, 1);&#xD;&#xA;            break;&#xD;&#xA;        case UIImageOrientationUp:&#xD;&#xA;        case UIImageOrientationDown:&#xD;&#xA;        case UIImageOrientationLeft:&#xD;&#xA;        case UIImageOrientationRight:&#xD;&#xA;            break;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    // Now we draw the underlying CGImage into a new context, applying the transform&#xD;&#xA;    // calculated above.&#xD;&#xA;    CGContextRef ctx = CGBitmapContextCreate(NULL, image.size.width, image.size.height,&#xD;&#xA;                                             CGImageGetBitsPerComponent(image.CGImage), 0,&#xD;&#xA;                                             CGImageGetColorSpace(image.CGImage),&#xD;&#xA;                                             CGImageGetBitmapInfo(image.CGImage));&#xD;&#xA;    CGContextConcatCTM(ctx, transform);&#xD;&#xA;    switch (image.imageOrientation) {&#xD;&#xA;        case UIImageOrientationLeft:&#xD;&#xA;        case UIImageOrientationLeftMirrored:&#xD;&#xA;        case UIImageOrientationRight:&#xD;&#xA;        case UIImageOrientationRightMirrored:&#xD;&#xA;            // Grr...&#xD;&#xA;            CGContextDrawImage(ctx, CGRectMake(0,0,image.size.height,image.size.width), image.CGImage);&#xD;&#xA;            break;&#xD;&#xA;            &#xD;&#xA;        default:&#xD;&#xA;            CGContextDrawImage(ctx, CGRectMake(0,0,image.size.width,image.size.height), image.CGImage);&#xD;&#xA;            break;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    // And now we just create a new UIImage from the drawing context&#xD;&#xA;    CGImageRef cgimg = CGBitmapContextCreateImage(ctx);&#xD;&#xA;    UIImage *img = [UIImage imageWithCGImage:cgimg];&#xD;&#xA;    CGContextRelease(ctx);&#xD;&#xA;    CGImageRelease(cgimg);&#xD;&#xA;    return img;&#xD;&#xA;    &#xD;&#xA;     }"
