"Content"
"    public class VolumeKeyController {&#xD;&#xA;    &#xD;&#xA;        private MediaSessionCompat mMediaSession;&#xD;&#xA;        private final Context mContext;&#xD;&#xA;    &#xD;&#xA;        public VolumeKeyController(Context context) {&#xD;&#xA;            mContext = context;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private void createMediaSession() {&#xD;&#xA;            mMediaSession = new MediaSessionCompat(mContext, KeyUtil.log);&#xD;&#xA;    &#xD;&#xA;            mMediaSession.setFlags(MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS |&#xD;&#xA;                    MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS);&#xD;&#xA;            mMediaSession.setPlaybackState(new Builder()&#xD;&#xA;                    .setState(PlaybackStateCompat.STATE_PLAYING, 0, 0)&#xD;&#xA;                    .build());&#xD;&#xA;            mMediaSession.setPlaybackToRemote(getVolumeProvider());&#xD;&#xA;            mMediaSession.setActive(true);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private VolumeProviderCompat getVolumeProvider() {&#xD;&#xA;            final AudioManager audio = mContext.getSystemService(Context.AUDIO_SERVICE);&#xD;&#xA;    &#xD;&#xA;            int STREAM_TYPE = AudioManager.STREAM_MUSIC;&#xD;&#xA;            int currentVolume = audio.getStreamVolume(STREAM_TYPE);&#xD;&#xA;            int maxVolume = audio.getStreamMaxVolume(STREAM_TYPE);&#xD;&#xA;            final int VOLUME_UP = 1;&#xD;&#xA;            final int VOLUME_DOWN = -1;&#xD;&#xA;    &#xD;&#xA;            return new VolumeProviderCompat(VolumeProviderCompat.VOLUME_CONTROL_RELATIVE, maxVolume, currentVolume) {&#xD;&#xA;                @Override&#xD;&#xA;                public void onAdjustVolume(int direction) {&#xD;&#xA;                    // Up = 1, Down = -1, Release = 0&#xD;&#xA;                    // Replace with your action, if you don't want to adjust system volume&#xD;&#xA;                    if (direction == VOLUME_UP) {&#xD;&#xA;                        audio.adjustStreamVolume(STREAM_TYPE,&#xD;&#xA;                                AudioManager.ADJUST_RAISE, AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE);&#xD;&#xA;                    }&#xD;&#xA;                    else if (direction == VOLUME_DOWN) {&#xD;&#xA;                        audio.adjustStreamVolume(STREAM_TYPE,&#xD;&#xA;                                AudioManager.ADJUST_LOWER, AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE);&#xD;&#xA;                    }&#xD;&#xA;                    setCurrentVolume(audio.getStreamVolume(STREAM_TYPE));&#xD;&#xA;                }&#xD;&#xA;            };&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        // Call when control needed, add a call to constructor if needed immediately&#xD;&#xA;        public void setActive(boolean active) {&#xD;&#xA;            if (mMediaSession != null) {&#xD;&#xA;                mMediaSession.setActive(active);&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            createMediaSession();&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        // Call from Service's onDestroy method&#xD;&#xA;        public void destroy() {&#xD;&#xA;            if (mMediaSession != null) {&#xD;&#xA;                mMediaSession.release();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }"
