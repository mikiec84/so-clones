"Content"
"        var isDevBuild = process.argv.indexOf('--env.prod') < 0;&#xD;&#xA;    var path = require('path');&#xD;&#xA;    var webpack = require('webpack');&#xD;&#xA;    var nodeExternals = require('webpack-node-externals');&#xD;&#xA;    var merge = require('webpack-merge');&#xD;&#xA;    var allFilenamesExceptJavaScript = /\.(?!js(\?|$))([^.]+(\?|$))/;&#xD;&#xA;    &#xD;&#xA;    // Configuration in common to both client-side and server-side bundles&#xD;&#xA;    var sharedConfig = {&#xD;&#xA;        resolve: { extensions: [ '', '.js', '.ts' ] },&#xD;&#xA;        output: {&#xD;&#xA;            filename: '[name].js',&#xD;&#xA;            publicPath: '/dist/' // Webpack dev middleware, if enabled, handles requests for this URL prefix&#xD;&#xA;        },&#xD;&#xA;        module: {&#xD;&#xA;            loaders: [&#xD;&#xA;                { test: /\.ts$/, include: /ClientApp/, loader: 'ts', query: { silent: true } },&#xD;&#xA;                { test: /\.html$/, loader: 'raw' },&#xD;&#xA;                { test: /\.css$/, loader: 'to-string!css' },&#xD;&#xA;                { test: /\.(png|jpg|jpeg|gif|svg)$/, loader: 'url', query: { limit: 25000 } }&#xD;&#xA;            ]&#xD;&#xA;        }&#xD;&#xA;    };&#xD;&#xA;    &#xD;&#xA;    // Configuration for client-side bundle suitable for running in browsers&#xD;&#xA;    var clientBundleConfig = merge(sharedConfig, {&#xD;&#xA;        entry: { 'main-client': './ClientApp/boot-client.ts' },&#xD;&#xA;        output: { path: path.join(__dirname, './wwwroot/dist') },&#xD;&#xA;        devtool: isDevBuild ? 'inline-source-map' : null,&#xD;&#xA;        plugins: [&#xD;&#xA;            new webpack.DllReferencePlugin({&#xD;&#xA;                context: __dirname,&#xD;&#xA;                manifest: require('./wwwroot/dist/vendor-manifest.json')&#xD;&#xA;            })&#xD;&#xA;        ].concat(isDevBuild ? [] : [&#xD;&#xA;            // Plugins that apply in production builds only&#xD;&#xA;            new webpack.optimize.OccurenceOrderPlugin(),&#xD;&#xA;            new webpack.optimize.UglifyJsPlugin()&#xD;&#xA;        ])&#xD;&#xA;    });&#xD;&#xA;    &#xD;&#xA;    // Configuration for server-side (prerendering) bundle suitable for running in Node&#xD;&#xA;    var serverBundleConfig = merge(sharedConfig, {&#xD;&#xA;        entry: { 'main-server': './ClientApp/boot-server.ts' },&#xD;&#xA;        output: {&#xD;&#xA;            libraryTarget: 'commonjs',&#xD;&#xA;            path: path.join(__dirname, './ClientApp/dist')&#xD;&#xA;        },&#xD;&#xA;        target: 'node',&#xD;&#xA;        devtool: 'inline-source-map',&#xD;&#xA;        externals: [nodeExternals({ whitelist: [allFilenamesExceptJavaScript] })] // Don't bundle .js files from node_modules&#xD;&#xA;    });&#xD;&#xA;    &#xD;&#xA;    module.exports = [clientBundleConfig, serverBundleConfig];"
