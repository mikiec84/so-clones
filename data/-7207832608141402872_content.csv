"Content"
"    package persistence;&#xD;&#xA;    &#xD;&#xA;    import java.sql.*;&#xD;&#xA;    import java.util.*;&#xD;&#xA;    &#xD;&#xA;    /**&#xD;&#xA;     * util.DatabaseUtils&#xD;&#xA;     * User: Michael&#xD;&#xA;     * Date: Aug 17, 2010&#xD;&#xA;     * Time: 7:58:02 PM&#xD;&#xA;     */&#xD;&#xA;    public class DatabaseUtils {&#xD;&#xA;        private static final String DEFAULT_DRIVER = """"oracle.jdbc.driver.OracleDriver"""";&#xD;&#xA;        private static final String DEFAULT_URL = """"jdbc:oracle:thin:@host:1521:database"""";&#xD;&#xA;        private static final String DEFAULT_USERNAME = """"username"""";&#xD;&#xA;        private static final String DEFAULT_PASSWORD = """"password"""";&#xD;&#xA;    /*&#xD;&#xA;        private static final String DEFAULT_DRIVER = """"org.postgresql.Driver"""";&#xD;&#xA;        private static final String DEFAULT_URL = """"jdbc:postgresql://localhost:5432/party"""";&#xD;&#xA;        private static final String DEFAULT_USERNAME = """"pgsuper"""";&#xD;&#xA;        private static final String DEFAULT_PASSWORD = """"pgsuper"""";&#xD;&#xA;    */&#xD;&#xA;    /*&#xD;&#xA;        private static final String DEFAULT_DRIVER = """"com.mysql.jdbc.Driver"""";&#xD;&#xA;        private static final String DEFAULT_URL = """"jdbc:mysql://localhost:3306/party"""";&#xD;&#xA;        private static final String DEFAULT_USERNAME = """"party"""";&#xD;&#xA;        private static final String DEFAULT_PASSWORD = """"party"""";&#xD;&#xA;    */&#xD;&#xA;    &#xD;&#xA;        public static void main(String[] args) {&#xD;&#xA;            long begTime = System.currentTimeMillis();&#xD;&#xA;    &#xD;&#xA;            String driver = ((args.length > 0) ? args[0] : DEFAULT_DRIVER);&#xD;&#xA;            String url = ((args.length > 1) ? args[1] : DEFAULT_URL);&#xD;&#xA;            String username = ((args.length > 2) ? args[2] : DEFAULT_USERNAME);&#xD;&#xA;            String password = ((args.length > 3) ? args[3] : DEFAULT_PASSWORD);&#xD;&#xA;    &#xD;&#xA;            Connection connection = null;&#xD;&#xA;    &#xD;&#xA;            try {&#xD;&#xA;                connection = createConnection(driver, url, username, password);&#xD;&#xA;                DatabaseMetaData meta = connection.getMetaData();&#xD;&#xA;                System.out.println(meta.getDatabaseProductName());&#xD;&#xA;                System.out.println(meta.getDatabaseProductVersion());&#xD;&#xA;    &#xD;&#xA;                String sqlQuery = """"SELECT PERSON_ID, FIRST_NAME, LAST_NAME FROM PERSON ORDER BY LAST_NAME"""";&#xD;&#xA;                System.out.println(""""before insert: """" + query(connection, sqlQuery, Collections.EMPTY_LIST));&#xD;&#xA;    &#xD;&#xA;                connection.setAutoCommit(false);&#xD;&#xA;                String sqlUpdate = """"INSERT INTO PERSON(FIRST_NAME, LAST_NAME) VALUES(?,?)"""";&#xD;&#xA;                List parameters = Arrays.asList(""""Foo"""", """"Bar"""");&#xD;&#xA;                int numRowsUpdated = update(connection, sqlUpdate, parameters);&#xD;&#xA;                connection.commit();&#xD;&#xA;    &#xD;&#xA;                System.out.println(""""# rows inserted: """" + numRowsUpdated);&#xD;&#xA;                System.out.println(""""after insert: """" + query(connection, sqlQuery, Collections.EMPTY_LIST));&#xD;&#xA;            } catch (Exception e) {&#xD;&#xA;                rollback(connection);&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            } finally {&#xD;&#xA;                close(connection);&#xD;&#xA;                long endTime = System.currentTimeMillis();&#xD;&#xA;                System.out.println(""""wall time: """" + (endTime - begTime) + """" ms"""");&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static Connection createConnection(String driver, String url, String username, String password) throws ClassNotFoundException, SQLException {&#xD;&#xA;            Class.forName(driver);&#xD;&#xA;            if ((username == null) || (password == null) || (username.trim().length() == 0) || (password.trim().length() == 0)) {&#xD;&#xA;                return DriverManager.getConnection(url);&#xD;&#xA;            } else {&#xD;&#xA;                return DriverManager.getConnection(url, username, password);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static void close(Connection connection) {&#xD;&#xA;            try {&#xD;&#xA;                if (connection != null) {&#xD;&#xA;                    connection.close();&#xD;&#xA;                }&#xD;&#xA;            } catch (SQLException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;        public static void close(Statement st) {&#xD;&#xA;            try {&#xD;&#xA;                if (st != null) {&#xD;&#xA;                    st.close();&#xD;&#xA;                }&#xD;&#xA;            } catch (SQLException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static void close(ResultSet rs) {&#xD;&#xA;            try {&#xD;&#xA;                if (rs != null) {&#xD;&#xA;                    rs.close();&#xD;&#xA;                }&#xD;&#xA;            } catch (SQLException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static void rollback(Connection connection) {&#xD;&#xA;            try {&#xD;&#xA;                if (connection != null) {&#xD;&#xA;                    connection.rollback();&#xD;&#xA;                }&#xD;&#xA;            } catch (SQLException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static List<Map<String, Object>> map(ResultSet rs) throws SQLException {&#xD;&#xA;            List<Map<String, Object>> results = new ArrayList<Map<String, Object>>();&#xD;&#xA;            try {&#xD;&#xA;                if (rs != null) {&#xD;&#xA;                    ResultSetMetaData meta = rs.getMetaData();&#xD;&#xA;                    int numColumns = meta.getColumnCount();&#xD;&#xA;                    while (rs.next()) {&#xD;&#xA;                        Map<String, Object> row = new HashMap<String, Object>();&#xD;&#xA;                        for (int i = 1; i <= numColumns; ++i) {&#xD;&#xA;                            String name = meta.getColumnName(i);&#xD;&#xA;                            Object value = rs.getObject(i);&#xD;&#xA;                            row.put(name, value);&#xD;&#xA;                        }&#xD;&#xA;                        results.add(row);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            } finally {&#xD;&#xA;                close(rs);&#xD;&#xA;            }&#xD;&#xA;            return results;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static List<Map<String, Object>> query(Connection connection, String sql, List<Object> parameters) throws SQLException {&#xD;&#xA;            List<Map<String, Object>> results = null;&#xD;&#xA;            PreparedStatement ps = null;&#xD;&#xA;            ResultSet rs = null;&#xD;&#xA;            try {&#xD;&#xA;                ps = connection.prepareStatement(sql);&#xD;&#xA;    &#xD;&#xA;                int i = 0;&#xD;&#xA;                for (Object parameter : parameters) {&#xD;&#xA;                    ps.setObject(++i, parameter);&#xD;&#xA;                }&#xD;&#xA;                rs = ps.executeQuery();&#xD;&#xA;                results = map(rs);&#xD;&#xA;            } finally {&#xD;&#xA;                close(rs);&#xD;&#xA;                close(ps);&#xD;&#xA;            }&#xD;&#xA;            return results;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static int update(Connection connection, String sql, List<Object> parameters) throws SQLException {&#xD;&#xA;            int numRowsUpdated = 0;&#xD;&#xA;            PreparedStatement ps = null;&#xD;&#xA;            try {&#xD;&#xA;                ps = connection.prepareStatement(sql);&#xD;&#xA;    &#xD;&#xA;                int i = 0;&#xD;&#xA;                for (Object parameter : parameters) {&#xD;&#xA;                    ps.setObject(++i, parameter);&#xD;&#xA;                }&#xD;&#xA;                numRowsUpdated = ps.executeUpdate();&#xD;&#xA;            } finally {&#xD;&#xA;                close(ps);&#xD;&#xA;            }&#xD;&#xA;            return numRowsUpdated;&#xD;&#xA;        }&#xD;&#xA;    }"
