"Content"
"    var cachedThrottleFuncs = [],&#xD;&#xA;        minimumInterval = 200; // minimum interval between throttled function calls&#xD;&#xA;    function throttle(func, obj, evt) {&#xD;&#xA;    	var timeouttype	= 0,&#xD;&#xA;    		curFunc;&#xD;&#xA;    	function lowerTimeoutType(f){&#xD;&#xA;    		timeouttype=0;&#xD;&#xA;    		if (curFunc !== undefined){&#xD;&#xA;    			curFunc();&#xD;&#xA;    			curFunc = undefined;&#xD;&#xA;    		}&#xD;&#xA;    	};&#xD;&#xA;    	return cachedThrottleFuncs[ ~(&#xD;&#xA;    		~cachedThrottleFuncs.indexOf(func) || &#xD;&#xA;    		~(&#xD;&#xA;    		  cachedThrottleFuncs.push(function(Evt) {&#xD;&#xA;    			switch (timeouttype){&#xD;&#xA;    				case 0: // Execute immediatly&#xD;&#xA;    					++timeouttype;&#xD;&#xA;    					func.call(Evt.target, Evt);&#xD;&#xA;    					setTimeout(lowerTimeoutType, minimumInterval);&#xD;&#xA;    					break;&#xD;&#xA;    				case 1: // Delayed execute&#xD;&#xA;    					curFunc = func.bind(Evt.target, Evt);&#xD;&#xA;    					Evt.preventDefault();&#xD;&#xA;    			}&#xD;&#xA;    		  }) - 1&#xD;&#xA;    		)&#xD;&#xA;    	)];&#xD;&#xA;    };&#xD;&#xA;	function listen(obj, evt, func){&#xD;&#xA;		obj.addEventListener(evt, throttle(func, obj, evt));&#xD;&#xA;	};&#xD;&#xA;	function mute(obj, evt, func){&#xD;&#xA;		obj.removeEventListener(evt, throttle(func, obj, evt));&#xD;&#xA;	}"
