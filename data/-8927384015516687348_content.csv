"Content"
"    /*&#xD;&#xA;    **  Use the Collections API to sort a List for you.&#xD;&#xA;    **&#xD;&#xA;    **  When your class has a """"natural"""" sort order you can implement&#xD;&#xA;    **  the Comparable interface.&#xD;&#xA;    **&#xD;&#xA;    **  You can use an alternate sort order when you implement&#xD;&#xA;    **  a Comparator for your class.&#xD;&#xA;    */&#xD;&#xA;    import java.util.*;&#xD;&#xA;    &#xD;&#xA;    public class Person implements Comparable<Person>&#xD;&#xA;    {&#xD;&#xA;    	String name;&#xD;&#xA;    	int age;&#xD;&#xA;    &#xD;&#xA;    	public Person(String name, int age)&#xD;&#xA;    	{&#xD;&#xA;    	   	this.name = name;&#xD;&#xA;    	   	this.age = age;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	public String getName()&#xD;&#xA;    	{&#xD;&#xA;    		return name;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	public int getAge()&#xD;&#xA;    	{&#xD;&#xA;    		return age;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	public String toString()&#xD;&#xA;    	{&#xD;&#xA;    		return name + """" : """" + age;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	/*&#xD;&#xA;    	**  Implement the natural order for this class&#xD;&#xA;    	*/&#xD;&#xA;    	public int compareTo(Person p)&#xD;&#xA;    	{&#xD;&#xA;    		return getName().compareTo(p.getName());&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	static class AgeComparator implements Comparator<Person>&#xD;&#xA;    	{&#xD;&#xA;    		public int compare(Person p1, Person p2)&#xD;&#xA;    		{&#xD;&#xA;    			return p1.getAge() - p2.getAge();&#xD;&#xA;    		}&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	public static void main(String[] args)&#xD;&#xA;    	{&#xD;&#xA;    		List<Person> people = new ArrayList<Person>();&#xD;&#xA;    		people.add( new Person(""""Homer"""", 38) );&#xD;&#xA;    		people.add( new Person(""""Marge"""", 35) );&#xD;&#xA;    		people.add( new Person(""""Bart"""", 15) );&#xD;&#xA;    		people.add( new Person(""""Lisa"""", 13) );&#xD;&#xA;    &#xD;&#xA;    		// Sort by natural order&#xD;&#xA;    &#xD;&#xA;    		Collections.sort(people);&#xD;&#xA;    		System.out.println(""""Sort by Natural order"""");&#xD;&#xA;    		System.out.println(""""\t"""" + people);&#xD;&#xA;    &#xD;&#xA;    		// Sort by reverse natural order&#xD;&#xA;    &#xD;&#xA;    		Collections.sort(people, Collections.reverseOrder());&#xD;&#xA;    		System.out.println(""""Sort by reverse natural order"""");&#xD;&#xA;    		System.out.println(""""\t"""" + people);&#xD;&#xA;    &#xD;&#xA;    		//  Use a Comparator to sort by age&#xD;&#xA;    &#xD;&#xA;    		Collections.sort(people, new Person.AgeComparator());&#xD;&#xA;    		System.out.println(""""Sort using Age Comparator"""");&#xD;&#xA;    		System.out.println(""""\t"""" + people);&#xD;&#xA;    &#xD;&#xA;    		//  Use a Comparator to sort by descending age&#xD;&#xA;    &#xD;&#xA;    		Collections.sort(people, Collections.reverseOrder(new Person.AgeComparator()));&#xD;&#xA;    		System.out.println(""""Sort using Reverse Age Comparator"""");&#xD;&#xA;    		System.out.println(""""\t"""" + people);&#xD;&#xA;    	}&#xD;&#xA;    }"
