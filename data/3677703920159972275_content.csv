"Content"
"    - (BOOL) combineVoices1&#xD;&#xA;    {&#xD;&#xA;        NSError *error = nil;&#xD;&#xA;        BOOL ok = NO;&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,    NSUserDomainMask, YES);&#xD;&#xA;        NSString *documentsDirectory = [paths objectAtIndex:0];&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        CMTime nextClipStartTime = kCMTimeZero;&#xD;&#xA;        //Create AVMutableComposition Object.This object will hold our multiple AVMutableCompositionTrack.&#xD;&#xA;        AVMutableComposition *composition = [[AVMutableComposition alloc] init];&#xD;&#xA;        &#xD;&#xA;        AVMutableCompositionTrack *compositionAudioTrack = [composition addMutableTrackWithMediaType:AVMediaTypeAudio preferredTrackID:kCMPersistentTrackID_Invalid];&#xD;&#xA;        [compositionAudioTrack setPreferredVolume:0.8];&#xD;&#xA;        NSString *soundOne  =[[NSBundle mainBundle]pathForResource:@""""test1"""" ofType:@""""caf""""];&#xD;&#xA;        NSURL *url = [NSURL fileURLWithPath:soundOne];&#xD;&#xA;        AVAsset *avAsset = [AVURLAsset URLAssetWithURL:url options:nil];&#xD;&#xA;        NSArray *tracks = [avAsset tracksWithMediaType:AVMediaTypeAudio];&#xD;&#xA;        AVAssetTrack *clipAudioTrack = [[avAsset tracksWithMediaType:AVMediaTypeAudio] objectAtIndex:0];&#xD;&#xA;        [compositionAudioTrack insertTimeRange:CMTimeRangeMake(kCMTimeZero, avAsset.duration) ofTrack:clipAudioTrack atTime:kCMTimeZero error:nil];&#xD;&#xA;        &#xD;&#xA;        AVMutableCompositionTrack *compositionAudioTrack1 = [composition addMutableTrackWithMediaType:AVMediaTypeAudio preferredTrackID:kCMPersistentTrackID_Invalid];&#xD;&#xA;        [compositionAudioTrack setPreferredVolume:0.3];&#xD;&#xA;        NSString *soundOne1  =[[NSBundle mainBundle]pathForResource:@""""test"""" ofType:@""""caf""""];&#xD;&#xA;        NSURL *url1 = [NSURL fileURLWithPath:soundOne1];&#xD;&#xA;        AVAsset *avAsset1 = [AVURLAsset URLAssetWithURL:url1 options:nil];&#xD;&#xA;        NSArray *tracks1 = [avAsset1 tracksWithMediaType:AVMediaTypeAudio];&#xD;&#xA;        AVAssetTrack *clipAudioTrack1 = [[avAsset1 tracksWithMediaType:AVMediaTypeAudio] objectAtIndex:0];&#xD;&#xA;        [compositionAudioTrack1 insertTimeRange:CMTimeRangeMake(kCMTimeZero, avAsset.duration) ofTrack:clipAudioTrack1 atTime:kCMTimeZero error:nil];&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        AVMutableCompositionTrack *compositionAudioTrack2 = [composition addMutableTrackWithMediaType:AVMediaTypeAudio preferredTrackID:kCMPersistentTrackID_Invalid];&#xD;&#xA;        [compositionAudioTrack2 setPreferredVolume:1.0];&#xD;&#xA;        NSString *soundOne2  =[[NSBundle mainBundle]pathForResource:@""""song"""" ofType:@""""caf""""];&#xD;&#xA;        NSURL *url2 = [NSURL fileURLWithPath:soundOne2];&#xD;&#xA;        AVAsset *avAsset2 = [AVURLAsset URLAssetWithURL:url2 options:nil];&#xD;&#xA;        NSArray *tracks2 = [avAsset2 tracksWithMediaType:AVMediaTypeAudio];&#xD;&#xA;        AVAssetTrack *clipAudioTrack2 = [[avAsset2 tracksWithMediaType:AVMediaTypeAudio] objectAtIndex:0];&#xD;&#xA;        [compositionAudioTrack1 insertTimeRange:CMTimeRangeMake(kCMTimeZero, avAsset2.duration) ofTrack:clipAudioTrack2 atTime:kCMTimeZero error:nil];&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        AVAssetExportSession *exportSession = [AVAssetExportSession&#xD;&#xA;                                               exportSessionWithAsset:composition&#xD;&#xA;                                               presetName:AVAssetExportPresetAppleM4A];&#xD;&#xA;        if (nil == exportSession) return NO;&#xD;&#xA;        &#xD;&#xA;        NSString *soundOneNew = [documentsDirectory stringByAppendingPathComponent:@""""combined10.m4a""""];&#xD;&#xA;        //NSLog(@""""Output file path - %@"""",soundOneNew);&#xD;&#xA;        &#xD;&#xA;        // configure export session  output with all our parameters&#xD;&#xA;        exportSession.outputURL = [NSURL fileURLWithPath:soundOneNew]; // output path&#xD;&#xA;        exportSession.outputFileType = AVFileTypeAppleM4A; // output file type&#xD;&#xA;        &#xD;&#xA;        // perform the export&#xD;&#xA;        [exportSession exportAsynchronouslyWithCompletionHandler:^{&#xD;&#xA;            &#xD;&#xA;            if (AVAssetExportSessionStatusCompleted == exportSession.status) {&#xD;&#xA;                NSLog(@""""AVAssetExportSessionStatusCompleted"""");&#xD;&#xA;            } else if (AVAssetExportSessionStatusFailed == exportSession.status) {&#xD;&#xA;                // a failure may happen because of an event out of your control&#xD;&#xA;                // for example, an interruption like a phone call comming in&#xD;&#xA;                // make sure and handle this case appropriately&#xD;&#xA;                NSLog(@""""AVAssetExportSessionStatusFailed"""");&#xD;&#xA;            } else {&#xD;&#xA;                NSLog(@""""Export Session Status: %d"""", exportSession.status);&#xD;&#xA;            }&#xD;&#xA;        }];&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        return YES;&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;    }"
