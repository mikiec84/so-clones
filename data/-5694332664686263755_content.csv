"Content"
"    	BITS 16&#xD;&#xA;    &#xD;&#xA;    start:&#xD;&#xA;    	mov ax, 07C0h		; Set up 4K stack space after this bootloader&#xD;&#xA;    	add ax, 288		; (4096 + 512) / 16 bytes per paragraph&#xD;&#xA;    	mov ss, ax&#xD;&#xA;    	mov sp, 4096&#xD;&#xA;    &#xD;&#xA;    	mov ax, 07C0h		; Set data segment to where we're loaded&#xD;&#xA;    	mov ds, ax&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    	mov si, text_string	; Put string position into SI&#xD;&#xA;    	call print_string	; Call our string-printing routine&#xD;&#xA;    &#xD;&#xA;    	jmp $			; Jump here - infinite loop!&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    	text_string db 'This is my cool new OS!', 0&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    print_string:			; Routine: output string in SI to screen&#xD;&#xA;    	mov ah, 0Eh		; int 10h 'print char' function&#xD;&#xA;    &#xD;&#xA;    .repeat:&#xD;&#xA;    	lodsb			; Get character from string&#xD;&#xA;    	cmp al, 0&#xD;&#xA;    	je .done		; If char is zero, end of string&#xD;&#xA;    	int 10h			; Otherwise, print it&#xD;&#xA;    	jmp .repeat&#xD;&#xA;    &#xD;&#xA;    .done:&#xD;&#xA;    	ret&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    	times 510-($-$$) db 0	; Pad remainder of boot sector with 0s&#xD;&#xA;    	dw 0xAA55		; The standard PC boot signature"
