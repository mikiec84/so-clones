"Content"
"	using System;&#xD;&#xA;	using System.Linq;&#xD;&#xA;	using System.Linq.Expressions;&#xD;&#xA;	using System.Collections.Generic;&#xD;&#xA;	 &#xD;&#xA;	public static class PredicateBuilder&#xD;&#xA;	{&#xD;&#xA;	  public static Expression<Func<T, bool>> True<T> ()  { return f => true;  }&#xD;&#xA;	  public static Expression<Func<T, bool>> False<T> () { return f => false; }&#xD;&#xA;	 &#xD;&#xA;	  public static Expression<Func<T, bool>> Or<T> (this Expression<Func<T, bool>> expr1,&#xD;&#xA;														  Expression<Func<T, bool>> expr2)&#xD;&#xA;	  {&#xD;&#xA;		var invokedExpr = Expression.Invoke (expr2, expr1.Parameters.Cast<Expression> ());&#xD;&#xA;		return Expression.Lambda<Func<T, bool>>&#xD;&#xA;			  (Expression.OrElse (expr1.Body, invokedExpr), expr1.Parameters);&#xD;&#xA;	  }&#xD;&#xA;	 &#xD;&#xA;	  public static Expression<Func<T, bool>> And<T> (this Expression<Func<T, bool>> expr1,&#xD;&#xA;														   Expression<Func<T, bool>> expr2)&#xD;&#xA;	  {&#xD;&#xA;		var invokedExpr = Expression.Invoke (expr2, expr1.Parameters.Cast<Expression> ());&#xD;&#xA;		return Expression.Lambda<Func<T, bool>>&#xD;&#xA;			  (Expression.AndAlso (expr1.Body, invokedExpr), expr1.Parameters);&#xD;&#xA;	  }&#xD;&#xA;	}"
