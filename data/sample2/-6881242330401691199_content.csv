"Content"
"    public class MessageBus&#xD;&#xA;    {&#xD;&#xA;        #region Singleton&#xD;&#xA;        static MessageBus _messageBus = null;&#xD;&#xA;        private MessageBus() { }&#xD;&#xA;        public static MessageBus Instance&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                if (_messageBus == null)&#xD;&#xA;                {&#xD;&#xA;                    _messageBus = new MessageBus();&#xD;&#xA;                }&#xD;&#xA;                return _messageBus;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        #endregion&#xD;&#xA;        #region Members&#xD;&#xA;        List<Observer> _observers = new List<Observer>();&#xD;&#xA;        List<Observer> _oneTimeObservers = new List<Observer>();&#xD;&#xA;        List<Observer> _waitingSubscribers = new List<Observer>();&#xD;&#xA;        List<Observer> _waitingUnsubscribers = new List<Observer>();&#xD;&#xA;        int _publishingCount = 0;&#xD;&#xA;        #endregion&#xD;&#xA;        public void Subscribe(string message, Action<object> response)&#xD;&#xA;        {&#xD;&#xA;            Subscribe(message, response, _observers);&#xD;&#xA;        }&#xD;&#xA;        public void SubscribeFirstPublication(string message, Action<object> response)&#xD;&#xA;        {&#xD;&#xA;            Subscribe(message, response, _oneTimeObservers);&#xD;&#xA;        }&#xD;&#xA;        public int Unsubscribe(string message, Action<object> response)&#xD;&#xA;        {&#xD;&#xA;            var observers = new List<Observer>(_observers.Where(o => o.Respond == response).ToList());&#xD;&#xA;            observers.AddRange(_waitingSubscribers.Where(o => o.Respond == response));&#xD;&#xA;            observers.AddRange(_oneTimeObservers.Where(o => o.Respond == response));&#xD;&#xA;            if (_publishingCount == 0)&#xD;&#xA;            {&#xD;&#xA;                observers.ForEach(o => _observers.Remove(o));&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                _waitingUnsubscribers.AddRange(observers);&#xD;&#xA;            }&#xD;&#xA;            return observers.Count;&#xD;&#xA;        }&#xD;&#xA;        public int Unsubscribe(string subscription)&#xD;&#xA;        {&#xD;&#xA;            var observers = new List<Observer>(_observers.Where(o => o.Subscription == subscription).ToList());&#xD;&#xA;            observers.AddRange(_waitingSubscribers.Where(o => o.Subscription == subscription));&#xD;&#xA;            observers.AddRange(_oneTimeObservers.Where(o => o.Subscription == subscription));&#xD;&#xA;            if (_publishingCount == 0)&#xD;&#xA;            {&#xD;&#xA;                observers.ForEach(o => _observers.Remove(o));&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                _waitingUnsubscribers.AddRange(observers);&#xD;&#xA;            }&#xD;&#xA;            return observers.Count;&#xD;&#xA;        }&#xD;&#xA;        public void Publish(string message, object payload)&#xD;&#xA;        {&#xD;&#xA;            _publishingCount++;&#xD;&#xA;            Publish(_observers, message, payload);&#xD;&#xA;            Publish(_oneTimeObservers, message, payload);&#xD;&#xA;            Publish(_waitingSubscribers, message, payload);&#xD;&#xA;            _oneTimeObservers.RemoveAll(o => o.Subscription == message);&#xD;&#xA;            _waitingUnsubscribers.Clear();&#xD;&#xA;            _publishingCount--;&#xD;&#xA;        }&#xD;&#xA;        private void Publish(List<Observer> observers, string message, object payload)&#xD;&#xA;        {&#xD;&#xA;            Debug.Assert(_publishingCount >= 0);&#xD;&#xA;            var subscribers = observers.Where(o => o.Subscription.ToLower() == message.ToLower());&#xD;&#xA;            foreach (var subscriber in subscribers)&#xD;&#xA;            {&#xD;&#xA;                subscriber.Respond(payload);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        public IEnumerable<Observer> GetObservers(string subscription)&#xD;&#xA;        {&#xD;&#xA;            var observers = new List<Observer>(_observers.Where(o => o.Subscription == subscription));&#xD;&#xA;            return observers;&#xD;&#xA;        }&#xD;&#xA;        public void Clear()&#xD;&#xA;        {&#xD;&#xA;            _observers.Clear();&#xD;&#xA;            _oneTimeObservers.Clear();&#xD;&#xA;        }&#xD;&#xA;        #region Helpers&#xD;&#xA;        private void Subscribe(string message, Action<object> response, List<Observer> observers)&#xD;&#xA;        {&#xD;&#xA;            Debug.Assert(_publishingCount >= 0);&#xD;&#xA;            var observer = new Observer() { Subscription = message, Respond = response };&#xD;&#xA;            if (_publishingCount == 0)&#xD;&#xA;            {&#xD;&#xA;                observers.Add(observer);&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                _waitingSubscribers.Add(observer);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        #endregion&#xD;&#xA;    }"
