"Content"
"    public static int calculateInSampleSize(&#xD;&#xA;                BitmapFactory.Options options, int reqWidth, int reqHeight) {&#xD;&#xA;        // Raw height and width of image&#xD;&#xA;        final int height = options.outHeight;&#xD;&#xA;        final int width = options.outWidth;&#xD;&#xA;        int inSampleSize = 1;&#xD;&#xA;    &#xD;&#xA;        if (height > reqHeight || width > reqWidth) {&#xD;&#xA;    &#xD;&#xA;            // Calculate ratios of height and width to requested height and width&#xD;&#xA;            final int heightRatio = Math.round((float) height / (float) reqHeight);&#xD;&#xA;            final int widthRatio = Math.round((float) width / (float) reqWidth);&#xD;&#xA;    &#xD;&#xA;            // Choose the smallest ratio as inSampleSize value, this will guarantee&#xD;&#xA;            // a final image with both dimensions larger than or equal to the&#xD;&#xA;            // requested height and width.&#xD;&#xA;            inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        return inSampleSize;&#xD;&#xA;    }&#xD;&#xA;     public static Bitmap decodeSampledBitmapFromResource(Resources res, int resId,&#xD;&#xA;            int reqWidth, int reqHeight) {&#xD;&#xA;    &#xD;&#xA;        // First decode with inJustDecodeBounds=true to check dimensions&#xD;&#xA;        final BitmapFactory.Options options = new BitmapFactory.Options();&#xD;&#xA;        options.inJustDecodeBounds = true;&#xD;&#xA;        BitmapFactory.decodeResource(res, resId, options);&#xD;&#xA;    &#xD;&#xA;        // Calculate inSampleSize&#xD;&#xA;        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);&#xD;&#xA;    &#xD;&#xA;        // Decode bitmap with inSampleSize set&#xD;&#xA;        options.inJustDecodeBounds = false;&#xD;&#xA;        return BitmapFactory.decodeResource(res, resId, options);&#xD;&#xA;    }"
