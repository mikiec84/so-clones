"Content"
"    /**&#xD;&#xA;     * Get a file path from a Uri. This will get the the path for Storage Access&#xD;&#xA;     * Framework Documents, as well as the _data field for the MediaStore and&#xD;&#xA;     * other file-based ContentProviders.&#xD;&#xA;     *&#xD;&#xA;     * @param context The context.&#xD;&#xA;     * @param uri The Uri to query.&#xD;&#xA;     * @author paulburke&#xD;&#xA;     */&#xD;&#xA;    public static String getPath(final Context context, final Uri uri) {&#xD;&#xA;        final boolean isKitKat = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;&#xD;&#xA;        // DocumentProvider&#xD;&#xA;        if (isKitKat && DocumentsContract.isDocumentUri(context, uri)) {&#xD;&#xA;            // ExternalStorageProvider&#xD;&#xA;            if (isExternalStorageDocument(uri)) {&#xD;&#xA;                final String docId = DocumentsContract.getDocumentId(uri);&#xD;&#xA;                final String[] split = docId.split("""":"""");&#xD;&#xA;                final String type = split[0];&#xD;&#xA;                if (""""primary"""".equalsIgnoreCase(type)) {&#xD;&#xA;                    return Environment.getExternalStorageDirectory() + """"/"""" + split[1];&#xD;&#xA;                }&#xD;&#xA;                // TODO handle non-primary volumes&#xD;&#xA;            }&#xD;&#xA;            // DownloadsProvider&#xD;&#xA;            else if (isDownloadsDocument(uri)) {&#xD;&#xA;                final String id = DocumentsContract.getDocumentId(uri);&#xD;&#xA;                final Uri contentUri = ContentUris.withAppendedId(&#xD;&#xA;                        Uri.parse(""""content://downloads/public_downloads""""), Long.valueOf(id));&#xD;&#xA;                return getDataColumn(context, contentUri, null, null);&#xD;&#xA;            }&#xD;&#xA;            // MediaProvider&#xD;&#xA;            else if (isMediaDocument(uri)) {&#xD;&#xA;                final String docId = DocumentsContract.getDocumentId(uri);&#xD;&#xA;                final String[] split = docId.split("""":"""");&#xD;&#xA;                final String type = split[0];&#xD;&#xA;                Uri contentUri = null;&#xD;&#xA;                if (""""image"""".equals(type)) {&#xD;&#xA;                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;&#xD;&#xA;                } else if (""""video"""".equals(type)) {&#xD;&#xA;                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;&#xD;&#xA;                } else if (""""audio"""".equals(type)) {&#xD;&#xA;                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;&#xD;&#xA;                }&#xD;&#xA;                final String selection = """"_id=?"""";&#xD;&#xA;                final String[] selectionArgs = new String[] {&#xD;&#xA;                        split[1]&#xD;&#xA;                };&#xD;&#xA;                return getDataColumn(context, contentUri, selection, selectionArgs);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        // MediaStore (and general)&#xD;&#xA;        else if (""""content"""".equalsIgnoreCase(uri.getScheme())) {&#xD;&#xA;            // Return the remote address&#xD;&#xA;            if (isGooglePhotosUri(uri))&#xD;&#xA;                return uri.getLastPathSegment();&#xD;&#xA;            return getDataColumn(context, uri, null, null);&#xD;&#xA;        }&#xD;&#xA;        // File&#xD;&#xA;        else if (""""file"""".equalsIgnoreCase(uri.getScheme())) {&#xD;&#xA;            return uri.getPath();&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    /**&#xD;&#xA;     * Get the value of the data column for this Uri. This is useful for&#xD;&#xA;     * MediaStore Uris, and other file-based ContentProviders.&#xD;&#xA;     *&#xD;&#xA;     * @param context The context.&#xD;&#xA;     * @param uri The Uri to query.&#xD;&#xA;     * @param selection (Optional) Filter used in the query.&#xD;&#xA;     * @param selectionArgs (Optional) Selection arguments used in the query.&#xD;&#xA;     * @return The value of the _data column, which is typically a file path.&#xD;&#xA;     */&#xD;&#xA;    public static String getDataColumn(Context context, Uri uri, String selection,&#xD;&#xA;            String[] selectionArgs) {&#xD;&#xA;        Cursor cursor = null;&#xD;&#xA;        final String column = """"_data"""";&#xD;&#xA;        final String[] projection = {&#xD;&#xA;                column&#xD;&#xA;        };&#xD;&#xA;        try {&#xD;&#xA;            cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs,&#xD;&#xA;                    null);&#xD;&#xA;            if (cursor != null && cursor.moveToFirst()) {&#xD;&#xA;                final int index = cursor.getColumnIndexOrThrow(column);&#xD;&#xA;                return cursor.getString(index);&#xD;&#xA;            }&#xD;&#xA;        } finally {&#xD;&#xA;            if (cursor != null)&#xD;&#xA;                cursor.close();&#xD;&#xA;        }&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    /**&#xD;&#xA;     * @param uri The Uri to check.&#xD;&#xA;     * @return Whether the Uri authority is ExternalStorageProvider.&#xD;&#xA;     */&#xD;&#xA;    public static boolean isExternalStorageDocument(Uri uri) {&#xD;&#xA;        return """"com.android.externalstorage.documents"""".equals(uri.getAuthority());&#xD;&#xA;    }&#xD;&#xA;    /**&#xD;&#xA;     * @param uri The Uri to check.&#xD;&#xA;     * @return Whether the Uri authority is DownloadsProvider.&#xD;&#xA;     */&#xD;&#xA;    public static boolean isDownloadsDocument(Uri uri) {&#xD;&#xA;        return """"com.android.providers.downloads.documents"""".equals(uri.getAuthority());&#xD;&#xA;    }&#xD;&#xA;    /**&#xD;&#xA;     * @param uri The Uri to check.&#xD;&#xA;     * @return Whether the Uri authority is MediaProvider.&#xD;&#xA;     */&#xD;&#xA;    public static boolean isMediaDocument(Uri uri) {&#xD;&#xA;        return """"com.android.providers.media.documents"""".equals(uri.getAuthority());&#xD;&#xA;    }&#xD;&#xA;    /**&#xD;&#xA;     * @param uri The Uri to check.&#xD;&#xA;     * @return Whether the Uri authority is Google Photos.&#xD;&#xA;     */&#xD;&#xA;    public static boolean isGooglePhotosUri(Uri uri) {&#xD;&#xA;        return """"com.google.android.apps.photos.content"""".equals(uri.getAuthority());&#xD;&#xA;    }"
