"Content"
"    import re&#xD;&#xA;    &#xD;&#xA;    from django.db.models import Q&#xD;&#xA;    &#xD;&#xA;    def normalize_query(query_string,&#xD;&#xA;                        findterms=re.compile(r'""""([^""""]+)""""|(\S+)').findall,&#xD;&#xA;                        normspace=re.compile(r'\s{2,}').sub):&#xD;&#xA;        ''' Splits the query string in invidual keywords, getting rid of unecessary spaces&#xD;&#xA;            and grouping quoted words together.&#xD;&#xA;            Example:&#xD;&#xA;            &#xD;&#xA;            >>> normalize_query('  some random  words """"with   quotes  """" and   spaces')&#xD;&#xA;            ['some', 'random', 'words', 'with quotes', 'and', 'spaces']&#xD;&#xA;        &#xD;&#xA;        '''&#xD;&#xA;        return [normspace(' ', (t[0] or t[1]).strip()) for t in findterms(query_string)] &#xD;&#xA;    &#xD;&#xA;    def get_query(query_string, search_fields):&#xD;&#xA;        ''' Returns a query, that is a combination of Q objects. That combination&#xD;&#xA;            aims to search keywords within a model by testing the given search fields.&#xD;&#xA;        &#xD;&#xA;        '''&#xD;&#xA;        query = None # Query to search for every search term        &#xD;&#xA;        terms = normalize_query(query_string)&#xD;&#xA;        for term in terms:&#xD;&#xA;            or_query = None # Query to search for a given term in each field&#xD;&#xA;            for field_name in search_fields:&#xD;&#xA;                q = Q(**{""""%s__icontains"""" % field_name: term})&#xD;&#xA;                if or_query is None:&#xD;&#xA;                    or_query = q&#xD;&#xA;                else:&#xD;&#xA;                    or_query = or_query | q&#xD;&#xA;            if query is None:&#xD;&#xA;                query = or_query&#xD;&#xA;            else:&#xD;&#xA;                query = query & or_query&#xD;&#xA;        return query"
