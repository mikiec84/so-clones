"Content"
"    #ifndef LISTITERATORG_H&#xD;&#xA;    #define LISTITERATORG_H&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;    typedef struct IteratorGRep *IteratorG;&#xD;&#xA;    typedef int   (*ElmCompareFp)(void const *e1, void const *e2);&#xD;&#xA;    typedef void *(*ElmNewFp)(void const *e1);&#xD;&#xA;    typedef void  (*ElmFreeFp)(void *e1);&#xD;&#xA;    IteratorG newIterator(ElmCompareFp cmpFp, ElmNewFp newFp, ElmFreeFp freeFp);&#xD;&#xA;    int  add(IteratorG it, void *vp);&#xD;&#xA;    int  hasNext(IteratorG it);&#xD;&#xA;    int  hasPrevious(IteratorG it);&#xD;&#xA;    void *next(IteratorG it);&#xD;&#xA;    void *previous(IteratorG it);&#xD;&#xA;    int  del(IteratorG it);&#xD;&#xA;    int  set(IteratorG it, void *vp);&#xD;&#xA;    IteratorG advance(IteratorG it, int n);&#xD;&#xA;    void reverse(IteratorG it);&#xD;&#xA;    IteratorG find(IteratorG it, int (*fp) (void *vp) );&#xD;&#xA;    int distanceFromStart(IteratorG it);&#xD;&#xA;    int distanceToEnd(IteratorG it);&#xD;&#xA;    void reset(IteratorG it);&#xD;&#xA;    void freeIt(IteratorG it);&#xD;&#xA;    #endif"
