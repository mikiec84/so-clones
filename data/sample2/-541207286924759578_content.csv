"Content"
"    public void Test10Choose5()&#xD;&#xA;    {&#xD;&#xA;       String S;&#xD;&#xA;       int Loop;&#xD;&#xA;       int N = 10;  // Total number of elements in the set.&#xD;&#xA;       int K = 5;  // Total number of elements in each group.&#xD;&#xA;       // Create the bin coeff object required to get all&#xD;&#xA;       // the combos for this N choose K combination.&#xD;&#xA;       BinCoeff<int> BC = new BinCoeff<int>(N, K, false);&#xD;&#xA;       int NumCombos = BinCoeff<int>.GetBinCoeff(N, K);&#xD;&#xA;       // The Kindexes array specifies the indexes for a lexigraphic element.&#xD;&#xA;       int[] KIndexes = new int[K];&#xD;&#xA;       StringBuilder SB = new StringBuilder();&#xD;&#xA;       // Loop thru all the combinations for this N choose K case.&#xD;&#xA;       for (int Combo = 0; Combo < NumCombos; Combo++)&#xD;&#xA;       {&#xD;&#xA;          // Get the k-indexes for this combination.  &#xD;&#xA;          BC.GetKIndexes(Combo, KIndexes);&#xD;&#xA;          // Verify that the Kindexes returned can be used to retrive the&#xD;&#xA;          // rank or lexigraphic order of the KIndexes in the table.&#xD;&#xA;          int Val = BC.GetIndex(true, KIndexes);&#xD;&#xA;          if (Val != Combo)&#xD;&#xA;          {&#xD;&#xA;             S = """"Val of """" + Val.ToString() + """" != Combo Value of """" + Combo.ToString();&#xD;&#xA;             Console.WriteLine(S);&#xD;&#xA;          }&#xD;&#xA;          SB.Remove(0, SB.Length);&#xD;&#xA;          for (Loop = 0; Loop < K; Loop++)&#xD;&#xA;          {&#xD;&#xA;             SB.Append(KIndexes[Loop].ToString());&#xD;&#xA;             if (Loop < K - 1)&#xD;&#xA;                SB.Append("""" """");&#xD;&#xA;          }&#xD;&#xA;          S = """"KIndexes = """" + SB.ToString();&#xD;&#xA;          Console.WriteLine(S);&#xD;&#xA;       }&#xD;&#xA;    }"
