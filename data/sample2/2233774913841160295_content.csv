"Content"
"    import java.awt.*;&#xD;&#xA;    import java.awt.event.*;							// #1&#xD;&#xA;    import javax.swing.*;   &#xD;&#xA;    &#xD;&#xA;    /******************************************************************************&#xD;&#xA;     * &#xD;&#xA;     * KeyListenerDemo.java&#xD;&#xA;     * Demonstrates getting keyboard input using the KeyListener interface.&#xD;&#xA;     * &#xD;&#xA;     * Program 18: Extend this program by adding a few more keystroke commands:&#xD;&#xA;     *		z     (VK_Z) 	- Cause the ball to jump to a random new location.&#xD;&#xA;     *		s     (VK_S) 	- Make the ball smaller - multiply its diameter 1/2.&#xD;&#xA;     *		b     (VK_B)	- Make the ball bigger - multiply its diameter by 2.&#xD;&#xA;     *		c     (VK_C) 	- Change the color (in any way you'd like).&#xD;&#xA;     *&#xD;&#xA;     *	In addition, modify the program to ensure the following:&#xD;&#xA;     *	- The ball goes all the way to the edge of the screen but stays&#xD;&#xA;     *			completely on the screen. &#xD;&#xA;     *	- If a doubled diameter doesn't fit, make it as large as possible.&#xD;&#xA;     *  - Be sure the ball never completely disappears.&#xD;&#xA;     * &#xD;&#xA;     *****************************************************************************/&#xD;&#xA;    public class KeyListenerDemo extends JFrame&#xD;&#xA;    						implements KeyListener		// #2&#xD;&#xA;    {&#xD;&#xA;    	// Class Scope Finals&#xD;&#xA;    	private static final int SCREEN_WIDTH = 1000;&#xD;&#xA;    	private static final int SCREEN_HEIGHT = 800;&#xD;&#xA;    	private static final int START_RADIUS = 25;&#xD;&#xA;    	private static final int START_X = 100;&#xD;&#xA;    	private static final int START_Y = 100;&#xD;&#xA;    	private static final int STEP_SIZE = 10;&#xD;&#xA;    	&#xD;&#xA;    	// Class Scope Variables&#xD;&#xA;    	private static int x = START_X;				// x at center of the ball&#xD;&#xA;    	private static int y = START_Y;				// y at center of the ball&#xD;&#xA;    	private static int radius = START_RADIUS;	// radius of the ball&#xD;&#xA;    	&#xD;&#xA;    	// Methods&#xD;&#xA;    	/**&#xD;&#xA;    	 * Create the window and register this as a KeyListener&#xD;&#xA;    	 * &#xD;&#xA;    	 * @param args&#xD;&#xA;    	 */&#xD;&#xA;    	public static void main (String[] args)&#xD;&#xA;    	{&#xD;&#xA;    		// Set up the JFrame window.&#xD;&#xA;    		KeyListenerDemo gp = new KeyListenerDemo();&#xD;&#xA;    		gp.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);&#xD;&#xA;    		gp.setVisible(true);&#xD;&#xA;    		&#xD;&#xA;    		gp.addKeyListener(gp);							// #3&#xD;&#xA;    		// If this class had a constructor and you moved this line into&#xD;&#xA;    		//   that constructor it could not refer to gp since that variable&#xD;&#xA;    		//   is local to this method.  Instead you would write::&#xD;&#xA;    		// addKeyListener(this);&#xD;&#xA;    	}&#xD;&#xA;    	&#xD;&#xA;    	/**&#xD;&#xA;    	 * Called when a key is first pressed&#xD;&#xA;    	 * Required for any KeyListener&#xD;&#xA;    	 * &#xD;&#xA;    	 * @param e		Contains info about the key pressed&#xD;&#xA;    	 */&#xD;&#xA;    	public void keyPressed(KeyEvent e)					// #4A&#xD;&#xA;    	{&#xD;&#xA;    		int keyCode = e.getKeyCode();&#xD;&#xA;    		if (keyCode == KeyEvent.VK_LEFT)&#xD;&#xA;    		{&#xD;&#xA;    			x = x - STEP_SIZE;&#xD;&#xA;    		}&#xD;&#xA;    		else if (keyCode == KeyEvent.VK_RIGHT)&#xD;&#xA;    		{&#xD;&#xA;    			x = x + STEP_SIZE;&#xD;&#xA;    		}&#xD;&#xA;    		else if (keyCode == KeyEvent.VK_UP)&#xD;&#xA;    		{&#xD;&#xA;    			y = y - STEP_SIZE;&#xD;&#xA;    		}&#xD;&#xA;    		else if (keyCode == KeyEvent.VK_DOWN)&#xD;&#xA;    		{&#xD;&#xA;    			y = y + STEP_SIZE;&#xD;&#xA;    		}&#xD;&#xA;    		repaint();&#xD;&#xA;    	}&#xD;&#xA;    	&#xD;&#xA;    	/**&#xD;&#xA;    	 * Called when typing of a key is completed&#xD;&#xA;    	 * Required for any KeyListener&#xD;&#xA;    	 * &#xD;&#xA;    	 * @param e		Contains info about the key typed&#xD;&#xA;    	 */&#xD;&#xA;    	public void keyTyped(KeyEvent e)					// #4B&#xD;&#xA;    	{&#xD;&#xA;    	}&#xD;&#xA;    	&#xD;&#xA;    	/**&#xD;&#xA;    	 * Called when a key is released&#xD;&#xA;    	 * Required for any KeyListener&#xD;&#xA;    	 * &#xD;&#xA;    	 * @param e		Contains info about the key released&#xD;&#xA;    	 */&#xD;&#xA;    	public void keyReleased(KeyEvent e)					// #4C&#xD;&#xA;    	{&#xD;&#xA;    	}&#xD;&#xA;    	&#xD;&#xA;    	/**&#xD;&#xA;    	 * paint - draw the figure&#xD;&#xA;    	 * &#xD;&#xA;    	 * @param g		Graphics object to draw in&#xD;&#xA;    	 */&#xD;&#xA;    	public void paint(Graphics g)&#xD;&#xA;    	{&#xD;&#xA;    		g.setColor(Color.white);&#xD;&#xA;    		g.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);&#xD;&#xA;    		&#xD;&#xA;    		g.setColor(Color.blue);&#xD;&#xA;    		g.fillOval(x - radius, y - radius, 2 * radius, 2 * radius);&#xD;&#xA;    	}&#xD;&#xA;    }&#xD;&#xA;	&#xD;&#xA;	"
