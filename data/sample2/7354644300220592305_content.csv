"Content"
"	public static class ConnectionTools&#xD;&#xA;	{&#xD;&#xA;		// all params are optional&#xD;&#xA;		public static void ChangeDatabase(&#xD;&#xA;			this DbContext source,&#xD;&#xA;			string initialCatalog = """""""",&#xD;&#xA;			string dataSource = """""""",&#xD;&#xA;			string userId = """""""",&#xD;&#xA;			string password = """""""",&#xD;&#xA;			bool integratedSecuity = true,&#xD;&#xA;			string configConnectionStringName = """""""") &#xD;&#xA;			/* this would be used if the&#xD;&#xA;			*  connectionString name varied from &#xD;&#xA;			*  the base EF class name */&#xD;&#xA;		{&#xD;&#xA;			try&#xD;&#xA;			{&#xD;&#xA;				// use the const name if it's not null, otherwise&#xD;&#xA;				// using the convention of connection string = EF contextname&#xD;&#xA;				// grab the type name and we're done&#xD;&#xA;				var configNameEf = string.IsNullOrEmpty(configConnectionStringName)&#xD;&#xA;					? source.GetType().Name &#xD;&#xA;					: configConnectionStringName;&#xD;&#xA;	 &#xD;&#xA;				// add a reference to System.Configuration&#xD;&#xA;				var entityCnxStringBuilder = new EntityConnectionStringBuilder&#xD;&#xA;					(System.Configuration.ConfigurationManager&#xD;&#xA;						.ConnectionStrings[configNameEf].ConnectionString);&#xD;&#xA;	 &#xD;&#xA;				// init the sqlbuilder with the full EF connectionstring cargo&#xD;&#xA;				var sqlCnxStringBuilder = new SqlConnectionStringBuilder&#xD;&#xA;					(entityCnxStringBuilder.ProviderConnectionString);&#xD;&#xA;	 &#xD;&#xA;				// only populate parameters with values if added&#xD;&#xA;				if (!string.IsNullOrEmpty(initialCatalog))&#xD;&#xA;					sqlCnxStringBuilder.InitialCatalog = initialCatalog;&#xD;&#xA;				if (!string.IsNullOrEmpty(dataSource))&#xD;&#xA;					sqlCnxStringBuilder.DataSource = dataSource;&#xD;&#xA;				if (!string.IsNullOrEmpty(userId))&#xD;&#xA;					sqlCnxStringBuilder.UserID = userId;&#xD;&#xA;				if (!string.IsNullOrEmpty(password))&#xD;&#xA;					sqlCnxStringBuilder.Password = password;&#xD;&#xA;	 &#xD;&#xA;				// set the integrated security status&#xD;&#xA;				sqlCnxStringBuilder.IntegratedSecurity = integratedSecuity;&#xD;&#xA;	 &#xD;&#xA;				// now flip the properties that were changed&#xD;&#xA;				source.Database.Connection.ConnectionString &#xD;&#xA;					= sqlCnxStringBuilder.ConnectionString;&#xD;&#xA;			}&#xD;&#xA;			catch (Exception ex)&#xD;&#xA;			{&#xD;&#xA;				// set log item if required&#xD;&#xA;			}&#xD;&#xA;		}&#xD;&#xA;	}"
