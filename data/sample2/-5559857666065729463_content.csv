"Content"
"	if (!Object.prototype.watch) {&#xD;&#xA;		Object.defineProperty(Object.prototype, """"watch"""", {&#xD;&#xA;			  enumerable: false&#xD;&#xA;			, configurable: true&#xD;&#xA;			, writable: false&#xD;&#xA;			, value: function (prop, handler) {&#xD;&#xA;				var&#xD;&#xA;				  oldval = this[prop]&#xD;&#xA;				, newval = oldval&#xD;&#xA;				, getter = function () {&#xD;&#xA;					return newval;&#xD;&#xA;				}&#xD;&#xA;				, setter = function (val) {&#xD;&#xA;					oldval = newval;&#xD;&#xA;					return newval = handler.call(this, prop, oldval, val);&#xD;&#xA;				}&#xD;&#xA;				;&#xD;&#xA;				&#xD;&#xA;				if (delete this[prop]) { // can't watch constants&#xD;&#xA;					Object.defineProperty(this, prop, {&#xD;&#xA;						  get: getter&#xD;&#xA;						, set: setter&#xD;&#xA;						, enumerable: true&#xD;&#xA;						, configurable: true&#xD;&#xA;					});&#xD;&#xA;				}&#xD;&#xA;			}&#xD;&#xA;		});&#xD;&#xA;	}&#xD;&#xA;	 &#xD;&#xA;	// object.unwatch&#xD;&#xA;	if (!Object.prototype.unwatch) {&#xD;&#xA;		Object.defineProperty(Object.prototype, """"unwatch"""", {&#xD;&#xA;			  enumerable: false&#xD;&#xA;			, configurable: true&#xD;&#xA;			, writable: false&#xD;&#xA;			, value: function (prop) {&#xD;&#xA;				var val = this[prop];&#xD;&#xA;				delete this[prop]; // remove accessors&#xD;&#xA;				this[prop] = val;&#xD;&#xA;			}&#xD;&#xA;		});&#xD;&#xA;	}"
