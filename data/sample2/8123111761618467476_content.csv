"Content"
"        public static DataTable GetDataTabletFromCSVFile(string filePath, bool isHeadings)&#xD;&#xA;        {&#xD;&#xA;            DataTable MethodResult = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                using (TextFieldParser TextFieldParser = new TextFieldParser(filePath))&#xD;&#xA;                {&#xD;&#xA;                    if (isHeadings)&#xD;&#xA;                    {&#xD;&#xA;                        MethodResult = GetDataTableFromTextFieldParser(TextFieldParser);&#xD;&#xA;                    }&#xD;&#xA;                    else&#xD;&#xA;                    {&#xD;&#xA;                        MethodResult = GetDataTableFromTextFieldParserNoHeadings(TextFieldParser);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            catch (Exception ex)&#xD;&#xA;            {&#xD;&#xA;                ex.HandleException();&#xD;&#xA;            }&#xD;&#xA;            return MethodResult;&#xD;&#xA;        }&#xD;&#xA;        public static DataTable GetDataTableFromCsvString(string csvBody, bool isHeadings)&#xD;&#xA;        {&#xD;&#xA;            DataTable MethodResult = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                MemoryStream MemoryStream = new MemoryStream();&#xD;&#xA;                StreamWriter StreamWriter = new StreamWriter(MemoryStream);&#xD;&#xA;                StreamWriter.Write(csvBody);&#xD;&#xA;                StreamWriter.Flush();&#xD;&#xA;                MemoryStream.Position = 0;&#xD;&#xA;                using (TextFieldParser TextFieldParser = new TextFieldParser(MemoryStream))&#xD;&#xA;                {&#xD;&#xA;                    if (isHeadings)&#xD;&#xA;                    {&#xD;&#xA;                        MethodResult = GetDataTableFromTextFieldParser(TextFieldParser);&#xD;&#xA;                    }&#xD;&#xA;                    else&#xD;&#xA;                    {&#xD;&#xA;                        MethodResult = GetDataTableFromTextFieldParserNoHeadings(TextFieldParser);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            catch (Exception ex)&#xD;&#xA;            {&#xD;&#xA;                ex.HandleException();&#xD;&#xA;            }&#xD;&#xA;            return MethodResult;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        public static DataTable GetDataTableFromRemoteCsv(string url, bool isHeadings)&#xD;&#xA;        {&#xD;&#xA;            DataTable MethodResult = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(url);&#xD;&#xA;                HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();&#xD;&#xA;                StreamReader StreamReader = new StreamReader(httpWebResponse.GetResponseStream());&#xD;&#xA;                &#xD;&#xA;                using (TextFieldParser TextFieldParser = new TextFieldParser(StreamReader))&#xD;&#xA;                {&#xD;&#xA;                    if (isHeadings)&#xD;&#xA;                    {&#xD;&#xA;                        MethodResult = GetDataTableFromTextFieldParser(TextFieldParser);&#xD;&#xA;                    }&#xD;&#xA;                    else&#xD;&#xA;                    {&#xD;&#xA;                        MethodResult = GetDataTableFromTextFieldParserNoHeadings(TextFieldParser);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            catch (Exception ex)&#xD;&#xA;            {&#xD;&#xA;                ex.HandleException();&#xD;&#xA;            }&#xD;&#xA;            return MethodResult;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        private static DataTable GetDataTableFromTextFieldParser(TextFieldParser textFieldParser)&#xD;&#xA;        {&#xD;&#xA;            DataTable MethodResult = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                textFieldParser.SetDelimiters(new string[] { """","""" });&#xD;&#xA;                textFieldParser.HasFieldsEnclosedInQuotes = true;&#xD;&#xA;                string[] ColumnFields = textFieldParser.ReadFields();&#xD;&#xA;                DataTable dt = new DataTable();&#xD;&#xA;                foreach (string ColumnField in ColumnFields)&#xD;&#xA;                {&#xD;&#xA;                    DataColumn DataColumn = new DataColumn(ColumnField);&#xD;&#xA;                    DataColumn.AllowDBNull = true;&#xD;&#xA;                    dt.Columns.Add(DataColumn);&#xD;&#xA;                }&#xD;&#xA;                while (!textFieldParser.EndOfData)&#xD;&#xA;                {&#xD;&#xA;                    string[] Fields = textFieldParser.ReadFields();&#xD;&#xA;                    for (int i = 0; i < Fields.Length; i++)&#xD;&#xA;                    {&#xD;&#xA;                        if (Fields[i] == """""""")&#xD;&#xA;                        {&#xD;&#xA;                            Fields[i] = null;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    dt.Rows.Add(Fields);&#xD;&#xA;                }&#xD;&#xA;                MethodResult = dt;&#xD;&#xA;                &#xD;&#xA;            }&#xD;&#xA;            catch (Exception ex)&#xD;&#xA;            {&#xD;&#xA;                ex.HandleException();&#xD;&#xA;            }&#xD;&#xA;            return MethodResult;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        private static DataTable GetDataTableFromTextFieldParserNoHeadings(TextFieldParser textFieldParser)&#xD;&#xA;        {&#xD;&#xA;            DataTable MethodResult = null;&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                textFieldParser.SetDelimiters(new string[] { """","""" });&#xD;&#xA;                textFieldParser.HasFieldsEnclosedInQuotes = true;&#xD;&#xA;                &#xD;&#xA;                bool FirstPass = true;&#xD;&#xA;                DataTable dt = new DataTable();&#xD;&#xA;                while (!textFieldParser.EndOfData)&#xD;&#xA;                {&#xD;&#xA;                    string[] Fields = textFieldParser.ReadFields();&#xD;&#xA;                    if(FirstPass)&#xD;&#xA;                    {&#xD;&#xA;                        for (int i = 0; i < Fields.Length; i++)&#xD;&#xA;                        {&#xD;&#xA;                            DataColumn DataColumn = new DataColumn(""""Column """" + i);&#xD;&#xA;                            DataColumn.AllowDBNull = true;&#xD;&#xA;                            dt.Columns.Add(DataColumn);&#xD;&#xA;                        }&#xD;&#xA;                        FirstPass = false;&#xD;&#xA;                    }&#xD;&#xA;                    for (int i = 0; i < Fields.Length; i++)&#xD;&#xA;                    {&#xD;&#xA;                        if (Fields[i] == """""""")&#xD;&#xA;                        {&#xD;&#xA;                            Fields[i] = null;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    dt.Rows.Add(Fields);&#xD;&#xA;                }&#xD;&#xA;                MethodResult = dt;&#xD;&#xA;            }&#xD;&#xA;            catch (Exception ex)&#xD;&#xA;            {&#xD;&#xA;                ex.HandleException();&#xD;&#xA;            }&#xD;&#xA;            return MethodResult;&#xD;&#xA;        }&#xD;&#xA;        "
