"Content"
"        public class MySingleton {&#xD;&#xA;        private static MySingleton mInstance;&#xD;&#xA;        private RequestQueue mRequestQueue;&#xD;&#xA;        private ImageLoader mImageLoader;&#xD;&#xA;        private static Context mCtx;&#xD;&#xA;        private MySingleton(Context context) {&#xD;&#xA;            mCtx = context;&#xD;&#xA;            mRequestQueue = getRequestQueue();&#xD;&#xA;            mImageLoader = new ImageLoader(mRequestQueue,&#xD;&#xA;                    new ImageLoader.ImageCache() {&#xD;&#xA;                        private final LruCache<String, Bitmap>&#xD;&#xA;                                cache = new LruCache<String, Bitmap>(20);&#xD;&#xA;                        @Override&#xD;&#xA;                        public Bitmap getBitmap(String url) {&#xD;&#xA;                            return cache.get(url);&#xD;&#xA;                        }&#xD;&#xA;                        @Override&#xD;&#xA;                        public void putBitmap(String url, Bitmap bitmap) {&#xD;&#xA;                            cache.put(url, bitmap);&#xD;&#xA;                        }&#xD;&#xA;                    });&#xD;&#xA;        }&#xD;&#xA;        public static synchronized MySingleton getInstance(Context context) {&#xD;&#xA;            if (mInstance == null) {&#xD;&#xA;                mInstance = new MySingleton(context);&#xD;&#xA;            }&#xD;&#xA;            return mInstance;&#xD;&#xA;        }&#xD;&#xA;        public RequestQueue getRequestQueue() {&#xD;&#xA;            if (mRequestQueue == null) {&#xD;&#xA;                // getApplicationContext() is key, it keeps you from leaking the&#xD;&#xA;                // Activity or BroadcastReceiver if someone passes one in.&#xD;&#xA;                mRequestQueue = &#xD;&#xA;               Volley.newRequestQueue(mCtx.getApplicationContext());&#xD;&#xA;            }&#xD;&#xA;            return mRequestQueue;&#xD;&#xA;        }&#xD;&#xA;        public <T> void addToRequestQueue(Request<T> req) {&#xD;&#xA;            getRequestQueue().add(req);&#xD;&#xA;        }&#xD;&#xA;        public ImageLoader getImageLoader() {&#xD;&#xA;            return mImageLoader;&#xD;&#xA;        }&#xD;&#xA;    }"
