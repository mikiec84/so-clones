"Content"
"	/**&#xD;&#xA;	 * Gets the MediaStore video ID of a given file on external storage&#xD;&#xA;	 * @param filePath The path (on external storage) of the file to resolve the ID of&#xD;&#xA;	 * @param contentResolver The content resolver to use to perform the query.&#xD;&#xA;	 * @return the video ID as a long&#xD;&#xA;	 */&#xD;&#xA;	private long getVideoIdFromFilePath(String filePath,&#xD;&#xA;			ContentResolver contentResolver) {&#xD;&#xA;		long videoId;&#xD;&#xA;		Log.d(TAG,""""Loading file """" + filePath);&#xD;&#xA;		&#xD;&#xA;                // This returns us content://media/external/videos/media (or something like that)&#xD;&#xA;                // I pass in """"external"""" because that's the MediaStore's name for the external&#xD;&#xA;                // storage on my device (the other possibility is """"internal"""")&#xD;&#xA;		Uri videosUri = MediaStore.Video.Media.getContentUri(""""external"""");&#xD;&#xA;		&#xD;&#xA;		Log.d(TAG,""""videosUri = """" + videosUri.toString());&#xD;&#xA;		&#xD;&#xA;		String[] projection = {MediaStore.Video.VideoColumns._ID};&#xD;&#xA;		&#xD;&#xA;		// TODO This will break if we have no matching item in the MediaStore.&#xD;&#xA;		Cursor cursor = contentResolver.query(videosUri, projection, MediaStore.Video.VideoColumns.DATA + """" LIKE ?"""", new String[] { filePath }, null);&#xD;&#xA;		cursor.moveToFirst();&#xD;&#xA;		int columnIndex = cursor.getColumnIndex(projection[0]);&#xD;&#xA;		videoId = cursor.getLong(columnIndex);&#xD;&#xA;		&#xD;&#xA;		Log.d(TAG,""""Video ID is """" + videoId);&#xD;&#xA;		cursor.close();&#xD;&#xA;		return videoId;&#xD;&#xA;	}"
