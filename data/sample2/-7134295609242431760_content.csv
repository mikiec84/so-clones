"Content"
"    package org.myorg;&#xD;&#xA;	&#xD;&#xA;	import java.io.IOException;&#xD;&#xA;	import java.util.*;&#xD;&#xA;	&#xD;&#xA;	import org.apache.hadoop.fs.Path;&#xD;&#xA;	import org.apache.hadoop.conf.*;&#xD;&#xA;	import org.apache.hadoop.io.*;&#xD;&#xA;	import org.apache.hadoop.mapred.*;&#xD;&#xA;	import org.apache.hadoop.util.*;&#xD;&#xA;	&#xD;&#xA; 	public class WordCount {&#xD;&#xA; 	&#xD;&#xA;	   public static class Map extends MapReduceBase implements Mapper<LongWritable, Text, Text, IntWritable> {&#xD;&#xA;	     private final static IntWritable one = new IntWritable(1);&#xD;&#xA;	     private Text word = new Text();&#xD;&#xA;	&#xD;&#xA;	     public void map(LongWritable key, Text value, OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {&#xD;&#xA;	       String line = value.toString();&#xD;&#xA; 	       StringTokenizer tokenizer = new StringTokenizer(line);&#xD;&#xA;	       while (tokenizer.hasMoreTokens()) {&#xD;&#xA;	         word.set(tokenizer.nextToken());&#xD;&#xA; 	         output.collect(word, one);&#xD;&#xA; 	       }&#xD;&#xA;	     }&#xD;&#xA; 	   }&#xD;&#xA;	&#xD;&#xA;	   public static class Reduce extends MapReduceBase implements Reducer<Text, IntWritable, Text, IntWritable> {&#xD;&#xA; 	     public void reduce(Text key, Iterator<IntWritable> values, OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {&#xD;&#xA;	       int sum = 0;&#xD;&#xA;	       while (values.hasNext()) {&#xD;&#xA;	         sum += values.next().get();&#xD;&#xA; 	       }&#xD;&#xA; 	       output.collect(key, new IntWritable(sum));&#xD;&#xA; 	     }&#xD;&#xA; 	   }&#xD;&#xA;	&#xD;&#xA;	   public static void main(String[] args) throws Exception {&#xD;&#xA;	     JobConf conf = new JobConf(WordCount.class);&#xD;&#xA;	     conf.setJobName(""""wordcount"""");&#xD;&#xA;	&#xD;&#xA; 	     conf.setOutputKeyClass(Text.class);&#xD;&#xA;	     conf.setOutputValueClass(IntWritable.class);&#xD;&#xA; 	&#xD;&#xA;	     conf.setMapperClass(Map.class);&#xD;&#xA; 	     conf.setCombinerClass(Reduce.class);&#xD;&#xA; 	     conf.setReducerClass(Reduce.class);&#xD;&#xA;	&#xD;&#xA; 	     conf.setInputFormat(TextInputFormat.class);&#xD;&#xA; 	     conf.setOutputFormat(TextOutputFormat.class);&#xD;&#xA; 	&#xD;&#xA;	     FileInputFormat.setInputPaths(conf, new Path(args[0]));&#xD;&#xA; 	     FileOutputFormat.setOutputPath(conf, new Path(args[1]));&#xD;&#xA;	&#xD;&#xA;	     JobClient.runJob(conf);&#xD;&#xA;	   }&#xD;&#xA;	}&#xD;&#xA;	`&#xD;&#xA;	&#xD;&#xA;	"
