"Content"
"    #region Primenumbers&#xD;&#xA;    private void btnPrimStart_Click(object sender, EventArgs e)&#xD;&#xA;    {&#xD;&#xA;    	if (!bgwPrim.IsBusy)&#xD;&#xA;    	{&#xD;&#xA;    		//Prepare ProgressBar and Textbox&#xD;&#xA;    		int temp = (int)nudPrim.Value;&#xD;&#xA;    		pgbPrim.Maximum = temp;&#xD;&#xA;    		tbPrim.Text = """""""";&#xD;&#xA;    		//Start processing&#xD;&#xA;    		bgwPrim.RunWorkerAsync(temp);&#xD;&#xA;    	}&#xD;&#xA;    }&#xD;&#xA;    private void btnPrimCancel_Click(object sender, EventArgs e)&#xD;&#xA;    {&#xD;&#xA;    	if (bgwPrim.IsBusy)&#xD;&#xA;    	{&#xD;&#xA;    		bgwPrim.CancelAsync();&#xD;&#xA;    	}&#xD;&#xA;    }&#xD;&#xA;    private void bgwPrim_DoWork(object sender, DoWorkEventArgs e)&#xD;&#xA;    {&#xD;&#xA;    	int highestToCheck = (int)e.Argument;&#xD;&#xA;    	//Get a reference to the BackgroundWorker running this code&#xD;&#xA;    	//for Progress Updates and Cancelation checking&#xD;&#xA;    	BackgroundWorker thisWorker = (BackgroundWorker)sender;&#xD;&#xA;    	//Create the list that stores the results and is returned by DoWork&#xD;&#xA;    	List<int> Primes = new List<int>();&#xD;&#xA;    	&#xD;&#xA;    	//Check all uneven numbers between 1 and whatever the user choose as upper limit&#xD;&#xA;    	for(int PrimeCandidate=1; PrimeCandidate < highestToCheck; PrimeCandidate+=2)&#xD;&#xA;    	{&#xD;&#xA;    		//Report progress&#xD;&#xA;    		thisWorker.ReportProgress(PrimeCandidate);&#xD;&#xA;    		bool isNoPrime = false;&#xD;&#xA;    		//Check if the Cancelation was requested during the last loop&#xD;&#xA;    		if (thisWorker.CancellationPending)&#xD;&#xA;    		{&#xD;&#xA;    			//Tell the Backgroundworker you are canceling and exit the for-loop&#xD;&#xA;    			e.Cancel = true;&#xD;&#xA;    			break;&#xD;&#xA;    		}&#xD;&#xA;    		//Determin if this is a Prime Number&#xD;&#xA;    		for (int j = 3; j < PrimeCandidate && !isNoPrime; j += 2)&#xD;&#xA;    		{&#xD;&#xA;    			if (PrimeCandidate % j == 0)&#xD;&#xA;    				isNoPrime = true;&#xD;&#xA;    		}&#xD;&#xA;    		if (!isNoPrime)&#xD;&#xA;    			Primes.Add(PrimeCandidate);&#xD;&#xA;    	}&#xD;&#xA;    	//Tell the progress bar you are finished&#xD;&#xA;    	thisWorker.ReportProgress(highestToCheck);&#xD;&#xA;    	//Save Return Value&#xD;&#xA;    	e.Result = Primes.ToArray();&#xD;&#xA;    }&#xD;&#xA;    private void bgwPrim_ProgressChanged(object sender, ProgressChangedEventArgs e)&#xD;&#xA;    {&#xD;&#xA;    	pgbPrim.Value = e.ProgressPercentage;&#xD;&#xA;    }&#xD;&#xA;    private void bgwPrim_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)&#xD;&#xA;    {&#xD;&#xA;    	pgbPrim.Value = pgbPrim.Maximum;&#xD;&#xA;    	this.Refresh();&#xD;&#xA;    	if (!e.Cancelled && e.Error == null)&#xD;&#xA;    	{&#xD;&#xA;    		//Show the Result&#xD;&#xA;    		int[] Primes = (int[])e.Result;&#xD;&#xA;    		StringBuilder sbOutput = new StringBuilder();&#xD;&#xA;    		foreach (int Prim in Primes)&#xD;&#xA;    		{&#xD;&#xA;    			sbOutput.Append(Prim.ToString() + Environment.NewLine);&#xD;&#xA;    		}&#xD;&#xA;    		tbPrim.Text = sbOutput.ToString();&#xD;&#xA;    	}&#xD;&#xA;    	else &#xD;&#xA;    	{&#xD;&#xA;    		tbPrim.Text = """"Operation canceled by user or Exception"""";&#xD;&#xA;    	}&#xD;&#xA;    }&#xD;&#xA;    #endregion"
