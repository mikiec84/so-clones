"Content"
"    import android.app.Activity;&#xD;&#xA;    import android.graphics.Matrix;&#xD;&#xA;    import android.graphics.PointF;&#xD;&#xA;    import android.os.Bundle;&#xD;&#xA;    import android.util.FloatMath;&#xD;&#xA;    import android.util.Log;&#xD;&#xA;    import android.view.MotionEvent;&#xD;&#xA;    import android.view.View;&#xD;&#xA;    import android.view.View.OnTouchListener;&#xD;&#xA;    import android.widget.ImageView;&#xD;&#xA;    &#xD;&#xA;          public class ZoomInZoomOut extends Activity implements OnTouchListener &#xD;&#xA;        {&#xD;&#xA;            private static final String TAG = """"Touch"""";&#xD;&#xA;            @SuppressWarnings(""""unused"""")&#xD;&#xA;            private static final float MIN_ZOOM = 1f,MAX_ZOOM = 1f;&#xD;&#xA;        &#xD;&#xA;            // These matrices will be used to scale points of the image&#xD;&#xA;            Matrix matrix = new Matrix();&#xD;&#xA;            Matrix savedMatrix = new Matrix();&#xD;&#xA;        &#xD;&#xA;            // The 3 states (events) which the user is trying to perform&#xD;&#xA;            static final int NONE = 0;&#xD;&#xA;            static final int DRAG = 1;&#xD;&#xA;            static final int ZOOM = 2;&#xD;&#xA;            int mode = NONE;&#xD;&#xA;        &#xD;&#xA;            // these PointF objects are used to record the point(s) the user is touching&#xD;&#xA;            PointF start = new PointF();&#xD;&#xA;            PointF mid = new PointF();&#xD;&#xA;            float oldDist = 1f;&#xD;&#xA;        &#xD;&#xA;            /** Called when the activity is first created. */&#xD;&#xA;            @Override&#xD;&#xA;            public void onCreate(Bundle savedInstanceState) &#xD;&#xA;            {&#xD;&#xA;                super.onCreate(savedInstanceState);&#xD;&#xA;                setContentView(R.layout.main);&#xD;&#xA;                ImageView view = (ImageView) findViewById(R.id.imageView);&#xD;&#xA;                view.setOnTouchListener(this);&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            @Override&#xD;&#xA;            public boolean onTouch(View v, MotionEvent event) &#xD;&#xA;            {&#xD;&#xA;                ImageView view = (ImageView) v;&#xD;&#xA;                view.setScaleType(ImageView.ScaleType.MATRIX);&#xD;&#xA;                float scale;&#xD;&#xA;        &#xD;&#xA;                dumpEvent(event);&#xD;&#xA;                // Handle touch events here...&#xD;&#xA;        &#xD;&#xA;                switch (event.getAction() & MotionEvent.ACTION_MASK) &#xD;&#xA;                {&#xD;&#xA;                    case MotionEvent.ACTION_DOWN:   // first finger down only&#xD;&#xA;                                                        savedMatrix.set(matrix);&#xD;&#xA;                                                        start.set(event.getX(), event.getY());&#xD;&#xA;                                                        Log.d(TAG, """"mode=DRAG""""); // write to LogCat&#xD;&#xA;                                                        mode = DRAG;&#xD;&#xA;                                                        break;&#xD;&#xA;        &#xD;&#xA;                    case MotionEvent.ACTION_UP: // first finger lifted&#xD;&#xA;        &#xD;&#xA;                    case MotionEvent.ACTION_POINTER_UP: // second finger lifted&#xD;&#xA;        &#xD;&#xA;                                                        mode = NONE;&#xD;&#xA;                                                        Log.d(TAG, """"mode=NONE"""");&#xD;&#xA;                                                        break;&#xD;&#xA;        &#xD;&#xA;                    case MotionEvent.ACTION_POINTER_DOWN: // first and second finger down&#xD;&#xA;        &#xD;&#xA;                                                        oldDist = spacing(event);&#xD;&#xA;                                                        Log.d(TAG, """"oldDist="""" + oldDist);&#xD;&#xA;                                                        if (oldDist > 5f) {&#xD;&#xA;                                                            savedMatrix.set(matrix);&#xD;&#xA;                                                            midPoint(mid, event);&#xD;&#xA;                                                            mode = ZOOM;&#xD;&#xA;                                                            Log.d(TAG, """"mode=ZOOM"""");&#xD;&#xA;                                                        }&#xD;&#xA;                                                        break;&#xD;&#xA;        &#xD;&#xA;                    case MotionEvent.ACTION_MOVE:&#xD;&#xA;        &#xD;&#xA;                                                        if (mode == DRAG) &#xD;&#xA;                                                        { &#xD;&#xA;                                                            matrix.set(savedMatrix);&#xD;&#xA;                                                            matrix.postTranslate(event.getX() - start.x, event.getY() - start.y); // create the transformation in the matrix  of points&#xD;&#xA;                                                        } &#xD;&#xA;                                                        else if (mode == ZOOM) &#xD;&#xA;                                                        { &#xD;&#xA;                                                            // pinch zooming&#xD;&#xA;                                                            float newDist = spacing(event);&#xD;&#xA;                                                            Log.d(TAG, """"newDist="""" + newDist);&#xD;&#xA;                                                            if (newDist > 5f) &#xD;&#xA;                                                            {&#xD;&#xA;                                                                matrix.set(savedMatrix);&#xD;&#xA;                                                                scale = newDist / oldDist; // setting the scaling of the&#xD;&#xA;                                                                                            // matrix...if scale > 1 means&#xD;&#xA;                                                                                            // zoom in...if scale < 1 means&#xD;&#xA;                                                                                            // zoom out&#xD;&#xA;                                                                matrix.postScale(scale, scale, mid.x, mid.y);&#xD;&#xA;                                                            }&#xD;&#xA;                                                        }&#xD;&#xA;                                                        break;&#xD;&#xA;                }&#xD;&#xA;        &#xD;&#xA;                view.setImageMatrix(matrix); // display the transformation on screen&#xD;&#xA;        &#xD;&#xA;                return true; // indicate event was handled&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            /*&#xD;&#xA;             * --------------------------------------------------------------------------&#xD;&#xA;             * Method: spacing Parameters: MotionEvent Returns: float Description:&#xD;&#xA;             * checks the spacing between the two fingers on touch&#xD;&#xA;             * ----------------------------------------------------&#xD;&#xA;             */&#xD;&#xA;        &#xD;&#xA;            private float spacing(MotionEvent event) &#xD;&#xA;            {&#xD;&#xA;                float x = event.getX(0) - event.getX(1);&#xD;&#xA;                float y = event.getY(0) - event.getY(1);&#xD;&#xA;                return FloatMath.sqrt(x * x + y * y);&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            /*&#xD;&#xA;             * --------------------------------------------------------------------------&#xD;&#xA;             * Method: midPoint Parameters: PointF object, MotionEvent Returns: void&#xD;&#xA;             * Description: calculates the midpoint between the two fingers&#xD;&#xA;             * ------------------------------------------------------------&#xD;&#xA;             */&#xD;&#xA;        &#xD;&#xA;            private void midPoint(PointF point, MotionEvent event) &#xD;&#xA;            {&#xD;&#xA;                float x = event.getX(0) + event.getX(1);&#xD;&#xA;                float y = event.getY(0) + event.getY(1);&#xD;&#xA;                point.set(x / 2, y / 2);&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            /** Show an event in the LogCat view, for debugging */&#xD;&#xA;            private void dumpEvent(MotionEvent event) &#xD;&#xA;            {&#xD;&#xA;                String names[] = { """"DOWN"""", """"UP"""", """"MOVE"""", """"CANCEL"""", """"OUTSIDE"""",""""POINTER_DOWN"""", """"POINTER_UP"""", """"7?"""", """"8?"""", """"9?"""" };&#xD;&#xA;                StringBuilder sb = new StringBuilder();&#xD;&#xA;                int action = event.getAction();&#xD;&#xA;                int actionCode = action & MotionEvent.ACTION_MASK;&#xD;&#xA;                sb.append(""""event ACTION_"""").append(names[actionCode]);&#xD;&#xA;        &#xD;&#xA;                if (actionCode == MotionEvent.ACTION_POINTER_DOWN || actionCode == MotionEvent.ACTION_POINTER_UP) &#xD;&#xA;                {&#xD;&#xA;                    sb.append(""""(pid """").append(action >> MotionEvent.ACTION_POINTER_ID_SHIFT);&#xD;&#xA;                    sb.append("""")"""");&#xD;&#xA;                }&#xD;&#xA;        &#xD;&#xA;                sb.append(""""["""");&#xD;&#xA;                for (int i = 0; i < event.getPointerCount(); i++) &#xD;&#xA;                {&#xD;&#xA;                    sb.append(""""#"""").append(i);&#xD;&#xA;                    sb.append(""""(pid """").append(event.getPointerId(i));&#xD;&#xA;                    sb.append("""")="""").append((int) event.getX(i));&#xD;&#xA;                    sb.append("""","""").append((int) event.getY(i));&#xD;&#xA;                    if (i + 1 < event.getPointerCount())&#xD;&#xA;                        sb.append("""";"""");&#xD;&#xA;                }&#xD;&#xA;        &#xD;&#xA;                sb.append(""""]"""");&#xD;&#xA;                Log.d(""""Touch Events ---------"""", sb.toString());&#xD;&#xA;            }&#xD;&#xA;        }"
