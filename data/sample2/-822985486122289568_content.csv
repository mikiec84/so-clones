"Content"
"       class EntityContactListener : public ContactListener&#xD;&#xA;        {&#xD;&#xA;        private:&#xD;&#xA;           GameWorld* _gameWorld;&#xD;&#xA;           EntityContactListener() {}&#xD;&#xA;           &#xD;&#xA;           typedef struct &#xD;&#xA;           {&#xD;&#xA;              Entity* entA;&#xD;&#xA;              Entity* entB;&#xD;&#xA;           } CONTACT_PAIR_T;&#xD;&#xA;           &#xD;&#xA;           vector<CONTACT_PAIR_T> _contactPairs;&#xD;&#xA;           &#xD;&#xA;        public:&#xD;&#xA;           virtual ~EntityContactListener() {}&#xD;&#xA;           &#xD;&#xA;           EntityContactListener(GameWorld* gameWorld) :&#xD;&#xA;              _gameWorld(gameWorld)&#xD;&#xA;           {&#xD;&#xA;              _contactPairs.reserve(128);&#xD;&#xA;           }&#xD;&#xA;           &#xD;&#xA;           void NotifyCollisions()&#xD;&#xA;           {&#xD;&#xA;              Message* msg;&#xD;&#xA;              MessageManager& mm = GameManager::Instance().GetMessageMgr();&#xD;&#xA;              &#xD;&#xA;              for(uint32 idx = 0; idx < _contactPairs.size(); idx++)&#xD;&#xA;              {&#xD;&#xA;                 Entity* entA = _contactPairs[idx].entA;&#xD;&#xA;                 Entity* entB = _contactPairs[idx].entB;&#xD;&#xA;                 &#xD;&#xA;                 //DebugLogCPP(""""Contact Notification %s<->%s"""",entA->ToString().c_str(),entB->ToString().c_str());&#xD;&#xA;                 &#xD;&#xA;                 msg = mm.CreateMessage();&#xD;&#xA;                 msg->Init(entA->GetID(), entB->GetID(), Message::MESSAGE_COLLISION);&#xD;&#xA;                 mm.EnqueueMessge(msg, 0);&#xD;&#xA;                 &#xD;&#xA;                 msg = mm.CreateMessage();&#xD;&#xA;                 msg->Init(entB->GetID(), entA->GetID(), Message::MESSAGE_COLLISION);&#xD;&#xA;                 mm.EnqueueMessge(msg, 0);         &#xD;&#xA;              }&#xD;&#xA;              _contactPairs.clear();&#xD;&#xA;           }&#xD;&#xA;           &#xD;&#xA;           void PreSolve(b2Contact* contact, const b2Manifold* oldManifold)&#xD;&#xA;           {&#xD;&#xA;              &#xD;&#xA;           }&#xD;&#xA;           &#xD;&#xA;           // BEWARE:  You may get multiple calls for the same event.&#xD;&#xA;           void BeginContact(b2Contact* contact)&#xD;&#xA;           {&#xD;&#xA;              Entity* entA = (Entity*)contact->GetFixtureA()->GetBody()->GetUserData();&#xD;&#xA;              Entity* entB = (Entity*)contact->GetFixtureB()->GetBody()->GetUserData();&#xD;&#xA;              //DebugLogCPP(""""Begin Contact %s->%s"""",entA->ToString().c_str(),entB->ToString().c_str());&#xD;&#xA;              if(entA->GetGroupID() == entB->GetGroupID())&#xD;&#xA;              {  // Can't collide if they are in the same group.&#xD;&#xA;                 return;&#xD;&#xA;              }&#xD;&#xA;              &#xD;&#xA;              assert(entA != NULL);&#xD;&#xA;              assert(entB != NULL);&#xD;&#xA;              &#xD;&#xA;              for(uint32 idx = 0; idx < _contactPairs.size(); idx++)&#xD;&#xA;              {&#xD;&#xA;                 if(_contactPairs[idx].entA == entA && _contactPairs[idx].entB == entB)&#xD;&#xA;                    return;&#xD;&#xA;                 // Not sure if this is needed...&#xD;&#xA;                 if(_contactPairs[idx].entA == entB && _contactPairs[idx].entA == entB)&#xD;&#xA;                    return;&#xD;&#xA;              }&#xD;&#xA;              CONTACT_PAIR_T pair;&#xD;&#xA;              pair.entA = entA;&#xD;&#xA;              pair.entB = entB;&#xD;&#xA;              _contactPairs.push_back(pair);&#xD;&#xA;           }&#xD;&#xA;           &#xD;&#xA;           // BEWARE:  You may get multiple calls for the same event.&#xD;&#xA;           void EndContact(b2Contact* contact)&#xD;&#xA;           {&#xD;&#xA;              /*&#xD;&#xA;              Entity* entA = (Entity*)contact->GetFixtureA()->GetBody()->GetUserData();&#xD;&#xA;              Entity* entB = (Entity*)contact->GetFixtureB()->GetBody()->GetUserData();&#xD;&#xA;              DebugLogCPP(""""End Contact %s->%s"""",entA->ToString().c_str(),entB->ToString().c_str());&#xD;&#xA;               */&#xD;&#xA;           }&#xD;&#xA;        };"
