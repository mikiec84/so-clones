"Content"
"        public abstract class CursorRecyclerViewAdapter<VH extends RecyclerView.ViewHolder> extends RecyclerView.Adapter<VH> {&#xD;&#xA;        &#xD;&#xA;            private Context mContext;&#xD;&#xA;        &#xD;&#xA;            private Cursor mCursor;&#xD;&#xA;        &#xD;&#xA;            private boolean mDataValid;&#xD;&#xA;        &#xD;&#xA;            private int mRowIdColumn;&#xD;&#xA;        &#xD;&#xA;            private DataSetObserver mDataSetObserver;&#xD;&#xA;        &#xD;&#xA;            public CursorRecyclerViewAdapter(Context context, Cursor cursor) {&#xD;&#xA;                mContext = context;&#xD;&#xA;                mCursor = cursor;&#xD;&#xA;                mDataValid = cursor != null;&#xD;&#xA;                mRowIdColumn = mDataValid ? mCursor.getColumnIndex(""""_id"""") : -1;&#xD;&#xA;                mDataSetObserver = new NotifyingDataSetObserver();&#xD;&#xA;                if (mCursor != null) {&#xD;&#xA;                    mCursor.registerDataSetObserver(mDataSetObserver);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            public Cursor getCursor() {&#xD;&#xA;                return mCursor;&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            @Override&#xD;&#xA;            public int getItemCount() {&#xD;&#xA;                if (mDataValid && mCursor != null) {&#xD;&#xA;                    return mCursor.getCount();&#xD;&#xA;                }&#xD;&#xA;                return 0;&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            @Override&#xD;&#xA;            public long getItemId(int position) {&#xD;&#xA;                if (mDataValid && mCursor != null && mCursor.moveToPosition(position)) {&#xD;&#xA;                    return mCursor.getLong(mRowIdColumn);&#xD;&#xA;                }&#xD;&#xA;                return 0;&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            @Override&#xD;&#xA;            public void setHasStableIds(boolean hasStableIds) {&#xD;&#xA;                super.setHasStableIds(true);&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            public abstract void onBindViewHolder(VH viewHolder, Cursor cursor);&#xD;&#xA;        &#xD;&#xA;            @Override&#xD;&#xA;            public void onBindViewHolder(VH viewHolder, int position) {&#xD;&#xA;                if (!mDataValid) {&#xD;&#xA;                    throw new IllegalStateException(""""this should only be called when the cursor is valid"""");&#xD;&#xA;                }&#xD;&#xA;                if (!mCursor.moveToPosition(position)) {&#xD;&#xA;                    throw new IllegalStateException(""""couldn't move cursor to position """" + position);&#xD;&#xA;                }&#xD;&#xA;                onBindViewHolder(viewHolder, mCursor);&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            /**&#xD;&#xA;             * Change the underlying cursor to a new cursor. If there is an existing cursor it will be&#xD;&#xA;             * closed.&#xD;&#xA;             */&#xD;&#xA;            public void changeCursor(Cursor cursor) {&#xD;&#xA;                Cursor old = swapCursor(cursor);&#xD;&#xA;                if (old != null) {&#xD;&#xA;                    old.close();&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            /**&#xD;&#xA;             * Swap in a new Cursor, returning the old Cursor.  Unlike&#xD;&#xA;             * {@link #changeCursor(Cursor)}, the returned old Cursor is <em>not</em>&#xD;&#xA;             * closed.&#xD;&#xA;             */&#xD;&#xA;            public Cursor swapCursor(Cursor newCursor) {&#xD;&#xA;                if (newCursor == mCursor) {&#xD;&#xA;                    return null;&#xD;&#xA;                }&#xD;&#xA;                final Cursor oldCursor = mCursor;&#xD;&#xA;                if (oldCursor != null && mDataSetObserver != null) {&#xD;&#xA;                    oldCursor.unregisterDataSetObserver(mDataSetObserver);&#xD;&#xA;                }&#xD;&#xA;                mCursor = newCursor;&#xD;&#xA;                if (mCursor != null) {&#xD;&#xA;                    if (mDataSetObserver != null) {&#xD;&#xA;                        mCursor.registerDataSetObserver(mDataSetObserver);&#xD;&#xA;                    }&#xD;&#xA;                    mRowIdColumn = newCursor.getColumnIndexOrThrow(""""_id"""");&#xD;&#xA;                    mDataValid = true;&#xD;&#xA;                    notifyDataSetChanged();&#xD;&#xA;                } else {&#xD;&#xA;                    mRowIdColumn = -1;&#xD;&#xA;                    mDataValid = false;&#xD;&#xA;                    notifyDataSetChanged();&#xD;&#xA;                    //There is no notifyDataSetInvalidated() method in RecyclerView.Adapter&#xD;&#xA;                }&#xD;&#xA;                return oldCursor;&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            private class NotifyingDataSetObserver extends DataSetObserver {&#xD;&#xA;                @Override&#xD;&#xA;                public void onChanged() {&#xD;&#xA;                    super.onChanged();&#xD;&#xA;                    mDataValid = true;&#xD;&#xA;                    notifyDataSetChanged();&#xD;&#xA;                }&#xD;&#xA;        &#xD;&#xA;                @Override&#xD;&#xA;                public void onInvalidated() {&#xD;&#xA;                    super.onInvalidated();&#xD;&#xA;                    mDataValid = false;&#xD;&#xA;                    notifyDataSetChanged();&#xD;&#xA;                    //There is no notifyDataSetInvalidated() method in RecyclerView.Adapter&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;    }"
