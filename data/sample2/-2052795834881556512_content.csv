"Content"
"    public class GPSTracker extends Service implements LocationListener {&#xD;&#xA;	private final Context mContext;&#xD;&#xA;	// flag for GPS status&#xD;&#xA;	boolean isGPSEnabled = false;&#xD;&#xA;	// flag for network status&#xD;&#xA;	boolean isNetworkEnabled = false;&#xD;&#xA;	// flag for GPS status&#xD;&#xA;	boolean canGetLocation = false;&#xD;&#xA;	Location location; // location&#xD;&#xA;	double latitude; // latitude&#xD;&#xA;	double longitude; // longitude&#xD;&#xA;	// The minimum distance to change Updates in meters&#xD;&#xA;	private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10; // 10 meters&#xD;&#xA;	// The minimum time between updates in milliseconds&#xD;&#xA;	private static final long MIN_TIME_BW_UPDATES = 1000 * 60 * 1; // 1 minute&#xD;&#xA;	// Declaring a Location Manager&#xD;&#xA;	protected LocationManager locationManager;&#xD;&#xA;	public GPSTracker(Context context) {&#xD;&#xA;		this.mContext = context;&#xD;&#xA;		getLocation();&#xD;&#xA;	}&#xD;&#xA;	public Location getLocation() {&#xD;&#xA;		try {&#xD;&#xA;			locationManager = (LocationManager) mContext&#xD;&#xA;					.getSystemService(LOCATION_SERVICE);&#xD;&#xA;			// getting GPS status&#xD;&#xA;			isGPSEnabled = locationManager&#xD;&#xA;					.isProviderEnabled(LocationManager.GPS_PROVIDER);&#xD;&#xA;			// getting network status&#xD;&#xA;			isNetworkEnabled = locationManager&#xD;&#xA;					.isProviderEnabled(LocationManager.NETWORK_PROVIDER);&#xD;&#xA;			if (!isGPSEnabled && !isNetworkEnabled) {&#xD;&#xA;				// no network provider is enabled&#xD;&#xA;			} else {&#xD;&#xA;				this.canGetLocation = true;&#xD;&#xA;				// First get location from Network Provider&#xD;&#xA;				if (isNetworkEnabled) {&#xD;&#xA;					locationManager.requestLocationUpdates(&#xD;&#xA;							LocationManager.NETWORK_PROVIDER,&#xD;&#xA;							MIN_TIME_BW_UPDATES,&#xD;&#xA;							MIN_DISTANCE_CHANGE_FOR_UPDATES, this);&#xD;&#xA;					Log.d(""""Network"""", """"Network"""");&#xD;&#xA;					if (locationManager != null) {&#xD;&#xA;						location = locationManager&#xD;&#xA;								.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);&#xD;&#xA;						if (location != null) {&#xD;&#xA;							latitude = location.getLatitude();&#xD;&#xA;							longitude = location.getLongitude();&#xD;&#xA;						}&#xD;&#xA;					}&#xD;&#xA;				}&#xD;&#xA;				// if GPS Enabled get lat/long using GPS Services&#xD;&#xA;				if (isGPSEnabled) {&#xD;&#xA;					if (location == null) {&#xD;&#xA;						locationManager.requestLocationUpdates(&#xD;&#xA;								LocationManager.GPS_PROVIDER,&#xD;&#xA;								MIN_TIME_BW_UPDATES,&#xD;&#xA;								MIN_DISTANCE_CHANGE_FOR_UPDATES, this);&#xD;&#xA;						Log.d(""""GPS Enabled"""", """"GPS Enabled"""");&#xD;&#xA;						if (locationManager != null) {&#xD;&#xA;							location = locationManager&#xD;&#xA;									.getLastKnownLocation(LocationManager.GPS_PROVIDER);&#xD;&#xA;							if (location != null) {&#xD;&#xA;								latitude = location.getLatitude();&#xD;&#xA;								longitude = location.getLongitude();&#xD;&#xA;							}&#xD;&#xA;						}&#xD;&#xA;					}&#xD;&#xA;				}&#xD;&#xA;			}&#xD;&#xA;		} catch (Exception e) {&#xD;&#xA;			e.printStackTrace();&#xD;&#xA;		}&#xD;&#xA;		return location;&#xD;&#xA;	}&#xD;&#xA;	&#xD;&#xA;	/**&#xD;&#xA;	 * Stop using GPS listener&#xD;&#xA;	 * Calling this function will stop using GPS in your app&#xD;&#xA;	 * */&#xD;&#xA;	public void stopUsingGPS(){&#xD;&#xA;		if(locationManager != null){&#xD;&#xA;			locationManager.removeUpdates(GPSTracker.this);&#xD;&#xA;		}		&#xD;&#xA;	}&#xD;&#xA;	&#xD;&#xA;	/**&#xD;&#xA;	 * Function to get latitude&#xD;&#xA;	 * */&#xD;&#xA;	public double getLatitude(){&#xD;&#xA;		if(location != null){&#xD;&#xA;			latitude = location.getLatitude();&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		// return latitude&#xD;&#xA;		return latitude;&#xD;&#xA;	}&#xD;&#xA;	&#xD;&#xA;	/**&#xD;&#xA;	 * Function to get longitude&#xD;&#xA;	 * */&#xD;&#xA;	public double getLongitude(){&#xD;&#xA;		if(location != null){&#xD;&#xA;			longitude = location.getLongitude();&#xD;&#xA;		}&#xD;&#xA;		&#xD;&#xA;		// return longitude&#xD;&#xA;		return longitude;&#xD;&#xA;	}&#xD;&#xA;	&#xD;&#xA;	/**&#xD;&#xA;	 * Function to check GPS/wifi enabled&#xD;&#xA;	 * @return boolean&#xD;&#xA;	 * */&#xD;&#xA;	public boolean canGetLocation() {&#xD;&#xA;		return this.canGetLocation;&#xD;&#xA;	}&#xD;&#xA;	&#xD;&#xA;	/**&#xD;&#xA;	 * Function to show settings alert dialog&#xD;&#xA;	 * On pressing Settings button will lauch Settings Options&#xD;&#xA;	 * */&#xD;&#xA;	public void showSettingsAlert(){&#xD;&#xA;		AlertDialog.Builder alertDialog = new AlertDialog.Builder(mContext);&#xD;&#xA;   	 &#xD;&#xA;        // Setting Dialog Title&#xD;&#xA;        alertDialog.setTitle(""""GPS is settings"""");&#xD;&#xA; &#xD;&#xA;        // Setting Dialog Message&#xD;&#xA;        alertDialog.setMessage(""""GPS is not enabled. Do you want to go to settings menu?"""");&#xD;&#xA; &#xD;&#xA;        // On pressing Settings button&#xD;&#xA;        alertDialog.setPositiveButton(""""Settings"""", new DialogInterface.OnClickListener() {&#xD;&#xA;            public void onClick(DialogInterface dialog,int which) {&#xD;&#xA;            	Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);&#xD;&#xA;            	mContext.startActivity(intent);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA; &#xD;&#xA;        // on pressing cancel button&#xD;&#xA;        alertDialog.setNegativeButton(""""Cancel"""", new DialogInterface.OnClickListener() {&#xD;&#xA;            public void onClick(DialogInterface dialog, int which) {&#xD;&#xA;            dialog.cancel();&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA; &#xD;&#xA;        // Showing Alert Message&#xD;&#xA;        alertDialog.show();&#xD;&#xA;	}&#xD;&#xA;	@Override&#xD;&#xA;	public void onLocationChanged(Location location) {&#xD;&#xA;	}&#xD;&#xA;	@Override&#xD;&#xA;	public void onProviderDisabled(String provider) {&#xD;&#xA;	}&#xD;&#xA;	@Override&#xD;&#xA;	public void onProviderEnabled(String provider) {&#xD;&#xA;	}&#xD;&#xA;	@Override&#xD;&#xA;	public void onStatusChanged(String provider, int status, Bundle extras) {&#xD;&#xA;	}&#xD;&#xA;	@Override&#xD;&#xA;	public IBinder onBind(Intent arg0) {&#xD;&#xA;		return null;&#xD;&#xA;	}&#xD;&#xA;    }"
