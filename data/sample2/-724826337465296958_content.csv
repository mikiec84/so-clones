"Content"
"    import android.graphics.Bitmap;&#xD;&#xA;    import android.graphics.BitmapFactory;&#xD;&#xA;     public class ImageResizer {&#xD;&#xA;     public static Bitmap decodeSampledBitmapFromFile(String filename,&#xD;&#xA;        int reqWidth, int reqHeight) {&#xD;&#xA;    // First decode with inJustDecodeBounds=true to check dimensions&#xD;&#xA;    final BitmapFactory.Options&#xD;&#xA;            options = new BitmapFactory.Options();&#xD;&#xA;    options.inJustDecodeBounds = true;&#xD;&#xA;    BitmapFactory.decodeFile(filename, options);&#xD;&#xA;    // Calculate inSampleSize&#xD;&#xA;    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);&#xD;&#xA;    // Decode bitmap with inSampleSize set&#xD;&#xA;    options.inJustDecodeBounds = false;&#xD;&#xA;    return BitmapFactory.decodeFile(filename, options);&#xD;&#xA;     }&#xD;&#xA;       public static int calculateInSampleSize(BitmapFactory.Options options,&#xD;&#xA;        int reqWidth, int reqHeight) {&#xD;&#xA;    // BEGIN_INCLUDE (calculate_sample_size)&#xD;&#xA;    // Raw height and width of image&#xD;&#xA;    final int height = options.outHeight;&#xD;&#xA;    final int width = options.outWidth;&#xD;&#xA;    int inSampleSize = 1;&#xD;&#xA;    if (height > reqHeight || width > reqWidth) {&#xD;&#xA;        final int halfHeight = height / 2;&#xD;&#xA;        final int halfWidth = width / 2;&#xD;&#xA;        // Calculate the largest inSampleSize value that is a power of 2 and keeps both&#xD;&#xA;        // height and width larger than the requested height and width.&#xD;&#xA;        while ((halfHeight / inSampleSize) > reqHeight&#xD;&#xA;                && (halfWidth / inSampleSize) > reqWidth) {&#xD;&#xA;            inSampleSize *= 2;&#xD;&#xA;        }&#xD;&#xA;        // This offers some additional logic in case the image has a strange&#xD;&#xA;        // aspect ratio. For example, a panorama may have a much larger&#xD;&#xA;        // width than height. In these cases the total pixels might still&#xD;&#xA;        // end up being too large to fit comfortably in memory, so we should&#xD;&#xA;        // be more aggressive with sample down the image (=larger inSampleSize).&#xD;&#xA;        long totalPixels = width * height / inSampleSize;&#xD;&#xA;        // Anything more than 2x the requested pixels we'll sample down further&#xD;&#xA;        final long totalReqPixelsCap = reqWidth * reqHeight * 2;&#xD;&#xA;        while (totalPixels > totalReqPixelsCap) {&#xD;&#xA;            inSampleSize *= 2;&#xD;&#xA;            totalPixels /= 2;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return inSampleSize;&#xD;&#xA;    // END_INCLUDE (calculate_sample_size)&#xD;&#xA;     }&#xD;&#xA;     }"
