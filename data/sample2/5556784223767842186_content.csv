"Content"
"	Imports System.Runtime.InteropServices&#xD;&#xA;	Public Class KeyboardHook&#xD;&#xA;		<DllImport(""""User32.dll"""", CharSet:=CharSet.Auto, CallingConvention:=CallingConvention.StdCall)> _&#xD;&#xA;		Private Overloads Shared Function SetWindowsHookEx(ByVal idHook As Integer, ByVal HookProc As KBDLLHookProc, ByVal hInstance As IntPtr, ByVal wParam As Integer) As Integer&#xD;&#xA;		End Function&#xD;&#xA;		<DllImport(""""User32.dll"""", CharSet:=CharSet.Auto, CallingConvention:=CallingConvention.StdCall)> _&#xD;&#xA;		Private Overloads Shared Function CallNextHookEx(ByVal idHook As Integer, ByVal nCode As Integer, ByVal wParam As IntPtr, ByVal lParam As IntPtr) As Integer&#xD;&#xA;		End Function&#xD;&#xA;		<DllImport(""""User32.dll"""", CharSet:=CharSet.Auto, CallingConvention:=CallingConvention.StdCall)> _&#xD;&#xA;		Private Overloads Shared Function UnhookWindowsHookEx(ByVal idHook As Integer) As Boolean&#xD;&#xA;		End Function&#xD;&#xA;		<StructLayout(LayoutKind.Sequential)> _&#xD;&#xA;		Private Structure KBDLLHOOKSTRUCT&#xD;&#xA;			Public vkCode As UInt32&#xD;&#xA;			Public scanCode As UInt32&#xD;&#xA;			Public flags As KBDLLHOOKSTRUCTFlags&#xD;&#xA;			Public time As UInt32&#xD;&#xA;			Public dwExtraInfo As UIntPtr&#xD;&#xA;		End Structure&#xD;&#xA;		<Flags()> _&#xD;&#xA;		Private Enum KBDLLHOOKSTRUCTFlags As UInt32&#xD;&#xA;			LLKHF_EXTENDED = &H1&#xD;&#xA;			LLKHF_INJECTED = &H10&#xD;&#xA;			LLKHF_ALTDOWN = &H20&#xD;&#xA;			LLKHF_UP = &H80&#xD;&#xA;		End Enum&#xD;&#xA;		Public Shared Event KeyDown(ByVal Key As Keys)&#xD;&#xA;		Public Shared Event KeyUp(ByVal Key As Keys)&#xD;&#xA;		Private Const WH_KEYBOARD_LL As Integer = 13&#xD;&#xA;		Private Const HC_ACTION As Integer = 0&#xD;&#xA;		Private Const WM_KEYDOWN = &H100&#xD;&#xA;		Private Const WM_KEYUP = &H101&#xD;&#xA;		Private Const WM_SYSKEYDOWN = &H104&#xD;&#xA;		Private Const WM_SYSKEYUP = &H105&#xD;&#xA;		Private Delegate Function KBDLLHookProc(ByVal nCode As Integer, ByVal wParam As IntPtr, ByVal lParam As IntPtr) As Integer&#xD;&#xA;		Private KBDLLHookProcDelegate As KBDLLHookProc = New KBDLLHookProc(AddressOf KeyboardProc)&#xD;&#xA;		Private HHookID As IntPtr = IntPtr.Zero&#xD;&#xA;		Private Function KeyboardProc(ByVal nCode As Integer, ByVal wParam As IntPtr, ByVal lParam As IntPtr) As Integer&#xD;&#xA;			If (nCode = HC_ACTION) Then&#xD;&#xA;				Dim struct As KBDLLHOOKSTRUCT&#xD;&#xA;				Select Case wParam&#xD;&#xA;					Case WM_KEYDOWN, WM_SYSKEYDOWN&#xD;&#xA;						RaiseEvent KeyDown(CType(CType(Marshal.PtrToStructure(lParam, struct.GetType()), KBDLLHOOKSTRUCT).vkCode, Keys))&#xD;&#xA;					Case WM_KEYUP, WM_SYSKEYUP&#xD;&#xA;						RaiseEvent KeyUp(CType(CType(Marshal.PtrToStructure(lParam, struct.GetType()), KBDLLHOOKSTRUCT).vkCode, Keys))&#xD;&#xA;				End Select&#xD;&#xA;			End If&#xD;&#xA;			Return CallNextHookEx(IntPtr.Zero, nCode, wParam, lParam)&#xD;&#xA;		End Function&#xD;&#xA;		Public Sub New()&#xD;&#xA;			HHookID = SetWindowsHookEx(WH_KEYBOARD_LL, KBDLLHookProcDelegate, System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Assembly.GetExecutingAssembly.GetModules()(0)).ToInt32, 0)&#xD;&#xA;			If HHookID = IntPtr.Zero Then&#xD;&#xA;				Throw New Exception(""""Could not set keyboard hook"""")&#xD;&#xA;			End If&#xD;&#xA;		End Sub&#xD;&#xA;		Protected Overrides Sub Finalize()&#xD;&#xA;			If Not HHookID = IntPtr.Zero Then&#xD;&#xA;				UnhookWindowsHookEx(HHookID)&#xD;&#xA;			End If&#xD;&#xA;			MyBase.Finalize()&#xD;&#xA;		End Sub&#xD;&#xA;	End Class"
