"Content"
"     public String compressImage(String imageUri) {&#xD;&#xA;     &#xD;&#xA;            String filePath = getRealPathFromURI(imageUri);&#xD;&#xA;            Bitmap scaledBitmap = null;&#xD;&#xA;     &#xD;&#xA;            BitmapFactory.Options options = new BitmapFactory.Options();&#xD;&#xA;     &#xD;&#xA;           //      by setting this field as true, the actual bitmap pixels are not loaded in the memory.                                                                                                                      Just the bounds are loaded. If&#xD;&#xA;    //      you try the use the bitmap here, you will get null.&#xD;&#xA;            options.inJustDecodeBounds = true;&#xD;&#xA;            Bitmap bmp = BitmapFactory.decodeFile(filePath, options);&#xD;&#xA;     &#xD;&#xA;            int actualHeight = options.outHeight;&#xD;&#xA;            int actualWidth = options.outWidth;&#xD;&#xA;     &#xD;&#xA;    //      max Height and width values of the compressed image is taken as 816x612&#xD;&#xA;     &#xD;&#xA;            float maxHeight = 816.0f;&#xD;&#xA;            float maxWidth = 612.0f;&#xD;&#xA;            float imgRatio = actualWidth / actualHeight;&#xD;&#xA;            float maxRatio = maxWidth / maxHeight;&#xD;&#xA;     &#xD;&#xA;    //      width and height values are set maintaining the aspect ratio of the image&#xD;&#xA;     &#xD;&#xA;            if (actualHeight > maxHeight || actualWidth > maxWidth) {&#xD;&#xA;                if (imgRatio < maxRatio) {               imgRatio = maxHeight / actualHeight;                actualWidth = (int) (imgRatio * actualWidth);               actualHeight = (int) maxHeight;             } else if (imgRatio > maxRatio) {&#xD;&#xA;                    imgRatio = maxWidth / actualWidth;&#xD;&#xA;                    actualHeight = (int) (imgRatio * actualHeight);&#xD;&#xA;                    actualWidth = (int) maxWidth;&#xD;&#xA;                } else {&#xD;&#xA;                    actualHeight = (int) maxHeight;&#xD;&#xA;                    actualWidth = (int) maxWidth;&#xD;&#xA;     &#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;     &#xD;&#xA;    //      setting inSampleSize value allows to load a scaled down version of the original image&#xD;&#xA;     &#xD;&#xA;            options.inSampleSize = calculateInSampleSize(options, actualWidth, actualHeight);&#xD;&#xA;     &#xD;&#xA;    //      inJustDecodeBounds set to false to load the actual bitmap&#xD;&#xA;            options.inJustDecodeBounds = false;&#xD;&#xA;     &#xD;&#xA;    //      this options allow android to claim the bitmap memory if it runs low on memory&#xD;&#xA;            options.inPurgeable = true;&#xD;&#xA;            options.inInputShareable = true;&#xD;&#xA;            options.inTempStorage = new byte[16 * 1024];&#xD;&#xA;     &#xD;&#xA;            try {&#xD;&#xA;    //          load the bitmap from its path&#xD;&#xA;                bmp = BitmapFactory.decodeFile(filePath, options);&#xD;&#xA;            } catch (OutOfMemoryError exception) {&#xD;&#xA;                exception.printStackTrace();&#xD;&#xA;     &#xD;&#xA;            }&#xD;&#xA;            try {&#xD;&#xA;                scaledBitmap = Bitmap.createBitmap(actualWidth, actualHeight,Bitmap.Config.ARGB_8888);&#xD;&#xA;            } catch (OutOfMemoryError exception) {&#xD;&#xA;                exception.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;     &#xD;&#xA;            float ratioX = actualWidth / (float) options.outWidth;&#xD;&#xA;            float ratioY = actualHeight / (float) options.outHeight;&#xD;&#xA;            float middleX = actualWidth / 2.0f;&#xD;&#xA;            float middleY = actualHeight / 2.0f;&#xD;&#xA;     &#xD;&#xA;            Matrix scaleMatrix = new Matrix();&#xD;&#xA;            scaleMatrix.setScale(ratioX, ratioY, middleX, middleY);&#xD;&#xA;     &#xD;&#xA;            Canvas canvas = new Canvas(scaledBitmap);&#xD;&#xA;            canvas.setMatrix(scaleMatrix);&#xD;&#xA;            canvas.drawBitmap(bmp, middleX - bmp.getWidth() / 2, middleY - bmp.getHeight() / 2, new Paint(Paint.FILTER_BITMAP_FLAG));&#xD;&#xA;     &#xD;&#xA;    //      check the rotation of the image and display it properly&#xD;&#xA;            ExifInterface exif;&#xD;&#xA;            try {&#xD;&#xA;                exif = new ExifInterface(filePath);&#xD;&#xA;     &#xD;&#xA;                int orientation = exif.getAttributeInt(&#xD;&#xA;                        ExifInterface.TAG_ORIENTATION, 0);&#xD;&#xA;                Log.d(""""EXIF"""", """"Exif: """" + orientation);&#xD;&#xA;                Matrix matrix = new Matrix();&#xD;&#xA;                if (orientation == 6) {&#xD;&#xA;                    matrix.postRotate(90);&#xD;&#xA;                    Log.d(""""EXIF"""", """"Exif: """" + orientation);&#xD;&#xA;                } else if (orientation == 3) {&#xD;&#xA;                    matrix.postRotate(180);&#xD;&#xA;                    Log.d(""""EXIF"""", """"Exif: """" + orientation);&#xD;&#xA;                } else if (orientation == 8) {&#xD;&#xA;                    matrix.postRotate(270);&#xD;&#xA;                    Log.d(""""EXIF"""", """"Exif: """" + orientation);&#xD;&#xA;                }&#xD;&#xA;                scaledBitmap = Bitmap.createBitmap(scaledBitmap, 0, 0,&#xD;&#xA;                        scaledBitmap.getWidth(), scaledBitmap.getHeight(), matrix,&#xD;&#xA;                        true);&#xD;&#xA;            } catch (IOException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;     &#xD;&#xA;            FileOutputStream out = null;&#xD;&#xA;            String filename = getFilename();&#xD;&#xA;            try {&#xD;&#xA;                out = new FileOutputStream(filename);&#xD;&#xA;     &#xD;&#xA;    //          write the compressed bitmap at the destination specified by filename.&#xD;&#xA;                scaledBitmap.compress(Bitmap.CompressFormat.JPEG, 80, out);&#xD;&#xA;     &#xD;&#xA;            } catch (FileNotFoundException e) {&#xD;&#xA;                e.printStackTrace();&#xD;&#xA;            }&#xD;&#xA;     &#xD;&#xA;            return filename;&#xD;&#xA;     &#xD;&#xA;        }"
