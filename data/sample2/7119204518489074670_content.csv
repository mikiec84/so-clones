"Content"
"    package com.facebook.android;&#xD;&#xA;    &#xD;&#xA;    import java.io.IOException;&#xD;&#xA;    import java.io.UnsupportedEncodingException;&#xD;&#xA;    import java.net.URLEncoder;&#xD;&#xA;    import java.security.MessageDigest;&#xD;&#xA;    import java.security.NoSuchAlgorithmException;&#xD;&#xA;    import java.util.GregorianCalendar;&#xD;&#xA;    import java.util.HashMap;&#xD;&#xA;    import java.util.Map;&#xD;&#xA;    &#xD;&#xA;    import org.apache.harmony.javax.security.auth.callback.CallbackHandler;&#xD;&#xA;    import org.apache.harmony.javax.security.sasl.Sasl;&#xD;&#xA;    import org.jivesoftware.smack.SASLAuthentication;&#xD;&#xA;    import org.jivesoftware.smack.XMPPException;&#xD;&#xA;    import org.jivesoftware.smack.sasl.SASLMechanism;&#xD;&#xA;    import org.jivesoftware.smack.util.Base64;&#xD;&#xA;    &#xD;&#xA;    import android.util.Log;&#xD;&#xA;    &#xD;&#xA;    public class SASLXFacebookPlatformMechanism extends SASLMechanism {&#xD;&#xA;    &#xD;&#xA;        private static final String NAME              = """"X-FACEBOOK-PLATFORM"""";&#xD;&#xA;    &#xD;&#xA;        private String              apiKey            = """""""";&#xD;&#xA;        private String              accessToken        = """""""";&#xD;&#xA;    &#xD;&#xA;        /**&#xD;&#xA;         * Constructor.&#xD;&#xA;         */&#xD;&#xA;        public SASLXFacebookPlatformMechanism(SASLAuthentication saslAuthentication) {&#xD;&#xA;            super(saslAuthentication);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        protected void authenticate() throws IOException, XMPPException {&#xD;&#xA;            getSASLAuthentication().send(new AuthMechanism(NAME, """"""""));&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void authenticate(String apiKey, String host, String accessToken) throws IOException, XMPPException {&#xD;&#xA;            if (apiKey == null || accessToken == null) {&#xD;&#xA;                throw new IllegalArgumentException(""""Invalid parameters"""");&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            this.apiKey = apiKey;&#xD;&#xA;            this.accessToken = accessToken;&#xD;&#xA;            this.hostname = host;&#xD;&#xA;    &#xD;&#xA;            String[] mechanisms = { """"DIGEST-MD5"""" };&#xD;&#xA;            Map<String, String> props = new HashMap<String, String>();&#xD;&#xA;            this.sc = Sasl.createSaslClient(mechanisms, null, """"xmpp"""", host, props, this);&#xD;&#xA;            authenticate();&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void authenticate(String username, String host, CallbackHandler cbh) throws IOException, XMPPException {&#xD;&#xA;            String[] mechanisms = { """"DIGEST-MD5"""" };&#xD;&#xA;            Map<String, String> props = new HashMap<String, String>();&#xD;&#xA;            this.sc = Sasl.createSaslClient(mechanisms, null, """"xmpp"""", host, props, cbh);&#xD;&#xA;            authenticate();&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        protected String getName() {&#xD;&#xA;            return NAME;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        @Override&#xD;&#xA;        public void challengeReceived(String challenge) throws IOException {&#xD;&#xA;            byte[] response = null;&#xD;&#xA;    &#xD;&#xA;            if (challenge != null) {&#xD;&#xA;                String decodedChallenge = new String(Base64.decode(challenge));&#xD;&#xA;                Map<String, String> parameters = getQueryMap(decodedChallenge);&#xD;&#xA;    &#xD;&#xA;                String version = """"1.0"""";&#xD;&#xA;                String nonce = parameters.get(""""nonce"""");&#xD;&#xA;                String method = parameters.get(""""method"""");&#xD;&#xA;    &#xD;&#xA;                String composedResponse =&#xD;&#xA;                    """"method="""" + URLEncoder.encode(method, """"utf-8"""") +&#xD;&#xA;                            """"&nonce="""" + URLEncoder.encode(nonce, """"utf-8"""") +&#xD;&#xA;                            """"&access_token="""" + URLEncoder.encode(accessToken, """"utf-8"""") +&#xD;&#xA;                            """"&api_key="""" + URLEncoder.encode(apiKey, """"utf-8"""") +&#xD;&#xA;                            """"&call_id=0"""" +&#xD;&#xA;                            """"&v="""" + URLEncoder.encode(version, """"utf-8"""");&#xD;&#xA;                response = composedResponse.getBytes();&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            String authenticationText = """""""";&#xD;&#xA;    &#xD;&#xA;            if (response != null) {&#xD;&#xA;                authenticationText = Base64.encodeBytes(response);&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            // Send the authentication to the server&#xD;&#xA;            getSASLAuthentication().send(new Response(authenticationText));&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private Map<String, String> getQueryMap(String query) {&#xD;&#xA;            Map<String, String> map = new HashMap<String, String>();&#xD;&#xA;            String[] params = query.split(""""\\&"""");&#xD;&#xA;    &#xD;&#xA;            for (String param : params) {&#xD;&#xA;                String[] fields = param.split(""""="""", 2);&#xD;&#xA;                map.put(fields[0], (fields.length > 1 ? fields[1] : null));&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            return map;&#xD;&#xA;        }&#xD;&#xA;    }"
