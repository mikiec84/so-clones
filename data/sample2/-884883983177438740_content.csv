"Content"
"    <?php&#xD;&#xA;        //The function returns the no. of business days between two dates and it skips the holidays&#xD;&#xA;        function getWorkingDays($startDate,$endDate,$holidays){&#xD;&#xA;            // do strtotime calculations just once&#xD;&#xA;            $endDate = strtotime($endDate);&#xD;&#xA;            $startDate = strtotime($startDate);&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;            //The total number of days between the two dates. We compute the no. of seconds and divide it to 60*60*24&#xD;&#xA;            //We add one to inlude both dates in the interval.&#xD;&#xA;            $days = ($endDate - $startDate) / 86400 + 1;&#xD;&#xA;        &#xD;&#xA;            $no_full_weeks = floor($days / 7);&#xD;&#xA;            $no_remaining_days = fmod($days, 7);&#xD;&#xA;        &#xD;&#xA;            //It will return 1 if it's Monday,.. ,7 for Sunday&#xD;&#xA;            $the_first_day_of_week = date(""""N"""", $startDate);&#xD;&#xA;            $the_last_day_of_week = date(""""N"""", $endDate);&#xD;&#xA;        &#xD;&#xA;            //---->The two can be equal in leap years when february has 29 days, the equal sign is added here&#xD;&#xA;            //In the first case the whole interval is within a week, in the second case the interval falls in two weeks.&#xD;&#xA;            if ($the_first_day_of_week <= $the_last_day_of_week) {&#xD;&#xA;                if ($the_first_day_of_week <= 6 && 6 <= $the_last_day_of_week) $no_remaining_days--;&#xD;&#xA;                if ($the_first_day_of_week <= 7 && 7 <= $the_last_day_of_week) $no_remaining_days--;&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;                // (edit by Tokes to fix an edge case where the start day was a Sunday&#xD;&#xA;                // and the end day was NOT a Saturday)&#xD;&#xA;        &#xD;&#xA;                // the day of the week for start is later than the day of the week for end&#xD;&#xA;                if ($the_first_day_of_week == 7) {&#xD;&#xA;                    // if the start date is a Sunday, then we definitely subtract 1 day&#xD;&#xA;                    $no_remaining_days--;&#xD;&#xA;        &#xD;&#xA;                    if ($the_last_day_of_week == 6) {&#xD;&#xA;                        // if the end date is a Saturday, then we subtract another day&#xD;&#xA;                        $no_remaining_days--;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                else {&#xD;&#xA;                    // the start date was a Saturday (or earlier), and the end date was (Mon..Fri)&#xD;&#xA;                    // so we skip an entire weekend and subtract 2 days&#xD;&#xA;                    $no_remaining_days -= 2;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            //The no. of business days is: (number of weeks between the two dates) * (5 working days) + the remainder&#xD;&#xA;        //---->february in none leap years gave a remainder of 0 but still calculated weekends between first and last day, this is one way to fix it&#xD;&#xA;           $workingDays = $no_full_weeks * 5;&#xD;&#xA;            if ($no_remaining_days > 0 )&#xD;&#xA;            {&#xD;&#xA;              $workingDays += $no_remaining_days;&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            //We subtract the holidays&#xD;&#xA;            foreach($holidays as $holiday){&#xD;&#xA;                $time_stamp=strtotime($holiday);&#xD;&#xA;                //If the holiday doesn't fall in weekend&#xD;&#xA;                if ($startDate <= $time_stamp && $time_stamp <= $endDate && date(""""N"""",$time_stamp) != 6 && date(""""N"""",$time_stamp) != 7)&#xD;&#xA;                    $workingDays--;&#xD;&#xA;            }&#xD;&#xA;        &#xD;&#xA;            return $workingDays;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        //Example:&#xD;&#xA;        &#xD;&#xA;        $holidays=array(""""2008-12-25"""",""""2008-12-26"""",""""2009-01-01"""");&#xD;&#xA;        &#xD;&#xA;        echo getWorkingDays(""""2008-12-22"""",""""2009-01-02"""",$holidays)&#xD;&#xA;        // => will return 7&#xD;&#xA;        ?>"
