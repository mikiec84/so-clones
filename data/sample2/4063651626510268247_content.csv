"Content"
"    /// <summary>&#xD;&#xA;    /// Writes the given object instance to an XML file.&#xD;&#xA;    /// <para>Only Public properties and variables will be written to the file. These can be any type though, even other classes.</para>&#xD;&#xA;    /// <para>If there are public properties/variables that you do not want written to the file, decorate them with the [XmlIgnore] attribute.</para>&#xD;&#xA;    /// <para>Object type must have a parameterless constructor.</para>&#xD;&#xA;    /// </summary>&#xD;&#xA;    /// <typeparam name=""""T"""">The type of object being written to the file.</typeparam>&#xD;&#xA;    /// <param name=""""filePath"""">The file path to write the object instance to.</param>&#xD;&#xA;    /// <param name=""""objectToWrite"""">The object instance to write to the file.</param>&#xD;&#xA;    /// <param name=""""append"""">If false the file will be overwritten if it already exists. If true the contents will be appended to the file.</param>&#xD;&#xA;    public static void WriteToXmlFile<T>(string filePath, T objectToWrite, bool append = false) where T : new()&#xD;&#xA;    {&#xD;&#xA;    	TextWriter writer = null;&#xD;&#xA;    	try&#xD;&#xA;    	{&#xD;&#xA;    		var serializer = new XmlSerializer(typeof(T));&#xD;&#xA;    		writer = new StreamWriter(filePath, append);&#xD;&#xA;    		serializer.Serialize(writer, objectToWrite);&#xD;&#xA;    	}&#xD;&#xA;    	finally&#xD;&#xA;    	{&#xD;&#xA;    		if (writer != null)&#xD;&#xA;    			writer.Close();&#xD;&#xA;    	}&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    /// <summary>&#xD;&#xA;    /// Reads an object instance from an XML file.&#xD;&#xA;    /// <para>Object type must have a parameterless constructor.</para>&#xD;&#xA;    /// </summary>&#xD;&#xA;    /// <typeparam name=""""T"""">The type of object to read from the file.</typeparam>&#xD;&#xA;    /// <param name=""""filePath"""">The file path to read the object instance from.</param>&#xD;&#xA;    /// <returns>Returns a new instance of the object read from the XML file.</returns>&#xD;&#xA;    public static T ReadFromXmlFile<T>(string filePath) where T : new()&#xD;&#xA;    {&#xD;&#xA;    	TextReader reader = null;&#xD;&#xA;    	try&#xD;&#xA;    	{&#xD;&#xA;    		var serializer = new XmlSerializer(typeof(T));&#xD;&#xA;    		reader = new StreamReader(filePath);&#xD;&#xA;    		return (T)serializer.Deserialize(reader);&#xD;&#xA;    	}&#xD;&#xA;    	finally&#xD;&#xA;    	{&#xD;&#xA;    		if (reader != null)&#xD;&#xA;    			reader.Close();&#xD;&#xA;    	}&#xD;&#xA;    }"
