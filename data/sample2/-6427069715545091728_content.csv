"Content"
"	import java.text.SimpleDateFormat;&#xD;&#xA;	import java.util.ArrayList;&#xD;&#xA;	import java.util.Date;&#xD;&#xA;	import android.os.Handler;&#xD;&#xA;	import android.widget.TextView;&#xD;&#xA;	/**&#xD;&#xA;	 * The class for creating and refreshing many different fields on different layouts,&#xD;&#xA;	 * that can hold actual time and/or date in different formats &#xD;&#xA;	 * The formats should be as in http://developer.android.com/reference/java/text/SimpleDateFormat.html. &#xD;&#xA;	 * Only present and visible fields are being actualized, so there is no need to clean the clock list after closing an activity&#xD;&#xA;	 * &#xD;&#xA;	 * Examples of use:&#xD;&#xA;	 * &#xD;&#xA;	 * 	    Clock.registerClock((TextView) findViewById(R.id.TimeField), """"HH:mm"""");&#xD;&#xA;	 *      Clock.registerClock((TextView) findViewById(R.id.DateField), """"d.M.yyyy EEE"""");&#xD;&#xA;	 *	    Clock.start(10000L);&#xD;&#xA;	 *&#xD;&#xA;	 * @author Petr Gangnus&#xD;&#xA;	 */&#xD;&#xA;	public final class Clock {&#xD;&#xA;		/**&#xD;&#xA;		 * the handler that works instead of timer and supports UI&#xD;&#xA;		 */&#xD;&#xA;	    static private Handler handler = new Handler();&#xD;&#xA;		/**&#xD;&#xA;		 * the interval of the time refreshing&#xD;&#xA;		 */&#xD;&#xA;	    static private long refreshStep;&#xD;&#xA;	    &#xD;&#xA;	    /**&#xD;&#xA;	     * pairs TextView timer+time/date format&#xD;&#xA;	     */&#xD;&#xA;		private TextView clockFace;&#xD;&#xA;		private String format;&#xD;&#xA;		private Clock(TextView clockFace, String format){&#xD;&#xA;			this.clockFace=clockFace;&#xD;&#xA;			this.format=format;&#xD;&#xA;		}&#xD;&#xA;	    // here is the list of views containing the visual timers that should be held actual&#xD;&#xA;	    static private ArrayList<Clock> clocks=new ArrayList<Clock>();&#xD;&#xA;	    /**&#xD;&#xA;	     * fills all timer fields by actual time value, according to their formats.&#xD;&#xA;	     */&#xD;&#xA;	    static private Runnable mUpdateTimeTask = new Runnable() {&#xD;&#xA;		   public void run() {&#xD;&#xA;			   for(Clock clock:clocks){&#xD;&#xA;				   showActualTimeDate(clock);&#xD;&#xA;			   }&#xD;&#xA;		       handler.postDelayed(this,refreshStep);&#xD;&#xA;		   }&#xD;&#xA;		};&#xD;&#xA;		&#xD;&#xA;		//============================================ public members ====================================================================&#xD;&#xA;	    /**&#xD;&#xA;	     * add a clock to the list of updating clocks&#xD;&#xA;	     * @param clockFace - the place where the time or date will be shown &#xD;&#xA;	     * @param format - the format of the time/date &#xD;&#xA;	     * @return&#xD;&#xA;	     */&#xD;&#xA;	    public static boolean registerClock(TextView clockFace, String format){&#xD;&#xA;	    	if (clockFace==null) return false;&#xD;&#xA;	    	if(clocks.contains(clockFace)){&#xD;&#xA;	    		// old clockFace&#xD;&#xA;	    		clocks.get(clocks.indexOf(clockFace)).format=format;&#xD;&#xA;	    	} else {&#xD;&#xA;	    		// new clockFace&#xD;&#xA;	    		clocks.add(new Clock(clockFace, format));&#xD;&#xA;	    	}&#xD;&#xA;	    	return true;&#xD;&#xA;	    }&#xD;&#xA;	    /**&#xD;&#xA;	     * remove a clock from the updating list&#xD;&#xA;	     * @param clockFace&#xD;&#xA;	     * @return&#xD;&#xA;	     */&#xD;&#xA;	    public static boolean unRegisterClock(TextView clockFace){&#xD;&#xA;	    	if (clockFace==null) return false;&#xD;&#xA;	    	if(clocks.contains(clockFace)){&#xD;&#xA;	    		// found clockFace&#xD;&#xA;	    		clocks.remove(clocks.indexOf(clockFace));&#xD;&#xA;	    	} else {&#xD;&#xA;	    		// not found clockFace&#xD;&#xA;	    		return false;&#xD;&#xA;	    	}&#xD;&#xA;	    	return true;&#xD;&#xA;	    }&#xD;&#xA;		/**&#xD;&#xA;		 * put in the """"place"""" the actual date/time in the appropriate """"format""""&#xD;&#xA;		 * @param place&#xD;&#xA;		 * @param format&#xD;&#xA;		 */&#xD;&#xA;		public static void showActualTimeDate(Clock clock){&#xD;&#xA;			if (clock.clockFace==null) return;&#xD;&#xA;			if (clock.clockFace.getVisibility()!=TextView.VISIBLE) return;&#xD;&#xA;		    Date thisDate=new Date();&#xD;&#xA;		    SimpleDateFormat df=new SimpleDateFormat(clock.format);&#xD;&#xA;		    clock.clockFace.setText(df.format(thisDate));&#xD;&#xA;		}&#xD;&#xA;		/**&#xD;&#xA;		 * start the ticking for all clocks&#xD;&#xA;		 * @param step the tick interval&#xD;&#xA;		 */&#xD;&#xA;	    public static void start(long step) { &#xD;&#xA;	        refreshStep=step;&#xD;&#xA;	    	handler.removeCallbacks(mUpdateTimeTask);&#xD;&#xA;	        handler.postDelayed(mUpdateTimeTask, 0);&#xD;&#xA;	    }&#xD;&#xA;	    /**&#xD;&#xA;	     * Stopping ticking all clocks (not removing them)&#xD;&#xA;	     * the calling could be put somewhere in onStop&#xD;&#xA;	     */&#xD;&#xA;	    public static void stop() { &#xD;&#xA;	        handler.removeCallbacks(mUpdateTimeTask);&#xD;&#xA;	    }&#xD;&#xA;	}"
