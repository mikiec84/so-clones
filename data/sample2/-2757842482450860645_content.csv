"Content"
"        public class SequenceEncoder {&#xD;&#xA;        private SeekableByteChannel ch;&#xD;&#xA;        private Picture toEncode;&#xD;&#xA;        private RgbToYuv420 transform;&#xD;&#xA;        private H264Encoder encoder;&#xD;&#xA;        private ArrayList<ByteBuffer> spsList;&#xD;&#xA;        private ArrayList<ByteBuffer> ppsList;&#xD;&#xA;        private CompressedTrack outTrack;&#xD;&#xA;        private ByteBuffer _out;&#xD;&#xA;        private int frameNo;&#xD;&#xA;        private MP4Muxer muxer;&#xD;&#xA;    &#xD;&#xA;        public SequenceEncoder(File out) throws IOException {&#xD;&#xA;            this.ch = NIOUtils.writableFileChannel(out);&#xD;&#xA;    &#xD;&#xA;            // Transform to convert between RGB and YUV&#xD;&#xA;            transform = new RgbToYuv420(0, 0);&#xD;&#xA;    &#xD;&#xA;            // Muxer that will store the encoded frames&#xD;&#xA;            muxer = new MP4Muxer(ch, Brand.MP4);&#xD;&#xA;    &#xD;&#xA;            // Add video track to muxer&#xD;&#xA;            outTrack = muxer.addTrackForCompressed(TrackType.VIDEO, 25);&#xD;&#xA;    &#xD;&#xA;            // Allocate a buffer big enough to hold output frames&#xD;&#xA;            _out = ByteBuffer.allocate(1920 * 1080 * 6);&#xD;&#xA;    &#xD;&#xA;            // Create an instance of encoder&#xD;&#xA;            encoder = new H264Encoder();&#xD;&#xA;    &#xD;&#xA;            // Encoder extra data ( SPS, PPS ) to be stored in a special place of&#xD;&#xA;            // MP4&#xD;&#xA;            spsList = new ArrayList<ByteBuffer>();&#xD;&#xA;            ppsList = new ArrayList<ByteBuffer>();&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public void encodeImage(BufferedImage bi) throws IOException {&#xD;&#xA;            if (toEncode == null) {&#xD;&#xA;                toEncode = Picture.create(bi.getWidth(), bi.getHeight(), ColorSpace.YUV420);&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            // Perform conversion&#xD;&#xA;            for (int i = 0; i < 3; i++)&#xD;&#xA;                Arrays.fill(toEncode.getData()[i], 0);&#xD;&#xA;            transform.transform(AWTUtil.fromBufferedImage(bi), toEncode);&#xD;&#xA;    &#xD;&#xA;            // Encode image into H.264 frame, the result is stored in '_out' buffer&#xD;&#xA;            _out.clear();&#xD;&#xA;            ByteBuffer result = encoder.encodeFrame(_out, toEncode);&#xD;&#xA;    &#xD;&#xA;            // Based on the frame above form correct MP4 packet&#xD;&#xA;            spsList.clear();&#xD;&#xA;            ppsList.clear();&#xD;&#xA;            H264Utils.encodeMOVPacket(result, spsList, ppsList);&#xD;&#xA;    &#xD;&#xA;            // Add packet to video track&#xD;&#xA;            outTrack.addFrame(new MP4Packet(result, frameNo, 25, 1, frameNo, true, null, frameNo, 0));&#xD;&#xA;    &#xD;&#xA;            frameNo++;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public void finish() throws IOException {&#xD;&#xA;            // Push saved SPS/PPS to a special storage in MP4&#xD;&#xA;            outTrack.addSampleEntry(H264Utils.createMOVSampleEntry(spsList, ppsList));&#xD;&#xA;    &#xD;&#xA;            // Write MP4 header and finalize recording&#xD;&#xA;            muxer.writeHeader();&#xD;&#xA;            NIOUtils.closeQuietly(ch);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static void main(String[] args) throws IOException {&#xD;&#xA;            SequenceEncoder encoder = new SequenceEncoder(new File(""""video.mp4""""));&#xD;&#xA;            for (int i = 1; i < 100; i++) {&#xD;&#xA;                BufferedImage bi = ImageIO.read(new File(String.format(""""folder/img%08d.png"""", i)));&#xD;&#xA;                encoder.encodeImage(bi);&#xD;&#xA;            }&#xD;&#xA;            encoder.finish();&#xD;&#xA;        }&#xD;&#xA;    }"
