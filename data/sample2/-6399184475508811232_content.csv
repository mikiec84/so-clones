"Content"
"        public class CalendarAdapter extends BaseAdapter {&#xD;&#xA;	private Context mContext;&#xD;&#xA;	private java.util.Calendar month;&#xD;&#xA;	public GregorianCalendar pmonth; // calendar instance for previous month&#xD;&#xA;	/**&#xD;&#xA;	 * calendar instance for previous month for getting complete view&#xD;&#xA;	 */&#xD;&#xA;	public GregorianCalendar pmonthmaxset;&#xD;&#xA;	private GregorianCalendar selectedDate;&#xD;&#xA;	int firstDay;&#xD;&#xA;	int maxWeeknumber;&#xD;&#xA;	int maxP;&#xD;&#xA;	int calMaxP;&#xD;&#xA;	int lastWeekDay;&#xD;&#xA;	int leftDays;&#xD;&#xA;	int mnthlength;&#xD;&#xA;	String itemvalue, curentDateString;&#xD;&#xA;	DateFormat df;&#xD;&#xA;	private ArrayList<String> items;&#xD;&#xA;	public static List<String> dayString;&#xD;&#xA;	private View previousView;&#xD;&#xA;	public CalendarAdapter(Context c, GregorianCalendar monthCalendar) {&#xD;&#xA;		CalendarAdapter.dayString = new ArrayList<String>();&#xD;&#xA;		Locale.setDefault(Locale.US);&#xD;&#xA;		month = monthCalendar;&#xD;&#xA;		selectedDate = (GregorianCalendar) monthCalendar.clone();&#xD;&#xA;		mContext = c;&#xD;&#xA;		month.set(GregorianCalendar.DAY_OF_MONTH, 1);&#xD;&#xA;		this.items = new ArrayList<String>();&#xD;&#xA;		df = new SimpleDateFormat(""""yyyy-MM-dd"""", Locale.US);&#xD;&#xA;		curentDateString = df.format(selectedDate.getTime());&#xD;&#xA;		refreshDays();&#xD;&#xA;	}&#xD;&#xA;	public void setItems(ArrayList<String> items) {&#xD;&#xA;		for (int i = 0; i != items.size(); i++) {&#xD;&#xA;			if (items.get(i).length() == 1) {&#xD;&#xA;				items.set(i, """"0"""" + items.get(i));&#xD;&#xA;			}&#xD;&#xA;		}&#xD;&#xA;		this.items = items;&#xD;&#xA;	}&#xD;&#xA;	public int getCount() {&#xD;&#xA;		return dayString.size();&#xD;&#xA;	}&#xD;&#xA;	public Object getItem(int position) {&#xD;&#xA;		return dayString.get(position);&#xD;&#xA;	}&#xD;&#xA;	public long getItemId(int position) {&#xD;&#xA;		return 0;&#xD;&#xA;	}&#xD;&#xA;	// create a new view for each item referenced by the Adapter&#xD;&#xA;	public View getView(int position, View convertView, ViewGroup parent) {&#xD;&#xA;		View v = convertView;&#xD;&#xA;		TextView dayView;&#xD;&#xA;		if (convertView == null) { // if it's not recycled, initialize some&#xD;&#xA;									// attributes&#xD;&#xA;			LayoutInflater vi = (LayoutInflater) mContext&#xD;&#xA;					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);&#xD;&#xA;			v = vi.inflate(R.layout.calendar_item, null);&#xD;&#xA;		}&#xD;&#xA;		dayView = (TextView) v.findViewById(R.id.date);&#xD;&#xA;		// separates daystring into parts.&#xD;&#xA;		String[] separatedTime = dayString.get(position).split(""""-"""");&#xD;&#xA;		// taking last part of date. ie; 2 from 2012-12-02&#xD;&#xA;		String gridvalue = separatedTime[2].replaceFirst(""""^0*"""", """""""");&#xD;&#xA;		// checking whether the day is in current month or not.&#xD;&#xA;		if ((Integer.parseInt(gridvalue) > 1) && (position < firstDay)) {&#xD;&#xA;			// setting offdays to white color.&#xD;&#xA;			dayView.setTextColor(Color.WHITE);&#xD;&#xA;			dayView.setClickable(false);&#xD;&#xA;			dayView.setFocusable(false);&#xD;&#xA;		} else if ((Integer.parseInt(gridvalue) < 7) && (position > 28)) {&#xD;&#xA;			dayView.setTextColor(Color.WHITE);&#xD;&#xA;			dayView.setClickable(false);&#xD;&#xA;			dayView.setFocusable(false);&#xD;&#xA;		} else {&#xD;&#xA;			// setting curent month's days in blue color.&#xD;&#xA;			dayView.setTextColor(Color.BLUE);&#xD;&#xA;		}&#xD;&#xA;		if (dayString.get(position).equals(curentDateString)) {&#xD;&#xA;			setSelected(v);&#xD;&#xA;			previousView = v;&#xD;&#xA;		} else {&#xD;&#xA;			v.setBackgroundResource(R.drawable.list_item_background);&#xD;&#xA;		}&#xD;&#xA;		dayView.setText(gridvalue);&#xD;&#xA;		// create date string for comparison&#xD;&#xA;		String date = dayString.get(position);&#xD;&#xA;		if (date.length() == 1) {&#xD;&#xA;			date = """"0"""" + date;&#xD;&#xA;		}&#xD;&#xA;		String monthStr = """""""" + (month.get(GregorianCalendar.MONTH) + 1);&#xD;&#xA;		if (monthStr.length() == 1) {&#xD;&#xA;			monthStr = """"0"""" + monthStr;&#xD;&#xA;		}&#xD;&#xA;		// show icon if date is not empty and it exists in the items array&#xD;&#xA;		// &#xD;&#xA;		ImageView iw = (ImageView) v.findViewById(R.id.date_icon);&#xD;&#xA;		if (date.length() > 0 && items != null && items.contains(date)) {&#xD;&#xA;			iw.setVisibility(View.VISIBLE);&#xD;&#xA;		} else {&#xD;&#xA;			iw.setVisibility(View.INVISIBLE);&#xD;&#xA;		}&#xD;&#xA;		return v;&#xD;&#xA;	}&#xD;&#xA;	public View setSelected(View view) {&#xD;&#xA;		if (previousView != null) {&#xD;&#xA;			previousView.setBackgroundResource(R.drawable.list_item_background);&#xD;&#xA;		}&#xD;&#xA;		previousView = view;&#xD;&#xA;		view.setBackgroundResource(R.drawable.calendar_cel_selectl);&#xD;&#xA;		return view;&#xD;&#xA;	}&#xD;&#xA;	public void refreshDays() {&#xD;&#xA;		// clear items&#xD;&#xA;		items.clear();&#xD;&#xA;		dayString.clear();&#xD;&#xA;		Locale.setDefault(Locale.US);&#xD;&#xA;		pmonth = (GregorianCalendar) month.clone();&#xD;&#xA;		// month start day. ie; sun, mon, etc&#xD;&#xA;		firstDay = month.get(GregorianCalendar.DAY_OF_WEEK);&#xD;&#xA;		// finding number of weeks in current month.&#xD;&#xA;		maxWeeknumber = month.getActualMaximum(GregorianCalendar.WEEK_OF_MONTH);&#xD;&#xA;		// allocating maximum row number for the gridview.&#xD;&#xA;		mnthlength = maxWeeknumber * 7;&#xD;&#xA;		maxP = getMaxP(); // previous month maximum day 31,30....&#xD;&#xA;		calMaxP = maxP - (firstDay - 1);// calendar offday starting 24,25 ...&#xD;&#xA;		/**&#xD;&#xA;		 * Calendar instance for getting a complete gridview including the three&#xD;&#xA;		 * month's (previous,current,next) dates.&#xD;&#xA;		 */&#xD;&#xA;		pmonthmaxset = (GregorianCalendar) pmonth.clone();&#xD;&#xA;		/**&#xD;&#xA;		 * setting the start date as previous month's required date.&#xD;&#xA;		 */&#xD;&#xA;		pmonthmaxset.set(GregorianCalendar.DAY_OF_MONTH, calMaxP + 1);&#xD;&#xA;		/**&#xD;&#xA;		 * filling calendar gridview.&#xD;&#xA;		 */&#xD;&#xA;		for (int n = 0; n < mnthlength; n++) {&#xD;&#xA;			itemvalue = df.format(pmonthmaxset.getTime());&#xD;&#xA;			pmonthmaxset.add(GregorianCalendar.DATE, 1);&#xD;&#xA;			dayString.add(itemvalue);&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;	private int getMaxP() {&#xD;&#xA;		int maxP;&#xD;&#xA;		if (month.get(GregorianCalendar.MONTH) == month&#xD;&#xA;				.getActualMinimum(GregorianCalendar.MONTH)) {&#xD;&#xA;			pmonth.set((month.get(GregorianCalendar.YEAR) - 1),&#xD;&#xA;					month.getActualMaximum(GregorianCalendar.MONTH), 1);&#xD;&#xA;		} else {&#xD;&#xA;			pmonth.set(GregorianCalendar.MONTH,&#xD;&#xA;					month.get(GregorianCalendar.MONTH) - 1);&#xD;&#xA;		}&#xD;&#xA;		maxP = pmonth.getActualMaximum(GregorianCalendar.DAY_OF_MONTH);&#xD;&#xA;		return maxP;&#xD;&#xA;	}}"
