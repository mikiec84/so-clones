"Content"
"    protected void convertToPdfButton_Click(object sender, EventArgs e)&#xD;&#xA;    {&#xD;&#xA;        // Get the server IP and port&#xD;&#xA;        String serverIP = textBoxServerIP.Text;&#xD;&#xA;        uint serverPort = uint.Parse(textBoxServerPort.Text);&#xD;&#xA;    &#xD;&#xA;        // Create a HTML to PDF converter object with default settings&#xD;&#xA;        HtmlToPdfConverter htmlToPdfConverter = new HtmlToPdfConverter(serverIP, serverPort);&#xD;&#xA;                &#xD;&#xA;        // Set optional service password&#xD;&#xA;        if (textBoxServicePassword.Text.Length > 0)&#xD;&#xA;            htmlToPdfConverter.ServicePassword = textBoxServicePassword.Text;&#xD;&#xA;        &#xD;&#xA;        // Set HTML Viewer width in pixels which is the equivalent in converter of the browser window width&#xD;&#xA;        htmlToPdfConverter.HtmlViewerWidth = int.Parse(htmlViewerWidthTextBox.Text);&#xD;&#xA;    &#xD;&#xA;        // Set HTML viewer height in pixels to convert the top part of a HTML page &#xD;&#xA;        // Leave it not set to convert the entire HTML&#xD;&#xA;        if (htmlViewerHeightTextBox.Text.Length > 0)&#xD;&#xA;            htmlToPdfConverter.HtmlViewerHeight = int.Parse(htmlViewerHeightTextBox.Text);&#xD;&#xA;    &#xD;&#xA;        // Set PDF page size which can be a predefined size like A4 or a custom size in points &#xD;&#xA;        // Leave it not set to have a default A4 PDF page&#xD;&#xA;        htmlToPdfConverter.PdfDocumentOptions.PdfPageSize = SelectedPdfPageSize();&#xD;&#xA;    &#xD;&#xA;        // Set PDF page orientation to Portrait or Landscape&#xD;&#xA;        // Leave it not set to have a default Portrait orientation for PDF page&#xD;&#xA;        htmlToPdfConverter.PdfDocumentOptions.PdfPageOrientation = SelectedPdfPageOrientation();&#xD;&#xA;    &#xD;&#xA;        // Set the maximum time in seconds to wait for HTML page to be loaded &#xD;&#xA;        // Leave it not set for a default 60 seconds maximum wait time&#xD;&#xA;        htmlToPdfConverter.NavigationTimeout = int.Parse(navigationTimeoutTextBox.Text);&#xD;&#xA;    &#xD;&#xA;        // Set an adddional delay in seconds to wait for JavaScript or AJAX calls after page load completed&#xD;&#xA;        // Set this property to 0 if you don't need to wait for such asynchcronous operations to finish&#xD;&#xA;        if (conversionDelayTextBox.Text.Length > 0)&#xD;&#xA;            htmlToPdfConverter.ConversionDelay = int.Parse(conversionDelayTextBox.Text);&#xD;&#xA;    &#xD;&#xA;        // The buffer to receive the generated PDF document&#xD;&#xA;        byte[] outPdfBuffer = null;&#xD;&#xA;    &#xD;&#xA;        if (convertUrlRadioButton.Checked)&#xD;&#xA;        {&#xD;&#xA;            string url = urlTextBox.Text;&#xD;&#xA;    &#xD;&#xA;            // Convert the HTML page given by an URL to a PDF document in a memory buffer&#xD;&#xA;            outPdfBuffer = htmlToPdfConverter.ConvertUrl(url);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            string htmlString = htmlStringTextBox.Text;&#xD;&#xA;            string baseUrl = baseUrlTextBox.Text;&#xD;&#xA;    &#xD;&#xA;            // Convert a HTML string with a base URL to a PDF document in a memory buffer&#xD;&#xA;            outPdfBuffer = htmlToPdfConverter.ConvertHtml(htmlString, baseUrl);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        // Send the PDF as response to browser&#xD;&#xA;    &#xD;&#xA;        // Set response content type&#xD;&#xA;        Response.AddHeader(""""Content-Type"""", """"application/pdf"""");&#xD;&#xA;    &#xD;&#xA;        // Instruct the browser to open the PDF file as an attachment or inline&#xD;&#xA;        Response.AddHeader(""""Content-Disposition"""", String.Format(""""{0}; filename=Getting_Started.pdf; size={1}"""",&#xD;&#xA;            openInlineCheckBox.Checked ? """"inline"""" : """"attachment"""", outPdfBuffer.Length.ToString()));&#xD;&#xA;    &#xD;&#xA;        // Write the PDF document buffer to HTTP response&#xD;&#xA;        Response.BinaryWrite(outPdfBuffer);&#xD;&#xA;    &#xD;&#xA;        // End the HTTP response and stop the current page processing&#xD;&#xA;        Response.End();&#xD;&#xA;    }"
