"Content"
"    /// <summary>&#xD;&#xA;    /// A converter that accepts <see cref=""""SwitchConverterCase""""/>s and converts them to the &#xD;&#xA;    /// Then property of the case.&#xD;&#xA;    /// </summary>&#xD;&#xA;    [ContentProperty(""""Cases"""")]&#xD;&#xA;    public class SwitchConverter : IValueConverter&#xD;&#xA;    {&#xD;&#xA;        // Converter instances.&#xD;&#xA;        List<SwitchConverterCase> _cases;&#xD;&#xA;    &#xD;&#xA;        #region Public Properties.&#xD;&#xA;        /// <summary>&#xD;&#xA;        /// Gets or sets an array of <see cref=""""SwitchConverterCase""""/>s that this converter can use to produde values from.&#xD;&#xA;        /// </summary>&#xD;&#xA;        public List<SwitchConverterCase> Cases { get { return _cases; } set { _cases = value; } }&#xD;&#xA;        #endregion&#xD;&#xA;        #region Construction.&#xD;&#xA;        /// <summary>&#xD;&#xA;        /// Initializes a new instance of the <see cref=""""SwitchConverter""""/> class.&#xD;&#xA;        /// </summary>&#xD;&#xA;        public SwitchConverter()&#xD;&#xA;        {&#xD;&#xA;            // Create the cases array.&#xD;&#xA;            _cases = new List<SwitchConverterCase>();&#xD;&#xA;        }&#xD;&#xA;        #endregion&#xD;&#xA;    &#xD;&#xA;        /// <summary>&#xD;&#xA;        /// Converts a value.&#xD;&#xA;        /// </summary>&#xD;&#xA;        /// <param name=""""value"""">The value produced by the binding source.</param>&#xD;&#xA;        /// <param name=""""targetType"""">The type of the binding target property.</param>&#xD;&#xA;        /// <param name=""""parameter"""">The converter parameter to use.</param>&#xD;&#xA;        /// <param name=""""culture"""">The culture to use in the converter.</param>&#xD;&#xA;        /// <returns>&#xD;&#xA;        /// A converted value. If the method returns null, the valid null value is used.&#xD;&#xA;        /// </returns>&#xD;&#xA;        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)&#xD;&#xA;        {&#xD;&#xA;            // This will be the results of the operation.&#xD;&#xA;            object results = null;&#xD;&#xA;    &#xD;&#xA;            // I'm only willing to convert SwitchConverterCases in this converter and no nulls!&#xD;&#xA;            if (value == null) throw new ArgumentNullException(""""value"""");&#xD;&#xA;    &#xD;&#xA;            // I need to find out if the case that matches this value actually exists in this converters cases collection.&#xD;&#xA;            if (_cases != null && _cases.Count > 0)&#xD;&#xA;                for (int i = 0; i < _cases.Count; i++)&#xD;&#xA;                {&#xD;&#xA;                    // Get a reference to this case.&#xD;&#xA;                    SwitchConverterCase targetCase = _cases[i];&#xD;&#xA;    &#xD;&#xA;                    // Check to see if the value is the cases When parameter.&#xD;&#xA;                    if (value == targetCase || value.ToString().ToUpper() == targetCase.When.ToString().ToUpper())&#xD;&#xA;                    {&#xD;&#xA;                        // We've got what we want, the results can now be set to the Then property&#xD;&#xA;                        // of the case we're on.&#xD;&#xA;                        results = targetCase.Then;&#xD;&#xA;    &#xD;&#xA;                        // All done, get out of the loop.&#xD;&#xA;                        break;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;            // return the results.&#xD;&#xA;            return results;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        /// <summary>&#xD;&#xA;        /// Converts a value.&#xD;&#xA;        /// </summary>&#xD;&#xA;        /// <param name=""""value"""">The value that is produced by the binding target.</param>&#xD;&#xA;        /// <param name=""""targetType"""">The type to convert to.</param>&#xD;&#xA;        /// <param name=""""parameter"""">The converter parameter to use.</param>&#xD;&#xA;        /// <param name=""""culture"""">The culture to use in the converter.</param>&#xD;&#xA;        /// <returns>&#xD;&#xA;        /// A converted value. If the method returns null, the valid null value is used.&#xD;&#xA;        /// </returns>&#xD;&#xA;        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)&#xD;&#xA;        {&#xD;&#xA;            throw new NotImplementedException();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    /// <summary>&#xD;&#xA;    /// Represents a case for a switch converter.&#xD;&#xA;    /// </summary>&#xD;&#xA;    [ContentProperty(""""Then"""")]&#xD;&#xA;    public class SwitchConverterCase&#xD;&#xA;    {&#xD;&#xA;        // case instances.&#xD;&#xA;        string _when;&#xD;&#xA;        object _then;&#xD;&#xA;    &#xD;&#xA;        #region Public Properties.&#xD;&#xA;        /// <summary>&#xD;&#xA;        /// Gets or sets the condition of the case.&#xD;&#xA;        /// </summary>&#xD;&#xA;        public string When { get { return _when; } set { _when = value; } }&#xD;&#xA;        /// <summary>&#xD;&#xA;        /// Gets or sets the results of this case when run through a <see cref=""""SwitchConverter""""/>&#xD;&#xA;        /// </summary>&#xD;&#xA;        public object Then { get { return _then; } set { _then = value; } }&#xD;&#xA;        #endregion&#xD;&#xA;        #region Construction.&#xD;&#xA;        /// <summary>&#xD;&#xA;        /// Switches the converter.&#xD;&#xA;        /// </summary>&#xD;&#xA;        public SwitchConverterCase()&#xD;&#xA;        {&#xD;&#xA;        }&#xD;&#xA;        /// <summary>&#xD;&#xA;        /// Initializes a new instance of the <see cref=""""SwitchConverterCase""""/> class.&#xD;&#xA;        /// </summary>&#xD;&#xA;        /// <param name=""""when"""">The condition of the case.</param>&#xD;&#xA;        /// <param name=""""then"""">The results of this case when run through a <see cref=""""SwitchConverter""""/>.</param>&#xD;&#xA;        public SwitchConverterCase(string when, object then)&#xD;&#xA;        {&#xD;&#xA;            // Hook up the instances.&#xD;&#xA;            this._then = then;&#xD;&#xA;            this._when = when;&#xD;&#xA;        }&#xD;&#xA;        #endregion&#xD;&#xA;    &#xD;&#xA;        /// <summary>&#xD;&#xA;        /// Returns a <see cref=""""System.String""""/> that represents this instance.&#xD;&#xA;        /// </summary>&#xD;&#xA;        /// <returns>&#xD;&#xA;        /// A <see cref=""""System.String""""/> that represents this instance.&#xD;&#xA;        /// </returns>&#xD;&#xA;        public override string ToString()&#xD;&#xA;        {&#xD;&#xA;            return string.Format(""""When={0}; Then={1}"""", When.ToString(), Then.ToString());&#xD;&#xA;        }&#xD;&#xA;    }"
