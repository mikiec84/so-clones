"Content"
"    class OrderItem < ActiveRecord::Base&#xD;&#xA;      belongs_to :product&#xD;&#xA;       belongs_to :order&#xD;&#xA;    &#xD;&#xA;      validates :quantity, presence: true, numericality: { only_integer: true, greater_than: 0 }&#xD;&#xA;      validate :product_present&#xD;&#xA;      validate :order_present&#xD;&#xA;    &#xD;&#xA;      before_save :finalize&#xD;&#xA;    &#xD;&#xA;      def unit_price&#xD;&#xA;        if persisted?&#xD;&#xA;          self[:unit_price]&#xD;&#xA;        else&#xD;&#xA;           product.price&#xD;&#xA;       end&#xD;&#xA;      end&#xD;&#xA;      def total_price&#xD;&#xA;        unit_price * quantity&#xD;&#xA;      end&#xD;&#xA;    &#xD;&#xA;    private&#xD;&#xA;      def product_present&#xD;&#xA;        if product.nil?&#xD;&#xA;          errors.add(:product, """"is not valid or is not active."""")&#xD;&#xA;        end&#xD;&#xA;      end&#xD;&#xA;      def order_present&#xD;&#xA;        if order.nil?&#xD;&#xA;          errors.add(:order, """"is not a valid order."""")&#xD;&#xA;        end&#xD;&#xA;      end&#xD;&#xA;    &#xD;&#xA;      def finalize&#xD;&#xA;         self[:unit_price] = unit_price&#xD;&#xA;        self[:total_price] = quantity * self[:unit_price]&#xD;&#xA;      end&#xD;&#xA;    end"
