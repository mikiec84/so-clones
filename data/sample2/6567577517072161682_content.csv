"Content"
"    class Shop < ActiveRecord::Base    &#xD;&#xA;      attr_accessor :logo_cache&#xD;&#xA;      has_attached_file :logo&#xD;&#xA;      def cache_images&#xD;&#xA;        if logo.staged?&#xD;&#xA;          if invalid?&#xD;&#xA;            FileUtils.cp(logo.queued_for_write[:original].path, logo.path(:original))&#xD;&#xA;            @logo_cache = encrypt(logo.path(:original))&#xD;&#xA;          end&#xD;&#xA;        else&#xD;&#xA;          if @logo_cache.present?&#xD;&#xA;            File.open(decrypt(@logo_cache)) {|f| assign_attributes(logo: f)}&#xD;&#xA;          end&#xD;&#xA;        end&#xD;&#xA;      end&#xD;&#xA;      private&#xD;&#xA;      def decrypt(data)&#xD;&#xA;        return '' unless data.present?&#xD;&#xA;        cipher = build_cipher(:decrypt, 'mypassword')&#xD;&#xA;        cipher.update(Base64.urlsafe_decode64(data).unpack('m')[0]) + cipher.final&#xD;&#xA;      end&#xD;&#xA;      def encrypt(data)&#xD;&#xA;        return '' unless data.present?&#xD;&#xA;        cipher = build_cipher(:encrypt, 'mypassword')&#xD;&#xA;        Base64.urlsafe_encode64([cipher.update(data) + cipher.final].pack('m'))&#xD;&#xA;      end&#xD;&#xA;      def build_cipher(type, password)&#xD;&#xA;        cipher = OpenSSL::Cipher::Cipher.new('DES-EDE3-CBC').send(type)&#xD;&#xA;        cipher.pkcs5_keyivgen(password)&#xD;&#xA;        cipher&#xD;&#xA;      end&#xD;&#xA;    end"
