"Content"
"       var Base64 = {&#xD;&#xA; &#xD;&#xA;	// private property&#xD;&#xA;	_keyStr : """"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="""",&#xD;&#xA; &#xD;&#xA;	// public method for encoding&#xD;&#xA;	encode : function (input) {&#xD;&#xA;		var output = """""""";&#xD;&#xA;		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;&#xD;&#xA;		var i = 0;&#xD;&#xA; &#xD;&#xA;		input = Base64._utf8_encode(input);&#xD;&#xA; &#xD;&#xA;		while (i < input.length) {&#xD;&#xA; &#xD;&#xA;			chr1 = input.charCodeAt(i++);&#xD;&#xA;			chr2 = input.charCodeAt(i++);&#xD;&#xA;			chr3 = input.charCodeAt(i++);&#xD;&#xA; &#xD;&#xA;			enc1 = chr1 >> 2;&#xD;&#xA;			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);&#xD;&#xA;			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);&#xD;&#xA;			enc4 = chr3 & 63;&#xD;&#xA; &#xD;&#xA;			if (isNaN(chr2)) {&#xD;&#xA;				enc3 = enc4 = 64;&#xD;&#xA;			} else if (isNaN(chr3)) {&#xD;&#xA;				enc4 = 64;&#xD;&#xA;			}&#xD;&#xA; &#xD;&#xA;			output = output +&#xD;&#xA;			this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +&#xD;&#xA;			this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);&#xD;&#xA; &#xD;&#xA;		}&#xD;&#xA; &#xD;&#xA;		return output;&#xD;&#xA;	},&#xD;&#xA; &#xD;&#xA;	// public method for decoding&#xD;&#xA;	decode : function (input) {&#xD;&#xA;		var output = """""""";&#xD;&#xA;		var chr1, chr2, chr3;&#xD;&#xA;		var enc1, enc2, enc3, enc4;&#xD;&#xA;		var i = 0;&#xD;&#xA; &#xD;&#xA;		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, """""""");&#xD;&#xA; &#xD;&#xA;		while (i < input.length) {&#xD;&#xA; &#xD;&#xA;			enc1 = this._keyStr.indexOf(input.charAt(i++));&#xD;&#xA;			enc2 = this._keyStr.indexOf(input.charAt(i++));&#xD;&#xA;			enc3 = this._keyStr.indexOf(input.charAt(i++));&#xD;&#xA;			enc4 = this._keyStr.indexOf(input.charAt(i++));&#xD;&#xA; &#xD;&#xA;			chr1 = (enc1 << 2) | (enc2 >> 4);&#xD;&#xA;			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);&#xD;&#xA;			chr3 = ((enc3 & 3) << 6) | enc4;&#xD;&#xA; &#xD;&#xA;			output = output + String.fromCharCode(chr1);&#xD;&#xA; &#xD;&#xA;			if (enc3 != 64) {&#xD;&#xA;				output = output + String.fromCharCode(chr2);&#xD;&#xA;			}&#xD;&#xA;			if (enc4 != 64) {&#xD;&#xA;				output = output + String.fromCharCode(chr3);&#xD;&#xA;			}&#xD;&#xA; &#xD;&#xA;		}&#xD;&#xA; &#xD;&#xA;		output = Base64._utf8_decode(output);&#xD;&#xA; &#xD;&#xA;		return output;&#xD;&#xA; &#xD;&#xA;	},&#xD;&#xA; &#xD;&#xA;	// private method for UTF-8 encoding&#xD;&#xA;	_utf8_encode : function (string) {&#xD;&#xA;		string = string.replace(/\r\n/g,""""\n"""");&#xD;&#xA;		var utftext = """""""";&#xD;&#xA; &#xD;&#xA;		for (var n = 0; n < string.length; n++) {&#xD;&#xA; &#xD;&#xA;			var c = string.charCodeAt(n);&#xD;&#xA; &#xD;&#xA;			if (c < 128) {&#xD;&#xA;				utftext += String.fromCharCode(c);&#xD;&#xA;			}&#xD;&#xA;			else if((c > 127) && (c < 2048)) {&#xD;&#xA;				utftext += String.fromCharCode((c >> 6) | 192);&#xD;&#xA;				utftext += String.fromCharCode((c & 63) | 128);&#xD;&#xA;			}&#xD;&#xA;			else {&#xD;&#xA;				utftext += String.fromCharCode((c >> 12) | 224);&#xD;&#xA;				utftext += String.fromCharCode(((c >> 6) & 63) | 128);&#xD;&#xA;				utftext += String.fromCharCode((c & 63) | 128);&#xD;&#xA;			}&#xD;&#xA; &#xD;&#xA;		}&#xD;&#xA; &#xD;&#xA;		return utftext;&#xD;&#xA;	},&#xD;&#xA; &#xD;&#xA;	// private method for UTF-8 decoding&#xD;&#xA;	_utf8_decode : function (utftext) {&#xD;&#xA;		var string = """""""";&#xD;&#xA;		var i = 0;&#xD;&#xA;		var c = c1 = c2 = 0;&#xD;&#xA; &#xD;&#xA;		while ( i < utftext.length ) {&#xD;&#xA; &#xD;&#xA;			c = utftext.charCodeAt(i);&#xD;&#xA; &#xD;&#xA;			if (c < 128) {&#xD;&#xA;				string += String.fromCharCode(c);&#xD;&#xA;				i++;&#xD;&#xA;			}&#xD;&#xA;			else if((c > 191) && (c < 224)) {&#xD;&#xA;				c2 = utftext.charCodeAt(i+1);&#xD;&#xA;				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));&#xD;&#xA;				i += 2;&#xD;&#xA;			}&#xD;&#xA;			else {&#xD;&#xA;				c2 = utftext.charCodeAt(i+1);&#xD;&#xA;				c3 = utftext.charCodeAt(i+2);&#xD;&#xA;				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));&#xD;&#xA;				i += 3;&#xD;&#xA;			}&#xD;&#xA; &#xD;&#xA;		}&#xD;&#xA; &#xD;&#xA;		return string;&#xD;&#xA;	}&#xD;&#xA; &#xD;&#xA;    }"
