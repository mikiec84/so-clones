"Content"
"      <?php&#xD;&#xA;    class Node&#xD;&#xA;    {&#xD;&#xA;     public $data;&#xD;&#xA;     public $leftChild;&#xD;&#xA;     public $rightChild;&#xD;&#xA;     &#xD;&#xA;     public function __construct($data)&#xD;&#xA;      {&#xD;&#xA;       $this->data=$data;&#xD;&#xA;       $this->leftChild=null;&#xD;&#xA;       $this->rightChild=null;&#xD;&#xA;      }&#xD;&#xA;     public function disp_data()&#xD;&#xA;      {&#xD;&#xA;       echo $this->data;&#xD;&#xA;      }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    }//end class Node&#xD;&#xA;    class BinaryTree&#xD;&#xA;    {&#xD;&#xA;     public $root;&#xD;&#xA;     //public $s;&#xD;&#xA;     public function __construct()&#xD;&#xA;      {&#xD;&#xA;       $this->root=null;&#xD;&#xA;       //$this->s=file_get_contents('store');&#xD;&#xA;      &#xD;&#xA;      }&#xD;&#xA;    //function to display the tree&#xD;&#xA;      public function display()&#xD;&#xA;      {&#xD;&#xA;       $this->display_tree($this->root);&#xD;&#xA;       &#xD;&#xA;      }&#xD;&#xA;      public function display_tree($local_root)&#xD;&#xA;      {&#xD;&#xA;         &#xD;&#xA;       if($local_root==null) &#xD;&#xA;         return;&#xD;&#xA;        $this->display_tree($local_root->leftChild);&#xD;&#xA;        echo $local_root->data.""""<br/>"""";&#xD;&#xA;        $this->display_tree($local_root->rightChild);&#xD;&#xA;        &#xD;&#xA;      } &#xD;&#xA;    // function to insert a new node&#xD;&#xA;      public function insert($key)&#xD;&#xA;       {&#xD;&#xA;        $newnode=new Node($key);&#xD;&#xA;          if($this->root==null)&#xD;&#xA;            {&#xD;&#xA;             $this->root=$newnode;&#xD;&#xA;             return;&#xD;&#xA;            }&#xD;&#xA;          else&#xD;&#xA;            {&#xD;&#xA;             $parent=$this->root;&#xD;&#xA;             $current=$this->root;&#xD;&#xA;               while(true)&#xD;&#xA;                 {&#xD;&#xA;                   $parent=$current;&#xD;&#xA;                     //$this->find_order($key,$current->data);&#xD;&#xA;                    if($key==($this->find_order($key,$current->data)))&#xD;&#xA;                      {&#xD;&#xA;                          $current=$current->leftChild;&#xD;&#xA;                           if($current==null)&#xD;&#xA;                             {&#xD;&#xA;                              $parent->leftChild=$newnode;&#xD;&#xA;                              return;&#xD;&#xA;                             }//end if2&#xD;&#xA;                      }//end if1 &#xD;&#xA;                    else&#xD;&#xA;                      {&#xD;&#xA;                          $current=$current->rightChild;&#xD;&#xA;                           if($current==null)&#xD;&#xA;                             {&#xD;&#xA;                              $parent->rightChild=$newnode;&#xD;&#xA;                              return;  &#xD;&#xA;                             } //end if1                       &#xD;&#xA;                      } //end else&#xD;&#xA;                 }//end while loop &#xD;&#xA;            }//end else&#xD;&#xA;        &#xD;&#xA;       } //end insert function&#xD;&#xA;     &#xD;&#xA;    //function to search a particular Node&#xD;&#xA;     public function find($key)&#xD;&#xA;      {&#xD;&#xA;        $current=$this->root;&#xD;&#xA;         while($current->data!=$key)&#xD;&#xA;              {&#xD;&#xA;                if($key==$this->find_order($key,$current->data))&#xD;&#xA;                  {&#xD;&#xA;                    $current=$current->leftChild;&#xD;&#xA;                  }&#xD;&#xA;                else&#xD;&#xA;                  {&#xD;&#xA;                    $current=$current->rightChild;&#xD;&#xA;                  }&#xD;&#xA;                if($current==null)&#xD;&#xA;                  return(null);&#xD;&#xA;                &#xD;&#xA;              }&#xD;&#xA;             return($current->data); &#xD;&#xA;      }// end the function to search&#xD;&#xA;     public function delete1($key)&#xD;&#xA;      {&#xD;&#xA;        $current=$this->root;&#xD;&#xA;        $parent=$this->root;&#xD;&#xA;        &#xD;&#xA;        $isLeftChild=true;&#xD;&#xA;         while($current->data!=$key)&#xD;&#xA;              {&#xD;&#xA;               $parent=$current;&#xD;&#xA;               if($key==($this->find_order($key,$current->data)))&#xD;&#xA;                 {&#xD;&#xA;                  $current=$current->leftChild;&#xD;&#xA;                  $isLeftChild=true;&#xD;&#xA;                 }   &#xD;&#xA;               else&#xD;&#xA;                 {&#xD;&#xA;                  $current=$current->rightChild;&#xD;&#xA;                  $isLeftChild=false;   &#xD;&#xA;                 } &#xD;&#xA;                if($current==null)&#xD;&#xA;                  return(null);&#xD;&#xA;              }//end while loop &#xD;&#xA;    &#xD;&#xA;          echo """"<br/><br/>Node to delete:"""".$current->data;&#xD;&#xA;         //to delete a leaf node &#xD;&#xA;         if($current->leftChild==null&&$current->rightChild==null)&#xD;&#xA;           {&#xD;&#xA;               if($current==$this->root)&#xD;&#xA;                  $this->root=null;  &#xD;&#xA;              else if($isLeftChild==true)&#xD;&#xA;               {&#xD;&#xA;                $parent->leftChild=null;&#xD;&#xA;               }  &#xD;&#xA;             else&#xD;&#xA;               {&#xD;&#xA;                $parent->rightChild=null;&#xD;&#xA;               }&#xD;&#xA;             return($current);       &#xD;&#xA;           }//end if1&#xD;&#xA;         //to delete a node having a leftChild &#xD;&#xA;       else if($current->rightChild==null)&#xD;&#xA;           {&#xD;&#xA;              if($current==$this->root)&#xD;&#xA;               $this->root=$current->leftChild;&#xD;&#xA;              else if($isLeftChild==true)&#xD;&#xA;               {&#xD;&#xA;                $parent->leftChild=$current->leftChild;&#xD;&#xA;               }&#xD;&#xA;              else&#xD;&#xA;               {&#xD;&#xA;                $parent->rightChild=$current->leftChild;&#xD;&#xA;               }   &#xD;&#xA;              return($current);&#xD;&#xA;           }//end else if1&#xD;&#xA;        //to delete a node having a rightChild&#xD;&#xA;       else if($current->leftChild==null)&#xD;&#xA;           {&#xD;&#xA;             if($current==$this->root)&#xD;&#xA;               $this->root=$current->rightChild;&#xD;&#xA;             else if($isLeftChild==true)&#xD;&#xA;               {&#xD;&#xA;                $parent->leftChild=$current->rightChild;&#xD;&#xA;               }  &#xD;&#xA;             else&#xD;&#xA;               {&#xD;&#xA;                $parent->rightChild=$current->rightChild; &#xD;&#xA;               }  &#xD;&#xA;               return($current);&#xD;&#xA;           }  &#xD;&#xA;       //to delete a node having both childs&#xD;&#xA;        else&#xD;&#xA;           {&#xD;&#xA;            $successor=$this->get_successor($current);&#xD;&#xA;            if($current==$this->root)&#xD;&#xA;              {&#xD;&#xA;                $this->root=$successor; &#xD;&#xA;                    &#xD;&#xA;              }&#xD;&#xA;            else if($isLeftChild==true)&#xD;&#xA;              {&#xD;&#xA;               $parent->leftChild=$successor;&#xD;&#xA;              }&#xD;&#xA;            else&#xD;&#xA;              {&#xD;&#xA;               $parent->rightChild=$successor;&#xD;&#xA;              }     &#xD;&#xA;             $successor->leftChild=$current->leftChild;&#xD;&#xA;            return($current);&#xD;&#xA;           }   &#xD;&#xA;         &#xD;&#xA;         &#xD;&#xA;      }//end the function to delete a node&#xD;&#xA;    //Function to find the successor node&#xD;&#xA;     public function get_successor($delNode)&#xD;&#xA;      {&#xD;&#xA;       $succParent=$delNode;&#xD;&#xA;       $successor=$delNode;&#xD;&#xA;       $temp=$delNode->rightChild;&#xD;&#xA;        while($temp!=null)&#xD;&#xA;             {&#xD;&#xA;              $succParent=$successor;&#xD;&#xA;              $successor=$temp;&#xD;&#xA;              $temp=$temp->leftChild;&#xD;&#xA;             }&#xD;&#xA;       if($successor!=$delNode->rightChild)&#xD;&#xA;         {&#xD;&#xA;          $succParent->leftChild=$successor->rightChild;&#xD;&#xA;          $successor->rightChild=$delNode->rightChild;&#xD;&#xA;         }&#xD;&#xA;      return($successor);&#xD;&#xA;      }&#xD;&#xA;    //function to find the order of two strings&#xD;&#xA;     public function find_order($str1,$str2)&#xD;&#xA;      {&#xD;&#xA;         $str1=strtolower($str1);&#xD;&#xA;         $str2=strtolower($str2);&#xD;&#xA;         $i=0;&#xD;&#xA;         $j=0;&#xD;&#xA;     &#xD;&#xA;         $p1=$str1[i];&#xD;&#xA;         $p2=$str2[j]; &#xD;&#xA;      while(true)&#xD;&#xA;       {  &#xD;&#xA;           if(ord($p1)<ord($p2)||($p1==''&&$p2==''))&#xD;&#xA;             {&#xD;&#xA;    &#xD;&#xA;               return($str1);&#xD;&#xA;             }&#xD;&#xA;          else&#xD;&#xA;             {&#xD;&#xA;               if(ord($p1)==ord($p2))&#xD;&#xA;                 {&#xD;&#xA;                  $p1=$str1[++$i];&#xD;&#xA;                  $p2=$str2[++$j];&#xD;&#xA;                  continue;&#xD;&#xA;                 }&#xD;&#xA;              return($str2); &#xD;&#xA;             }&#xD;&#xA;       }//end while&#xD;&#xA;    &#xD;&#xA;      } //end function find string order&#xD;&#xA;     &#xD;&#xA;     public function is_empty()&#xD;&#xA;      {&#xD;&#xA;        if($this->root==null)&#xD;&#xA;          return(true);&#xD;&#xA;        else&#xD;&#xA;          return(false);&#xD;&#xA;      }&#xD;&#xA;    }//end class BinaryTree&#xD;&#xA;    ?>"
