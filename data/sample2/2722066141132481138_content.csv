"Content"
"    #!/usr/bin/python&#xD;&#xA;    import pyglet&#xD;&#xA;    from time import time, sleep&#xD;&#xA;    &#xD;&#xA;    class Window(pyglet.window.Window):&#xD;&#xA;    	def __init__(self, refreshrate):&#xD;&#xA;    		super(Window, self).__init__(vsync = False)&#xD;&#xA;    		self.frames = 0&#xD;&#xA;    		self.framerate = pyglet.text.Label(text='Unknown', font_name='Verdana', font_size=8, x=10, y=10, color=(255,255,255,255))&#xD;&#xA;    		self.last = time()&#xD;&#xA;    		self.alive = 1&#xD;&#xA;    		self.refreshrate = refreshrate&#xD;&#xA;    		self.click = None&#xD;&#xA;    		self.drag = False&#xD;&#xA;    &#xD;&#xA;    	def on_draw(self):&#xD;&#xA;    		self.render()&#xD;&#xA;    &#xD;&#xA;    	def on_mouse_press(self, x, y, button, modifiers):&#xD;&#xA;    		self.click = x,y&#xD;&#xA;    &#xD;&#xA;    	def on_mouse_drag(self, x, y, dx, dy, buttons, modifiers):&#xD;&#xA;    		if self.click:&#xD;&#xA;    			self.drag = True&#xD;&#xA;    			print 'Drag offset:',(dx,dy)&#xD;&#xA;    &#xD;&#xA;    	def on_mouse_release(self, x, y, button, modifiers):&#xD;&#xA;    		if not self.drag and self.click:&#xD;&#xA;    			print 'You clicked here', self.click, 'Relese point:',(x,y)&#xD;&#xA;    		else:&#xD;&#xA;    			print 'You draged from', self.click, 'to:',(x,y)&#xD;&#xA;    		self.click = None&#xD;&#xA;    		self.drag = False&#xD;&#xA;    &#xD;&#xA;    	def render(self):&#xD;&#xA;    		self.clear()&#xD;&#xA;    		if time() - self.last >= 1:&#xD;&#xA;    			self.framerate.text = str(self.frames)&#xD;&#xA;    			self.frames = 0&#xD;&#xA;    			self.last = time()&#xD;&#xA;    		else:&#xD;&#xA;    			self.frames += 1&#xD;&#xA;    		self.framerate.draw()&#xD;&#xA;    		self.flip()&#xD;&#xA;    &#xD;&#xA;    	def on_close(self):&#xD;&#xA;    		self.alive = 0&#xD;&#xA;    &#xD;&#xA;    	def run(self):&#xD;&#xA;    		while self.alive:&#xD;&#xA;    			self.render()&#xD;&#xA;    			# ----> Note: <----&#xD;&#xA;    			#  Without self.dispatc_events() the screen will freeze&#xD;&#xA;    			#  due to the fact that i don't call pyglet.app.run(),&#xD;&#xA;    			#  because i like to have the control when and what locks&#xD;&#xA;    			#  the application, since pyglet.app.run() is a locking call.&#xD;&#xA;    			event = self.dispatch_events()&#xD;&#xA;    			sleep(1.0/self.refreshrate)&#xD;&#xA;    &#xD;&#xA;    win = Window(23) # set the fps&#xD;&#xA;    win.run()"
