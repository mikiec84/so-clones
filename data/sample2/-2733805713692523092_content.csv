"Content"
"    <?php&#xD;&#xA;     &#xD;&#xA;    class DB_Functions {&#xD;&#xA;     &#xD;&#xA;        private $conn;&#xD;&#xA;     &#xD;&#xA;        // constructor&#xD;&#xA;        function __construct() {&#xD;&#xA;            require_once 'DB_Connect.php';&#xD;&#xA;            // connecting to database&#xD;&#xA;            $db = new Db_Connect();&#xD;&#xA;            $this->conn = $db->connect();&#xD;&#xA;        }&#xD;&#xA;     &#xD;&#xA;        // destructor&#xD;&#xA;        function __destruct() {&#xD;&#xA;             &#xD;&#xA;        }&#xD;&#xA;     &#xD;&#xA;        /**&#xD;&#xA;         * Storing new user&#xD;&#xA;         * returns user details&#xD;&#xA;         */&#xD;&#xA;        public function storeUser($name, $email, $password) {&#xD;&#xA;            $uuid = uniqid('', true);&#xD;&#xA;            $hash = $this->hashSSHA($password);&#xD;&#xA;            $encrypted_password = $hash[""""encrypted""""]; // encrypted password&#xD;&#xA;            $salt = $hash[""""salt""""]; // salt&#xD;&#xA;     &#xD;&#xA;            $stmt = $this->conn->prepare(""""INSERT INTO users(unique_id, name, email, encrypted_password, salt, created_at) VALUES(?, ?, ?, ?, ?, NOW())"""");&#xD;&#xA;            $stmt->bind_param(""""sssss"""", $uuid, $name, $email, $encrypted_password, $salt);&#xD;&#xA;            $result = $stmt->execute();&#xD;&#xA;            $stmt->close();&#xD;&#xA;     &#xD;&#xA;            // check for successful store&#xD;&#xA;            if ($result) {&#xD;&#xA;                $stmt = $this->conn->prepare(""""SELECT * FROM users WHERE email = ?"""");&#xD;&#xA;                $stmt->bind_param(""""s"""", $email);&#xD;&#xA;                $stmt->execute();&#xD;&#xA;                $user = $stmt->get_result()->fetch_assoc();&#xD;&#xA;                $stmt->close();&#xD;&#xA;     &#xD;&#xA;                return $user;&#xD;&#xA;            } else {&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;     &#xD;&#xA;        /**&#xD;&#xA;         * Get user by email and password&#xD;&#xA;         */&#xD;&#xA;        public function getUserByEmailAndPassword($email, $password) {&#xD;&#xA;     &#xD;&#xA;            $stmt = $this->conn->prepare(""""SELECT * FROM users WHERE email = ?"""");&#xD;&#xA;     &#xD;&#xA;            $stmt->bind_param(""""s"""", $email);&#xD;&#xA;     &#xD;&#xA;            if ($stmt->execute()) {&#xD;&#xA;                $user = $stmt->get_result()->fetch_assoc();&#xD;&#xA;                $stmt->close();&#xD;&#xA;                return $user;&#xD;&#xA;            } else {&#xD;&#xA;                return NULL;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;     &#xD;&#xA;        /**&#xD;&#xA;         * Check user is existed or not&#xD;&#xA;         */&#xD;&#xA;        public function isUserExisted($email) {&#xD;&#xA;            $stmt = $this->conn->prepare(""""SELECT email from users WHERE email = ?"""");&#xD;&#xA;     &#xD;&#xA;            $stmt->bind_param(""""s"""", $email);&#xD;&#xA;     &#xD;&#xA;            $stmt->execute();&#xD;&#xA;     &#xD;&#xA;            $stmt->store_result();&#xD;&#xA;     &#xD;&#xA;            if ($stmt->num_rows > 0) {&#xD;&#xA;                // user existed &#xD;&#xA;                $stmt->close();&#xD;&#xA;                return true;&#xD;&#xA;            } else {&#xD;&#xA;                // user not existed&#xD;&#xA;                $stmt->close();&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;     &#xD;&#xA;        /**&#xD;&#xA;         * Encrypting password&#xD;&#xA;         * @param password&#xD;&#xA;         * returns salt and encrypted password&#xD;&#xA;         */&#xD;&#xA;        public function hashSSHA($password) {&#xD;&#xA;     &#xD;&#xA;            $salt = sha1(rand());&#xD;&#xA;            $salt = substr($salt, 0, 10);&#xD;&#xA;            $encrypted = base64_encode(sha1($password . $salt, true) . $salt);&#xD;&#xA;            $hash = array(""""salt"""" => $salt, """"encrypted"""" => $encrypted);&#xD;&#xA;            return $hash;&#xD;&#xA;        }&#xD;&#xA;     &#xD;&#xA;        /**&#xD;&#xA;         * Decrypting password&#xD;&#xA;         * @param salt, password&#xD;&#xA;         * returns hash string&#xD;&#xA;         */&#xD;&#xA;        public function checkhashSSHA($salt, $password) {&#xD;&#xA;     &#xD;&#xA;            $hash = base64_encode(sha1($password . $salt, true) . $salt);&#xD;&#xA;     &#xD;&#xA;            return $hash;&#xD;&#xA;        }&#xD;&#xA;     &#xD;&#xA;    }&#xD;&#xA;     &#xD;&#xA;    ?>"
