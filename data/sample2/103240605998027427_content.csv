"Content"
"    (function($){&#xD;&#xA;    $.fn.autoComplete = function(options){&#xD;&#xA;        var o = $.extend({}, $.fn.autoComplete.defaults, options);&#xD;&#xA;        // public methods&#xD;&#xA;        if (typeof options == 'string') {&#xD;&#xA;            this.each(function(){&#xD;&#xA;                var that = $(this);&#xD;&#xA;                if (options == 'destroy') {&#xD;&#xA;                    $(window).off('resize.autocomplete', that.updateSC);&#xD;&#xA;                    that.off('blur.autocomplete focus.autocomplete keydown.autocomplete keyup.autocomplete');&#xD;&#xA;                    if (that.data('autocomplete'))&#xD;&#xA;                        that.attr('autocomplete', that.data('autocomplete'));&#xD;&#xA;                    else&#xD;&#xA;                        that.removeAttr('autocomplete');&#xD;&#xA;                    $(that.data('sc')).remove();&#xD;&#xA;                    that.removeData('sc').removeData('autocomplete');&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;            return this;&#xD;&#xA;        }&#xD;&#xA;        return this.each(function(){&#xD;&#xA;            var that = $(this);&#xD;&#xA;            // sc = 'suggestions container'&#xD;&#xA;            that.sc = $('<div class=""""autocomplete-suggestions '+o.menuClass+'""""></div>');&#xD;&#xA;            that.data('sc', that.sc).data('autocomplete', that.attr('autocomplete'));&#xD;&#xA;            that.attr('autocomplete', 'off');&#xD;&#xA;            that.cache = {};&#xD;&#xA;            that.last_val = '';&#xD;&#xA;            that.updateSC = function(resize, next){&#xD;&#xA;                that.sc.css({&#xD;&#xA;                    top: that.offset().top + that.outerHeight(),&#xD;&#xA;                    left: that.offset().left,&#xD;&#xA;                    width: that.outerWidth()&#xD;&#xA;                });&#xD;&#xA;                if (!resize) {&#xD;&#xA;                    that.sc.show();&#xD;&#xA;                    if (!that.sc.maxHeight) that.sc.maxHeight = parseInt(that.sc.css('max-height'));&#xD;&#xA;                    if (!that.sc.suggestionHeight) that.sc.suggestionHeight = $('.autocomplete-suggestion', that.sc).first().outerHeight();&#xD;&#xA;                    if (that.sc.suggestionHeight)&#xD;&#xA;                        if (!next) that.sc.scrollTop(0);&#xD;&#xA;                        else {&#xD;&#xA;                            var scrTop = that.sc.scrollTop(), selTop = next.offset().top - that.sc.offset().top;&#xD;&#xA;                            if (selTop + that.sc.suggestionHeight - that.sc.maxHeight > 0)&#xD;&#xA;                                that.sc.scrollTop(selTop + that.sc.suggestionHeight + scrTop - that.sc.maxHeight);&#xD;&#xA;                            else if (selTop < 0)&#xD;&#xA;                                that.sc.scrollTop(selTop + scrTop);&#xD;&#xA;                        }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            $(window).on('resize.autocomplete', that.updateSC);&#xD;&#xA;            that.sc.appendTo('body');&#xD;&#xA;            that.sc.on('mouseleave', '.autocomplete-suggestion', function (){&#xD;&#xA;                $('.autocomplete-suggestion.selected').removeClass('selected');&#xD;&#xA;            });&#xD;&#xA;            that.sc.on('mouseenter', '.autocomplete-suggestion', function (){&#xD;&#xA;                $('.autocomplete-suggestion.selected').removeClass('selected');&#xD;&#xA;                $(this).addClass('selected');&#xD;&#xA;            });&#xD;&#xA;            that.sc.on('mousedown click', '.autocomplete-suggestion', function (e){&#xD;&#xA;                var item = $(this), v = item.data('val');&#xD;&#xA;                if (v || item.hasClass('autocomplete-suggestion')) { // else outside click&#xD;&#xA;                    that.val(v);&#xD;&#xA;                    o.onSelect(e, v, item);&#xD;&#xA;                    that.sc.hide();&#xD;&#xA;                }&#xD;&#xA;                return false;&#xD;&#xA;            });&#xD;&#xA;            that.on('blur.autocomplete', function(){&#xD;&#xA;                try { over_sb = $('.autocomplete-suggestions:hover').length; } catch(e){ over_sb = 0; } // IE7 fix :hover&#xD;&#xA;                if (!over_sb) {&#xD;&#xA;                    that.last_val = that.val();&#xD;&#xA;                    that.sc.hide();&#xD;&#xA;                    setTimeout(function(){ that.sc.hide(); }, 350); // hide suggestions on fast input&#xD;&#xA;                } else if (!that.is(':focus')) setTimeout(function(){ that.focus(); }, 20);&#xD;&#xA;            });&#xD;&#xA;            if (!o.minChars) that.on('focus.autocomplete', function(){ that.last_val = '\n'; that.trigger('keyup.autocomplete'); });&#xD;&#xA;            function suggest(data){&#xD;&#xA;                var val = that.val();&#xD;&#xA;                that.cache[val] = data;&#xD;&#xA;                if (data.length && val.length >= o.minChars) {&#xD;&#xA;                    var s = '';&#xD;&#xA;                    for (var i=0;i<data.length;i++) s += o.renderItem(data[i], val);&#xD;&#xA;                    that.sc.html(s);&#xD;&#xA;                    that.updateSC(0);&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                    that.sc.hide();&#xD;&#xA;            }&#xD;&#xA;            that.on('keydown.autocomplete', function(e){&#xD;&#xA;                // down (40), up (38)&#xD;&#xA;                if ((e.which == 40 || e.which == 38) && that.sc.html()) {&#xD;&#xA;                    var next, sel = $('.autocomplete-suggestion.selected', that.sc);&#xD;&#xA;                    if (!sel.length) {&#xD;&#xA;                        next = (e.which == 40) ? $('.autocomplete-suggestion', that.sc).first() : $('.autocomplete-suggestion', that.sc).last();&#xD;&#xA;                        that.val(next.addClass('selected').data('val'));&#xD;&#xA;                    } else {&#xD;&#xA;                        next = (e.which == 40) ? sel.next('.autocomplete-suggestion') : sel.prev('.autocomplete-suggestion');&#xD;&#xA;                        if (next.length) { sel.removeClass('selected'); that.val(next.addClass('selected').data('val')); }&#xD;&#xA;                        else { sel.removeClass('selected'); that.val(that.last_val); next = 0; }&#xD;&#xA;                    }&#xD;&#xA;                    that.updateSC(0, next);&#xD;&#xA;                    return false;&#xD;&#xA;                }&#xD;&#xA;                // esc&#xD;&#xA;                else if (e.which == 27) that.val(that.last_val).sc.hide();&#xD;&#xA;                // enter or tab&#xD;&#xA;                else if (e.which == 13 || e.which == 9) {&#xD;&#xA;                    var sel = $('.autocomplete-suggestion.selected', that.sc);&#xD;&#xA;                    if (sel.length && that.sc.is(':visible')) { o.onSelect(e, sel.data('val'), sel); setTimeout(function(){ that.sc.hide(); }, 20); }&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;            that.on('keyup.autocomplete', function(e){&#xD;&#xA;                if (!~$.inArray(e.which, [13, 27, 35, 36, 37, 38, 39, 40])) {&#xD;&#xA;                    var val = that.val();&#xD;&#xA;                    if (val.length >= o.minChars) {&#xD;&#xA;                        if (val != that.last_val) {&#xD;&#xA;                            that.last_val = val;&#xD;&#xA;                            clearTimeout(that.timer);&#xD;&#xA;                            if (o.cache) {&#xD;&#xA;                                if (val in that.cache) { suggest(that.cache[val]); return; }&#xD;&#xA;                                // no requests if previous suggestions were empty&#xD;&#xA;                                for (var i=1; i<val.length-o.minChars; i++) {&#xD;&#xA;                                    var part = val.slice(0, val.length-i);&#xD;&#xA;                                    if (part in that.cache && !that.cache[part].length) { suggest([]); return; }&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;                            that.timer = setTimeout(function(){ o.source(val, suggest) }, o.delay);&#xD;&#xA;                        }&#xD;&#xA;                    } else {&#xD;&#xA;                        that.last_val = val;&#xD;&#xA;                        that.sc.hide();&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    $.fn.autoComplete.defaults = {&#xD;&#xA;        source: 0,&#xD;&#xA;        minChars: 3,&#xD;&#xA;        delay: 150,&#xD;&#xA;        cache: 1,&#xD;&#xA;        menuClass: '',&#xD;&#xA;        renderItem: function (item, search){&#xD;&#xA;            // escape special characters&#xD;&#xA;            search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');&#xD;&#xA;            var re = new RegExp(""""("""" + search.split(' ').join('|') + """")"""", """"gi"""");&#xD;&#xA;            return '<div class=""""autocomplete-suggestion"""" data-val=""""' + item + '"""">' + item.replace(re, """"<b>$1</b>"""") + '</div>';&#xD;&#xA;        },&#xD;&#xA;        onSelect: function(e, term, item){}&#xD;&#xA;    };&#xD;&#xA;    }(jQuery));"
