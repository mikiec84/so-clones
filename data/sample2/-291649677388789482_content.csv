"Content"
"    public class FFT {&#xD;&#xA;	  int n, m;&#xD;&#xA;	  // Lookup tables. Only need to recompute when size of FFT changes.&#xD;&#xA;	  double[] cos;&#xD;&#xA;	  double[] sin;&#xD;&#xA;	  public FFT(int n) {&#xD;&#xA;	      this.n = n;&#xD;&#xA;	      this.m = (int) (Math.log(n) / Math.log(2));&#xD;&#xA;	      // Make sure n is a power of 2&#xD;&#xA;	      if (n != (1 << m))&#xD;&#xA;	          throw new RuntimeException(""""FFT length must be power of 2"""");&#xD;&#xA;	      // precompute tables&#xD;&#xA;	      cos = new double[n / 2];&#xD;&#xA;	      sin = new double[n / 2];&#xD;&#xA;	      for (int i = 0; i < n / 2; i++) {&#xD;&#xA;	          cos[i] = Math.cos(-2 * Math.PI * i / n);&#xD;&#xA;	          sin[i] = Math.sin(-2 * Math.PI * i / n);&#xD;&#xA;	      }&#xD;&#xA;	  }&#xD;&#xA;	  public void fft(double[] x, double[] y) {&#xD;&#xA;	      int i, j, k, n1, n2, a;&#xD;&#xA;	      double c, s, t1, t2;&#xD;&#xA;	      // Bit-reverse&#xD;&#xA;	      j = 0;&#xD;&#xA;	      n2 = n / 2;&#xD;&#xA;	      for (i = 1; i < n - 1; i++) {&#xD;&#xA;	          n1 = n2;&#xD;&#xA;	          while (j >= n1) {&#xD;&#xA;	              j = j - n1;&#xD;&#xA;	              n1 = n1 / 2;&#xD;&#xA;	          }&#xD;&#xA;	          j = j + n1;&#xD;&#xA;	          if (i < j) {&#xD;&#xA;	              t1 = x[i];&#xD;&#xA;	              x[i] = x[j];&#xD;&#xA;	              x[j] = t1;&#xD;&#xA;	              t1 = y[i];&#xD;&#xA;	              y[i] = y[j];&#xD;&#xA;	              y[j] = t1;&#xD;&#xA;	          }&#xD;&#xA;	      }&#xD;&#xA;	      // FFT&#xD;&#xA;	      n1 = 0;&#xD;&#xA;	      n2 = 1;&#xD;&#xA;	      for (i = 0; i < m; i++) {&#xD;&#xA;	          n1 = n2;&#xD;&#xA;	          n2 = n2 + n2;&#xD;&#xA;	          a = 0;&#xD;&#xA;	          for (j = 0; j < n1; j++) {&#xD;&#xA;	              c = cos[a];&#xD;&#xA;	              s = sin[a];&#xD;&#xA;	              a += 1 << (m - i - 1);&#xD;&#xA;	              for (k = j; k < n; k = k + n2) {&#xD;&#xA;	                  t1 = c * x[k + n1] - s * y[k + n1];&#xD;&#xA;	                  t2 = s * x[k + n1] + c * y[k + n1];&#xD;&#xA;	                  x[k + n1] = x[k] - t1;&#xD;&#xA;	                  y[k + n1] = y[k] - t2;&#xD;&#xA;	                  x[k] = x[k] + t1;&#xD;&#xA;	                  y[k] = y[k] + t2;&#xD;&#xA;	              }&#xD;&#xA;	          }&#xD;&#xA;	      }&#xD;&#xA;	  }&#xD;&#xA;	}"
