"Content"
"    import java.awt.*;&#xD;&#xA;    import java.awt.event.ActionEvent;&#xD;&#xA;    import java.awt.event.ActionListener;&#xD;&#xA;    import javax.swing.*;&#xD;&#xA;    import javax.swing.table.*;&#xD;&#xA;    &#xD;&#xA;    public class RemoveAddRows extends JFrame {&#xD;&#xA;    &#xD;&#xA;        private static final long serialVersionUID = 1L;&#xD;&#xA;        private Object[] columnNames = {""""Type"""", """"Company"""", """"Shares"""", """"Price""""};&#xD;&#xA;        private Object[][] data = {&#xD;&#xA;            {""""Buy"""", """"IBM"""", new Integer(1000), new Double(80.50)},&#xD;&#xA;            {""""Sell"""", """"MicroSoft"""", new Integer(2000), new Double(6.25)},&#xD;&#xA;            {""""Sell"""", """"Apple"""", new Integer(3000), new Double(7.35)},&#xD;&#xA;            {""""Buy"""", """"Nortel"""", new Integer(4000), new Double(20.00)}&#xD;&#xA;        };&#xD;&#xA;        private JTable table;&#xD;&#xA;        private DefaultTableModel model;&#xD;&#xA;    &#xD;&#xA;        public RemoveAddRows() {&#xD;&#xA;    &#xD;&#xA;            model = new DefaultTableModel(data, columnNames) {&#xD;&#xA;    &#xD;&#xA;                private static final long serialVersionUID = 1L;&#xD;&#xA;    &#xD;&#xA;                @Override&#xD;&#xA;                public Class getColumnClass(int column) {&#xD;&#xA;                    return getValueAt(0, column).getClass();&#xD;&#xA;                }&#xD;&#xA;            };&#xD;&#xA;            table = new JTable(model) {&#xD;&#xA;    &#xD;&#xA;                private static final long serialVersionUID = 1L;&#xD;&#xA;    &#xD;&#xA;                @Override&#xD;&#xA;                public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {&#xD;&#xA;                    Component c = super.prepareRenderer(renderer, row, column);&#xD;&#xA;                    int firstRow = 0;&#xD;&#xA;                    int lastRow = table.getRowCount() - 1;&#xD;&#xA;                    int width = 0;&#xD;&#xA;                    if (row == lastRow) {&#xD;&#xA;                        ((JComponent) c).setBackground(Color.red);&#xD;&#xA;                    } else if (row == firstRow) {&#xD;&#xA;                        ((JComponent) c).setBackground(Color.blue);&#xD;&#xA;                    } else {&#xD;&#xA;                        ((JComponent) c).setBackground(table.getBackground());&#xD;&#xA;                    }&#xD;&#xA;                    /*if (!isRowSelected(row)) {&#xD;&#xA;                    String type = (String) getModel().getValueAt(row, 0);&#xD;&#xA;                    c.setBackground(""""Buy"""".equals(type) ? Color.GREEN : Color.YELLOW);&#xD;&#xA;                    }&#xD;&#xA;                    if (isRowSelected(row) && isColumnSelected(column)) {&#xD;&#xA;                    ((JComponent) c).setBorder(new LineBorder(Color.red));&#xD;&#xA;                    }*/&#xD;&#xA;                    return c;&#xD;&#xA;                }&#xD;&#xA;            };&#xD;&#xA;            table.setPreferredScrollableViewportSize(table.getPreferredSize());&#xD;&#xA;            JScrollPane scrollPane = new JScrollPane(table);&#xD;&#xA;            add(scrollPane);&#xD;&#xA;            JButton button1 = new JButton(""""Remove all rows"""");&#xD;&#xA;            button1.addActionListener(new ActionListener() {&#xD;&#xA;    &#xD;&#xA;                public void actionPerformed(ActionEvent arg0) {&#xD;&#xA;                    if (model.getRowCount() > 0) {&#xD;&#xA;                        for (int i = model.getRowCount() - 1; i > -1; i--) {&#xD;&#xA;                            model.removeRow(i);&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    System.out.println(""""model.getRowCount() --->"""" + model.getRowCount());&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;            JButton button2 = new JButton(""""Add new rows"""");&#xD;&#xA;            button2.addActionListener(new ActionListener() {&#xD;&#xA;    &#xD;&#xA;                public void actionPerformed(ActionEvent arg0) {&#xD;&#xA;                    Object[] data0 = {""""Buy"""", """"IBM"""", new Integer(1000), new Double(80.50)};&#xD;&#xA;                    model.addRow(data0);&#xD;&#xA;                    Object[] data1 = {""""Sell"""", """"MicroSoft"""", new Integer(2000), new Double(6.25)};&#xD;&#xA;                    model.addRow(data1);&#xD;&#xA;                    Object[] data2 = {""""Sell"""", """"Apple"""", new Integer(3000), new Double(7.35)};&#xD;&#xA;                    model.addRow(data2);&#xD;&#xA;                    Object[] data3 = {""""Buy"""", """"Nortel"""", new Integer(4000), new Double(20.00)};&#xD;&#xA;                    model.addRow(data3);&#xD;&#xA;                    System.out.println(""""model.getRowCount() --->"""" + model.getRowCount());&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;            JPanel southPanel = new JPanel();&#xD;&#xA;            southPanel.add(button1);&#xD;&#xA;            southPanel.add(button2);&#xD;&#xA;            add(southPanel, BorderLayout.SOUTH);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static void main(String[] args) {&#xD;&#xA;            RemoveAddRows frame = new RemoveAddRows();&#xD;&#xA;            frame.setDefaultCloseOperation(EXIT_ON_CLOSE);&#xD;&#xA;            frame.pack();&#xD;&#xA;            frame.setLocationRelativeTo(null);&#xD;&#xA;            frame.setVisible(true);&#xD;&#xA;        }&#xD;&#xA;    }"
