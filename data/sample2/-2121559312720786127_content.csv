"Content"
"    class EDUser {&#xD;&#xA;        var firstName: String&#xD;&#xA;        var lastName: String?&#xD;&#xA;        var birthDate: NSDate?&#xD;&#xA;        &#xD;&#xA;        init(firstName: String, lastName: String?, birthDate: NSDate?) {&#xD;&#xA;            self.firstName = firstName&#xD;&#xA;            self.lastName = lastName&#xD;&#xA;            self.birthDate = birthDate&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    // MARK: - Accessor&#xD;&#xA;    extension EDUser {&#xD;&#xA;        class var currentUser: EDUser? {&#xD;&#xA;            get {&#xD;&#xA;                return loadCurrentUserFromDisk()&#xD;&#xA;            }&#xD;&#xA;            set {&#xD;&#xA;                saveCurrentUserToDiskWithUser(newValue)&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    // MARK: - Log in and out&#xD;&#xA;    extension EDUser {&#xD;&#xA;        class func loginWithUsername(username: String,&#xD;&#xA;                               andPassword password: String,&#xD;&#xA;                               callback: (EDUser?, NSError) -> Void) {&#xD;&#xA;            // Access the web API&#xD;&#xA;            var parameters = [&#xD;&#xA;                """"username"""": username,&#xD;&#xA;                """"password"""": password&#xD;&#xA;            ]&#xD;&#xA;            YourNetworkingLibrary.request(.POST,&#xD;&#xA;                              """"https://api.yourwebsite.com/login"""",&#xD;&#xA;                              parameters: parameters).responseJSON { &#xD;&#xA;                response in&#xD;&#xA;                if response.statusCode == .Success {&#xD;&#xA;                    let user = EDUser(firstName: response[""""firstName""""],&#xD;&#xA;                           lastName: response[""""lastName""""],&#xD;&#xA;                           birthDate: NSDate.dateFromString(response[""""birthDate""""]))&#xD;&#xA;                    currentUser = user&#xD;&#xA;                    callback(currentUser, nil)&#xD;&#xA;                } else {&#xD;&#xA;                    callback(nil, yourError)&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        class func logout() {&#xD;&#xA;            deleteCurrentUserFromDisk()&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    // MARK: - Data&#xD;&#xA;    extension EDUser {&#xD;&#xA;        class private func saveCurrentUserToDiskWithUser(user: EDUser) {&#xD;&#xA;            // In this process, you encode the user to file and store it&#xD;&#xA;        }&#xD;&#xA;        class private func loadCurrentUserFromDisk() -> EDUser? {&#xD;&#xA;            // In this process, you get the file and decode that to EDUser object&#xD;&#xA;            // This function will return nil if the file is not exist&#xD;&#xA;        }&#xD;&#xA;        class private func deleteCurrentUserFromDisk() {&#xD;&#xA;            // This will delete the current user file from disk&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    // MARK: - Helper&#xD;&#xA;    extension NSDate {&#xD;&#xA;        class func dateFromString(string: String) -> NSDate {&#xD;&#xA;            // convert string into NSDate&#xD;&#xA;        }&#xD;&#xA;    }"
