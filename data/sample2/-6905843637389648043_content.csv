"Content"
"	import java.util.Collection;&#xD;&#xA;	import java.util.Collections;&#xD;&#xA;	import java.util.HashMap;&#xD;&#xA;	import java.util.List;&#xD;&#xA;	import java.util.Map;&#xD;&#xA;	import com.softmodeler.common.CommonPlugin;&#xD;&#xA;	import com.softmodeler.model.OutputNode;&#xD;&#xA;	import com.softmodeler.service.IViewService;&#xD;&#xA;	import com.vaadin.data.Container.Hierarchical;&#xD;&#xA;	import com.vaadin.data.Item;&#xD;&#xA;	import com.vaadin.data.Property;&#xD;&#xA;	import com.vaadin.data.util.BeanItem;&#xD;&#xA;	/**&#xD;&#xA;	 * @author Flavio Donz√©&#xD;&#xA;	 * @version 1.0&#xD;&#xA;	 */&#xD;&#xA;	public class OutputNodeHierachical implements Hierarchical {&#xD;&#xA;		private static final long serialVersionUID = 8289589835030184018L;&#xD;&#xA;		/** the view service */&#xD;&#xA;		private IViewService service = CommonPlugin.getService(IViewService.class);&#xD;&#xA;		/** collection of all root nodes */&#xD;&#xA;		private List<OutputNode> rootNodes = null;&#xD;&#xA;		/** parent=>children mapping */&#xD;&#xA;		private Map<OutputNode, List<OutputNode>> hierarchy = new HashMap<>();&#xD;&#xA;		/**&#xD;&#xA;		 * constructor&#xD;&#xA;		 *&#xD;&#xA;		 * @param rootNodes collection of all root nodes&#xD;&#xA;		 */&#xD;&#xA;		public OutputNodeHierachical(List<OutputNode> rootNodes) {&#xD;&#xA;			this.rootNodes = Collections.unmodifiableList(rootNodes);&#xD;&#xA;			addToHierarchy(rootNodes);&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public Collection<?> getChildren(Object itemId) {&#xD;&#xA;			try {&#xD;&#xA;				List<OutputNode> children = hierarchy.get(itemId);&#xD;&#xA;				if (children == null) {&#xD;&#xA;					OutputNode node = (OutputNode) itemId;&#xD;&#xA;					children = service.getChildren(node.getNodeId(), false);&#xD;&#xA;					hierarchy.put(node, children);&#xD;&#xA;					// add children to hierarchy, their children will be added on click&#xD;&#xA;					addToHierarchy(children);&#xD;&#xA;				}&#xD;&#xA;				return children;&#xD;&#xA;			} catch (Exception e) {&#xD;&#xA;				VaadinUtil.handleException(e);&#xD;&#xA;			}&#xD;&#xA;			return null;&#xD;&#xA;		}&#xD;&#xA;		/**&#xD;&#xA;		 * add each element to the hierarchy without their children hierarchy(child=>null)&#xD;&#xA;		 *&#xD;&#xA;		 * @param children elements to add&#xD;&#xA;		 */&#xD;&#xA;		private void addToHierarchy(List<OutputNode> children) {&#xD;&#xA;			for (OutputNode child : children) {&#xD;&#xA;				hierarchy.put(child, null);&#xD;&#xA;			}&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public boolean areChildrenAllowed(Object itemId) {&#xD;&#xA;			return !((OutputNode) itemId).getChilds().isEmpty();&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public boolean hasChildren(Object itemId) {&#xD;&#xA;			return !((OutputNode) itemId).getChilds().isEmpty();&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public Object getParent(Object itemId) {&#xD;&#xA;			String parentId = ((OutputNode) itemId).getParentId();&#xD;&#xA;			for (OutputNode node : hierarchy.keySet()) {&#xD;&#xA;				if (node.getNodeId().equals(parentId)) {&#xD;&#xA;					return node;&#xD;&#xA;				}&#xD;&#xA;			}&#xD;&#xA;			return null;&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public Collection<?> rootItemIds() {&#xD;&#xA;			return rootNodes;&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public boolean isRoot(Object itemId) {&#xD;&#xA;			return rootNodes.contains(itemId);&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public Item getItem(Object itemId) {&#xD;&#xA;			return new BeanItem<OutputNode>((OutputNode) itemId);&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public boolean containsId(Object itemId) {&#xD;&#xA;			return hierarchy.containsKey(itemId);&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public Collection<?> getItemIds() {&#xD;&#xA;			return hierarchy.keySet();&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public int size() {&#xD;&#xA;			return hierarchy.size();&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public boolean setParent(Object itemId, Object newParentId) throws UnsupportedOperationException {&#xD;&#xA;			throw new UnsupportedOperationException();&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public boolean setChildrenAllowed(Object itemId, boolean areChildrenAllowed) throws UnsupportedOperationException {&#xD;&#xA;			throw new UnsupportedOperationException();&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public Item addItem(Object itemId) throws UnsupportedOperationException {&#xD;&#xA;			throw new UnsupportedOperationException();&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public Object addItem() throws UnsupportedOperationException {&#xD;&#xA;			throw new UnsupportedOperationException();&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public boolean removeItem(Object itemId) throws UnsupportedOperationException {&#xD;&#xA;			throw new UnsupportedOperationException();&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public boolean removeAllItems() throws UnsupportedOperationException {&#xD;&#xA;			throw new UnsupportedOperationException();&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public Class<?> getType(Object propertyId) {&#xD;&#xA;			throw new UnsupportedOperationException();&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public Collection<?> getContainerPropertyIds() {&#xD;&#xA;			throw new UnsupportedOperationException();&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public Property<?> getContainerProperty(Object itemId, Object propertyId) {&#xD;&#xA;			throw new UnsupportedOperationException();&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public boolean addContainerProperty(Object propertyId, Class<?> type, Object defaultValue) throws UnsupportedOperationException {&#xD;&#xA;			throw new UnsupportedOperationException();&#xD;&#xA;		}&#xD;&#xA;		@Override&#xD;&#xA;		public boolean removeContainerProperty(Object propertyId) throws UnsupportedOperationException {&#xD;&#xA;			throw new UnsupportedOperationException();&#xD;&#xA;		}&#xD;&#xA;	}"
