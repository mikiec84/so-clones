"Content"
"        /**&#xD;&#xA;         * Uses a combination of a PageTransformer and swapping X & Y coordinates&#xD;&#xA;         * of touch events to create the illusion of a vertically scrolling ViewPager. &#xD;&#xA;         * &#xD;&#xA;         * Requires API 11+&#xD;&#xA;         * &#xD;&#xA;         */&#xD;&#xA;    &#xD;&#xA;    public class VerticalViewPager extends ViewPager {&#xD;&#xA;    public VerticalViewPager(Context context) {&#xD;&#xA;        super(context);&#xD;&#xA;        init();&#xD;&#xA;    }&#xD;&#xA;    public VerticalViewPager(Context context, AttributeSet attrs) {&#xD;&#xA;        super(context, attrs);&#xD;&#xA;        init();&#xD;&#xA;    }&#xD;&#xA;    private void init() {&#xD;&#xA;        // The majority of the magic happens here&#xD;&#xA;        setPageTransformer(true, new VerticalPageTransformer());&#xD;&#xA;        // The easiest way to get rid of the overscroll drawing that happens on the left and right&#xD;&#xA;        setOverScrollMode(OVER_SCROLL_NEVER);&#xD;&#xA;    }&#xD;&#xA;    private class VerticalPageTransformer implements ViewPager.PageTransformer {&#xD;&#xA;        @Override&#xD;&#xA;        public void transformPage(View view, float position) {&#xD;&#xA;            if (position < -1) { // [-Infinity,-1)&#xD;&#xA;                // This page is way off-screen to the left.&#xD;&#xA;                view.setAlpha(0);&#xD;&#xA;            } else if (position <= 1) { // [-1,1]&#xD;&#xA;                view.setAlpha(1);&#xD;&#xA;                // Counteract the default slide transition&#xD;&#xA;                view.setTranslationX(view.getWidth() * -position);&#xD;&#xA;                //set Y position to swipe in from top&#xD;&#xA;                float yPosition = position * view.getHeight();&#xD;&#xA;                view.setTranslationY(yPosition);&#xD;&#xA;            } else { // (1,+Infinity]&#xD;&#xA;                // This page is way off-screen to the right.&#xD;&#xA;                view.setAlpha(0);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    /**&#xD;&#xA;     * Swaps the X and Y coordinates of your touch event.&#xD;&#xA;     */&#xD;&#xA;    private MotionEvent swapXY(MotionEvent ev) {&#xD;&#xA;        float width = getWidth();&#xD;&#xA;        float height = getHeight();&#xD;&#xA;        float newX = (ev.getY() / height) * width;&#xD;&#xA;        float newY = (ev.getX() / width) * height;&#xD;&#xA;        ev.setLocation(newX, newY);&#xD;&#xA;        return ev;&#xD;&#xA;    }&#xD;&#xA;    @Override&#xD;&#xA;    public boolean onInterceptTouchEvent(MotionEvent ev){&#xD;&#xA;        boolean intercepted = super.onInterceptTouchEvent(swapXY(ev));&#xD;&#xA;        swapXY(ev); // return touch coordinates to original reference frame for any child views&#xD;&#xA;        return intercepted;&#xD;&#xA;    }&#xD;&#xA;    @Override&#xD;&#xA;    public boolean onTouchEvent(MotionEvent ev) {&#xD;&#xA;        return super.onTouchEvent(swapXY(ev));&#xD;&#xA;    }&#xD;&#xA;    }"
