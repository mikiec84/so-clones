"Content"
"    /// <summary> &#xD;&#xA;    /// Leverages the Windows API (advapi32.dll) to programmatically impersonate a user. &#xD;&#xA;    /// </summary> &#xD;&#xA;    public class ImpersonationContext : IDisposable &#xD;&#xA;    { &#xD;&#xA;        #region constants &#xD;&#xA;     &#xD;&#xA;        private const int LOGON32_LOGON_INTERACTIVE = 2; &#xD;&#xA;        private const int LOGON32_PROVIDER_DEFAULT = 0; &#xD;&#xA;     &#xD;&#xA;        #endregion &#xD;&#xA;     &#xD;&#xA;        #region global variables &#xD;&#xA;     &#xD;&#xA;        private WindowsImpersonationContext impersonationContext; &#xD;&#xA;        private bool impersonating; &#xD;&#xA;     &#xD;&#xA;        #endregion &#xD;&#xA;     &#xD;&#xA;        #region unmanaged code &#xD;&#xA;     &#xD;&#xA;        [DllImport(""""advapi32.dll"""")] &#xD;&#xA;        private static extern int LogonUserA(String lpszUserName, String lpszDomain, String lpszPassword, int dwLogonType, int dwLogonProvider, ref IntPtr phToken); &#xD;&#xA;     &#xD;&#xA;        [DllImport(""""advapi32.dll"""", CharSet = CharSet.Auto, SetLastError = true)] &#xD;&#xA;        private static extern int DuplicateToken(IntPtr hToken, int impersonationLevel, ref IntPtr hNewToken); &#xD;&#xA;     &#xD;&#xA;        [DllImport(""""advapi32.dll"""", CharSet = CharSet.Auto, SetLastError = true)] &#xD;&#xA;        private static extern bool RevertToSelf(); &#xD;&#xA;     &#xD;&#xA;        [DllImport(""""kernel32.dll"""", CharSet = CharSet.Auto)] &#xD;&#xA;        private static extern bool CloseHandle(IntPtr handle); &#xD;&#xA;     &#xD;&#xA;        #endregion &#xD;&#xA;     &#xD;&#xA;        #region constructors &#xD;&#xA;     &#xD;&#xA;        public ImpersonationContext() &#xD;&#xA;        { &#xD;&#xA;            impersonating = false; &#xD;&#xA;        } &#xD;&#xA;     &#xD;&#xA;        /// <summary> &#xD;&#xA;        /// Overloaded constructor and begins impersonating. &#xD;&#xA;        /// </summary> &#xD;&#xA;        public ImpersonationContext(string userName, string password, string domain) &#xD;&#xA;        { &#xD;&#xA;            this.BeginImpersonationContext(userName, password, domain); &#xD;&#xA;        } &#xD;&#xA;     &#xD;&#xA;        #endregion &#xD;&#xA;     &#xD;&#xA;        #region impersonation methods &#xD;&#xA;     &#xD;&#xA;        /// <summary> &#xD;&#xA;        /// Begins the impersonation context for the specified user. &#xD;&#xA;        /// </summary> &#xD;&#xA;        /// <remarks>Don't call this method if you used the overloaded constructor.</remarks> &#xD;&#xA;        public void BeginImpersonationContext(string userName, string password, string domain) &#xD;&#xA;        { &#xD;&#xA;            //initialize token and duplicate variables &#xD;&#xA;            IntPtr token = IntPtr.Zero; &#xD;&#xA;            IntPtr tokenDuplicate = IntPtr.Zero; &#xD;&#xA;     &#xD;&#xA;            if (RevertToSelf()) &#xD;&#xA;            { &#xD;&#xA;                if (LogonUserA(userName, domain, password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, ref token) != 0) &#xD;&#xA;                { &#xD;&#xA;                    if (DuplicateToken(token, 2, ref tokenDuplicate) != 0) &#xD;&#xA;                    { &#xD;&#xA;                        using (WindowsIdentity tempWindowsIdentity = new WindowsIdentity(tokenDuplicate)) &#xD;&#xA;                        { &#xD;&#xA;                            //begin the impersonation context and mark impersonating true &#xD;&#xA;                            impersonationContext = tempWindowsIdentity.Impersonate(); &#xD;&#xA;                            impersonating = true; &#xD;&#xA;                        } &#xD;&#xA;                    } &#xD;&#xA;                } &#xD;&#xA;            } &#xD;&#xA;     &#xD;&#xA;            //close the handle to the account token &#xD;&#xA;            if (token != IntPtr.Zero) &#xD;&#xA;                CloseHandle(token); &#xD;&#xA;     &#xD;&#xA;            //close the handle to the duplicated account token &#xD;&#xA;            if (tokenDuplicate != IntPtr.Zero) &#xD;&#xA;                CloseHandle(tokenDuplicate); &#xD;&#xA;        } &#xD;&#xA;     &#xD;&#xA;        /// <summary> &#xD;&#xA;        /// Ends the current impersonation context. &#xD;&#xA;        /// </summary> &#xD;&#xA;        public void EndImpersonationContext() &#xD;&#xA;        { &#xD;&#xA;            //if the context exists undo it and dispose of the object &#xD;&#xA;            if (impersonationContext != null) &#xD;&#xA;            { &#xD;&#xA;                //end the impersonation context and dispose of the object &#xD;&#xA;                impersonationContext.Undo(); &#xD;&#xA;                impersonationContext.Dispose(); &#xD;&#xA;            } &#xD;&#xA;     &#xD;&#xA;            //mark the impersonation flag false &#xD;&#xA;            impersonating = false; &#xD;&#xA;        } &#xD;&#xA;     &#xD;&#xA;        #endregion &#xD;&#xA;     &#xD;&#xA;        #region properties &#xD;&#xA;     &#xD;&#xA;        /// <summary> &#xD;&#xA;        /// Gets a value indicating whether the impersonation is currently active. &#xD;&#xA;        /// </summary> &#xD;&#xA;        public bool Impersonating &#xD;&#xA;        { &#xD;&#xA;            get &#xD;&#xA;            { &#xD;&#xA;                return impersonating; &#xD;&#xA;            } &#xD;&#xA;        } &#xD;&#xA;     &#xD;&#xA;        #endregion &#xD;&#xA;     &#xD;&#xA;        #region IDisposable implementation &#xD;&#xA;     &#xD;&#xA;        ~ImpersonationContext() &#xD;&#xA;        { &#xD;&#xA;            Dispose(false); &#xD;&#xA;        } &#xD;&#xA;     &#xD;&#xA;        public void Dispose() &#xD;&#xA;        { &#xD;&#xA;            Dispose(true);                &#xD;&#xA;        } &#xD;&#xA;     &#xD;&#xA;        protected virtual void Dispose(bool disposing) &#xD;&#xA;        { &#xD;&#xA;            if (disposing) &#xD;&#xA;            { &#xD;&#xA;                if (impersonationContext != null) &#xD;&#xA;                { &#xD;&#xA;                    impersonationContext.Undo(); &#xD;&#xA;                    impersonationContext.Dispose(); &#xD;&#xA;                } &#xD;&#xA;            } &#xD;&#xA;        } &#xD;&#xA;     &#xD;&#xA;        #endregion     &#xD;&#xA;    } "
