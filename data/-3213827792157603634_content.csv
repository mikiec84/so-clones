"Content"
"            var dateFormat = function () {&#xD;&#xA;	        var	token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|""""[^""""]*""""|'[^']*'/g,&#xD;&#xA;		        timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,&#xD;&#xA;		        timezoneClip = /[^-+\dA-Z]/g,&#xD;&#xA;		        pad = function (val, len) {&#xD;&#xA;			        val = String(val);&#xD;&#xA;			        len = len || 2;&#xD;&#xA;			        while (val.length < len) val = """"0"""" + val;&#xD;&#xA;			        return val;&#xD;&#xA;		        };&#xD;&#xA;	        // Regexes and supporting functions are cached through closure&#xD;&#xA;	        return function (date, mask, utc) {&#xD;&#xA;		        var dF = dateFormat;&#xD;&#xA;		        // You can't provide utc if you skip other args (use the """"UTC:"""" mask prefix)&#xD;&#xA;		        if (arguments.length == 1 && Object.prototype.toString.call(date) == """"[object String]"""" && !/\d/.test(date)) {&#xD;&#xA;			        mask = date;&#xD;&#xA;			        date = undefined;&#xD;&#xA;		        }&#xD;&#xA;		        // Passing date through Date applies Date.parse, if necessary&#xD;&#xA;		        date = date ? new Date(date) : new Date;&#xD;&#xA;		        if (isNaN(date)) throw SyntaxError(""""invalid date"""");&#xD;&#xA;		        mask = String(dF.masks[mask] || mask || dF.masks[""""default""""]);&#xD;&#xA;		        // Allow setting the utc argument via the mask&#xD;&#xA;		        if (mask.slice(0, 4) == """"UTC:"""") {&#xD;&#xA;			        mask = mask.slice(4);&#xD;&#xA;			        utc = true;&#xD;&#xA;		        }&#xD;&#xA;		        var	_ = utc ? """"getUTC"""" : """"get"""",&#xD;&#xA;			        d = date[_ + """"Date""""](),&#xD;&#xA;			        D = date[_ + """"Day""""](),&#xD;&#xA;			        m = date[_ + """"Month""""](),&#xD;&#xA;			        y = date[_ + """"FullYear""""](),&#xD;&#xA;			        H = date[_ + """"Hours""""](),&#xD;&#xA;			        M = date[_ + """"Minutes""""](),&#xD;&#xA;			        s = date[_ + """"Seconds""""](),&#xD;&#xA;			        L = date[_ + """"Milliseconds""""](),&#xD;&#xA;			        o = utc ? 0 : date.getTimezoneOffset(),&#xD;&#xA;			        flags = {&#xD;&#xA;				        d:    d,&#xD;&#xA;				        dd:   pad(d),&#xD;&#xA;				        ddd:  dF.i18n.dayNames[D],&#xD;&#xA;				        dddd: dF.i18n.dayNames[D + 7],&#xD;&#xA;				        m:    m + 1,&#xD;&#xA;				        mm:   pad(m + 1),&#xD;&#xA;				        mmm:  dF.i18n.monthNames[m],&#xD;&#xA;				        mmmm: dF.i18n.monthNames[m + 12],&#xD;&#xA;				        yy:   String(y).slice(2),&#xD;&#xA;				        yyyy: y,&#xD;&#xA;				        h:    H % 12 || 12,&#xD;&#xA;				        hh:   pad(H % 12 || 12),&#xD;&#xA;				        H:    H,&#xD;&#xA;				        HH:   pad(H),&#xD;&#xA;				        M:    M,&#xD;&#xA;				        MM:   pad(M),&#xD;&#xA;				        s:    s,&#xD;&#xA;				        ss:   pad(s),&#xD;&#xA;				        l:    pad(L, 3),&#xD;&#xA;				        L:    pad(L > 99 ? Math.round(L / 10) : L),&#xD;&#xA;				        t:    H < 12 ? """"a""""  : """"p"""",&#xD;&#xA;				        tt:   H < 12 ? """"am"""" : """"pm"""",&#xD;&#xA;				        T:    H < 12 ? """"A""""  : """"P"""",&#xD;&#xA;				        TT:   H < 12 ? """"AM"""" : """"PM"""",&#xD;&#xA;				        Z:    utc ? """"UTC"""" : (String(date).match(timezone) || [""""""""]).pop().replace(timezoneClip, """"""""),&#xD;&#xA;				        o:    (o > 0 ? """"-"""" : """"+"""") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),&#xD;&#xA;				        S:    [""""th"""", """"st"""", """"nd"""", """"rd""""][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]&#xD;&#xA;			        };&#xD;&#xA;		        return mask.replace(token, function ($0) {&#xD;&#xA;			        return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);&#xD;&#xA;		        });&#xD;&#xA;	        };&#xD;&#xA;        }();&#xD;&#xA;        // Some common format strings&#xD;&#xA;        dateFormat.masks = {&#xD;&#xA;	        """"default"""":      """"ddd mmm dd yyyy HH:MM:ss"""",&#xD;&#xA;	        shortDate:      """"m/d/yy"""",&#xD;&#xA;	        mediumDate:     """"mmm d, yyyy"""",&#xD;&#xA;	        longDate:       """"mmmm d, yyyy"""",&#xD;&#xA;	        fullDate:       """"dddd, mmmm d, yyyy"""",&#xD;&#xA;	        shortTime:      """"h:MM TT"""",&#xD;&#xA;	        mediumTime:     """"h:MM:ss TT"""",&#xD;&#xA;	        longTime:       """"h:MM:ss TT Z"""",&#xD;&#xA;	        isoDate:        """"yyyy-mm-dd"""",&#xD;&#xA;	        isoTime:        """"HH:MM:ss"""",&#xD;&#xA;	        isoDateTime:    """"yyyy-mm-dd'T'HH:MM:ss"""",&#xD;&#xA;	        isoUtcDateTime: """"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'""""&#xD;&#xA;        };&#xD;&#xA;        // Internationalization strings&#xD;&#xA;        dateFormat.i18n = {&#xD;&#xA;	        dayNames: [&#xD;&#xA;		        """"Sun"""", """"Mon"""", """"Tue"""", """"Wed"""", """"Thu"""", """"Fri"""", """"Sat"""",&#xD;&#xA;		        """"Sunday"""", """"Monday"""", """"Tuesday"""", """"Wednesday"""", """"Thursday"""", """"Friday"""", """"Saturday""""&#xD;&#xA;	        ],&#xD;&#xA;	        monthNames: [&#xD;&#xA;		        """"Jan"""", """"Feb"""", """"Mar"""", """"Apr"""", """"May"""", """"Jun"""", """"Jul"""", """"Aug"""", """"Sep"""", """"Oct"""", """"Nov"""", """"Dec"""",&#xD;&#xA;		        """"January"""", """"February"""", """"March"""", """"April"""", """"May"""", """"June"""", """"July"""", """"August"""", """"September"""", """"October"""", """"November"""", """"December""""&#xD;&#xA;	        ]&#xD;&#xA;        };&#xD;&#xA;        // For convenience...&#xD;&#xA;        Date.prototype.format = function (mask, utc) {&#xD;&#xA;	        return dateFormat(this, mask, utc);&#xD;&#xA;        };"
