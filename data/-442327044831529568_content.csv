"Content"
"        import android.content.Context;&#xD;&#xA;    import android.graphics.Typeface;&#xD;&#xA;    &#xD;&#xA;    public final class Farsi {&#xD;&#xA;    &#xD;&#xA;        public static boolean isFarsiConversionNeeded = true;&#xD;&#xA;    &#xD;&#xA;        private final static String szLamAndAlef = Character&#xD;&#xA;                .toString((char) 0xfedf)&#xD;&#xA;                + Character.toString((char) 0xfe8e); // Lam + Alef&#xD;&#xA;    &#xD;&#xA;        private final static String szLamStickAndAlef = Character&#xD;&#xA;                .toString((char) 0xfee0)&#xD;&#xA;                + Character.toString((char) 0xfe8e); // Lam (Sticky !!!)+&#xD;&#xA;                                                        // Alef&#xD;&#xA;    &#xD;&#xA;        private final static String szLa = Character.toString((char) 0xfefb); // La&#xD;&#xA;        private final static String szLaStick = Character.toString((char) 0xfefc); // La&#xD;&#xA;                                                                                    // (Sticky!!!)&#xD;&#xA;    &#xD;&#xA;        private final static String szLamAndAlefWoosim = Character&#xD;&#xA;                .toString((char) 0xe1)&#xD;&#xA;                + Character.toString((char) 0xbb); // Lam + Alef&#xD;&#xA;    &#xD;&#xA;        private final static String szLamStickAndAlefWoosim = Character&#xD;&#xA;                .toString((char) 0x90)&#xD;&#xA;                + Character.toString((char) 0xbb); // Lam (Sticky !!!)+&#xD;&#xA;                                                    // Alef&#xD;&#xA;    &#xD;&#xA;        private final static String szLaWoosim = Character.toString((char) 0xd9); // La&#xD;&#xA;        private final static String szLaStickWoosim = Character&#xD;&#xA;                .toString((char) 0xd9); // La&#xD;&#xA;    &#xD;&#xA;        // (Sticky!!!)&#xD;&#xA;    &#xD;&#xA;        private static final class struc {&#xD;&#xA;            public char character;&#xD;&#xA;            public char endGlyph;&#xD;&#xA;            public char iniGlyph;&#xD;&#xA;            public char midGlyph;&#xD;&#xA;            public char isoGlyph;&#xD;&#xA;    &#xD;&#xA;            public struc(char Character, char EndGlyph, char IniGlyph,&#xD;&#xA;                    char MidGlyph, char IsoGlyph) {&#xD;&#xA;                character = Character;&#xD;&#xA;                endGlyph = EndGlyph;&#xD;&#xA;                iniGlyph = IniGlyph;&#xD;&#xA;                midGlyph = MidGlyph;&#xD;&#xA;                isoGlyph = IsoGlyph;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        static struc[] arrStruc = {&#xD;&#xA;                new struc((char) 0x630, (char) 0xfeac, (char) 0xfeab,&#xD;&#xA;                        (char) 0xfeac, (char) 0xfeab),&#xD;&#xA;                new struc((char) 0x62f, (char) 0xfeaa, (char) 0xfea9,&#xD;&#xA;                        (char) 0xfeaa, (char) 0xfea9),&#xD;&#xA;                new struc((char) 0x62c, (char) 0xfe9e, (char) 0xfe9f,&#xD;&#xA;                        (char) 0xfea0, (char) 0xfe9d),&#xD;&#xA;                new struc((char) 0x62d, (char) 0xfea2, (char) 0xfea3,&#xD;&#xA;                        (char) 0xfea4, (char) 0xfea1),&#xD;&#xA;                new struc((char) 0x62e, (char) 0xfea6, (char) 0xfea7,&#xD;&#xA;                        (char) 0xfea8, (char) 0xfea5),&#xD;&#xA;                new struc((char) 0x647, (char) 0xfeea, (char) 0xfeeb,&#xD;&#xA;                        (char) 0xfeec, (char) 0xfee9),&#xD;&#xA;                new struc((char) 0x639, (char) 0xfeca, (char) 0xfecb,&#xD;&#xA;                        (char) 0xfecc, (char) 0xfec9),&#xD;&#xA;                new struc((char) 0x63a, (char) 0xfece, (char) 0xfecf,&#xD;&#xA;                        (char) 0xfed0, (char) 0xfecd),&#xD;&#xA;                new struc((char) 0x641, (char) 0xfed2, (char) 0xfed3,&#xD;&#xA;                        (char) 0xfed4, (char) 0xfed1),&#xD;&#xA;                new struc((char) 0x642, (char) 0xfed6, (char) 0xfed7,&#xD;&#xA;                        (char) 0xfed8, (char) 0xfed5),&#xD;&#xA;                new struc((char) 0x62b, (char) 0xfe9a, (char) 0xfe9b,&#xD;&#xA;                        (char) 0xfe9c, (char) 0xfe99),&#xD;&#xA;                new struc((char) 0x635, (char) 0xfeba, (char) 0xfebb,&#xD;&#xA;                        (char) 0xfebc, (char) 0xfeb9),&#xD;&#xA;                new struc((char) 0x636, (char) 0xfebe, (char) 0xfebf,&#xD;&#xA;                        (char) 0xfec0, (char) 0xfebd),&#xD;&#xA;                new struc((char) 0x637, (char) 0xfec2, (char) 0xfec3,&#xD;&#xA;                        (char) 0xfec4, (char) 0xfec1),&#xD;&#xA;                new struc((char) 0x643, (char) 0xfeda, (char) 0xfedb,&#xD;&#xA;                        (char) 0xfedc, (char) 0xfed9),&#xD;&#xA;                new struc((char) 0x645, (char) 0xfee2, (char) 0xfee3,&#xD;&#xA;                        (char) 0xfee4, (char) 0xfee1),&#xD;&#xA;                new struc((char) 0x646, (char) 0xfee6, (char) 0xfee7,&#xD;&#xA;                        (char) 0xfee8, (char) 0xfee5),&#xD;&#xA;                new struc((char) 0x62a, (char) 0xfe96, (char) 0xfe97,&#xD;&#xA;                        (char) 0xfe98, (char) 0xfe95),&#xD;&#xA;                new struc((char) 0x627, (char) 0xfe8e, (char) 0xfe8d,&#xD;&#xA;                        (char) 0xfe8e, (char) 0xfe8d),&#xD;&#xA;                new struc((char) 0x644, (char) 0xfede, (char) 0xfedf,&#xD;&#xA;                        (char) 0xfee0, (char) 0xfedd),&#xD;&#xA;                new struc((char) 0x628, (char) 0xfe90, (char) 0xfe91,&#xD;&#xA;                        (char) 0xfe92, (char) 0xfe8f),&#xD;&#xA;                new struc((char) 0x64a, (char) 0xfef2, (char) 0xfef3,&#xD;&#xA;                        (char) 0xfef4, (char) 0xfef1),&#xD;&#xA;                new struc((char) 0x633, (char) 0xfeb2, (char) 0xfeb3,&#xD;&#xA;                        (char) 0xfeb4, (char) 0xfeb1),&#xD;&#xA;                new struc((char) 0x634, (char) 0xfeb6, (char) 0xfeb7,&#xD;&#xA;                        (char) 0xfeb8, (char) 0xfeb5),&#xD;&#xA;                new struc((char) 0x638, (char) 0xfec6, (char) 0xfec7,&#xD;&#xA;                        (char) 0xfec8, (char) 0xfec5),&#xD;&#xA;                new struc((char) 0x632, (char) 0xfeb0, (char) 0xfeaf,&#xD;&#xA;                        (char) 0xfeb0, (char) 0xfeaf),&#xD;&#xA;                new struc((char) 0x648, (char) 0xfeee, (char) 0xfeed,&#xD;&#xA;                        (char) 0xfeee, (char) 0xfeed),&#xD;&#xA;                new struc((char) 0x629, (char) 0xfe94, (char) 0xfe93,&#xD;&#xA;                        (char) 0xfe93, (char) 0xfe93),&#xD;&#xA;                new struc((char) 0x649, (char) 0xfef0, (char) 0xfeef,&#xD;&#xA;                        (char) 0xfef0, (char) 0xfeef),&#xD;&#xA;                new struc((char) 0x631, (char) 0xfeae, (char) 0xfead,&#xD;&#xA;                        (char) 0xfeae, (char) 0xfead),&#xD;&#xA;                new struc((char) 0x624, (char) 0xfe86, (char) 0xfe85,&#xD;&#xA;                        (char) 0xfe86, (char) 0xfe85),&#xD;&#xA;                new struc((char) 0x621, (char) 0xfe80, (char) 0xfe80,&#xD;&#xA;                        (char) 0xfe80, (char) 0xfe80),&#xD;&#xA;                new struc((char) 0x626, (char) 0xfe8a, (char) 0xfe8b,&#xD;&#xA;                        (char) 0xfe8c, (char) 0xfe89),&#xD;&#xA;                new struc((char) 0x623, (char) 0xfe84, (char) 0xfe83,&#xD;&#xA;                        (char) 0xfe84, (char) 0xfe83),&#xD;&#xA;                new struc((char) 0x622, (char) 0xfe82, (char) 0xfe81,&#xD;&#xA;                        (char) 0xfe82, (char) 0xfe81),&#xD;&#xA;                new struc((char) 0x625, (char) 0xfe88, (char) 0xfe87,&#xD;&#xA;                        (char) 0xfe88, (char) 0xfe87),&#xD;&#xA;                new struc((char) 0x67e, (char) 0xfb57, (char) 0xfb58,&#xD;&#xA;                        (char) 0xfb59, (char) 0xfb56), // peh&#xD;&#xA;                new struc((char) 0x686, (char) 0xfb7b, (char) 0xfb7c,&#xD;&#xA;                        (char) 0xfb7d, (char) 0xfb7a), // cheh&#xD;&#xA;                new struc((char) 0x698, (char) 0xfb8b, (char) 0xfb8a,&#xD;&#xA;                        (char) 0xfb8b, (char) 0xfb8a), // jeh&#xD;&#xA;                new struc((char) 0x6a9, (char) 0xfb8f, (char) 0xfb90,&#xD;&#xA;                        (char) 0xfb91, (char) 0xfb8e), // keheh&#xD;&#xA;                new struc((char) 0x6af, (char) 0xfb93, (char) 0xfb94,&#xD;&#xA;                        (char) 0xfb95, (char) 0xfb92), // gaf&#xD;&#xA;                // new struc((char) 0x6cc, (char) 0xfbfd, (char) 0xfbfe,&#xD;&#xA;                // (char) 0xfbff, (char) 0xfbfc), // Farsi yeh&#xD;&#xA;                new struc((char) 0x6cc, (char) 0xfbfd, (char) 0xfef3,&#xD;&#xA;                        (char) 0xfef4, (char) 0xfbfc), // Arabic yeh&#xD;&#xA;                new struc((char) 0x6c0, (char) 0xfba5, (char) 0xfba4,&#xD;&#xA;                        (char) 0xfba5, (char) 0xfba4) // heh with yeh&#xD;&#xA;        };&#xD;&#xA;    &#xD;&#xA;        static struc[] arrStrucWoosim = {&#xD;&#xA;                new struc((char) 0x630, (char) 0xb5, (char) 0x82, (char) 0xb5,&#xD;&#xA;                        (char) 0x82),&#xD;&#xA;                new struc((char) 0x62f, (char) 0xb4, (char) 0x81, (char) 0xb4,&#xD;&#xA;                        (char) 0x81),&#xD;&#xA;                new struc((char) 0x62c, (char) 0x9b, (char) 0xb1, (char) 0xf9,&#xD;&#xA;                        (char) 0xbf),&#xD;&#xA;                new struc((char) 0x62d, (char) 0x9c, (char) 0xb2, (char) 0xfa,&#xD;&#xA;                        (char) 0xc0),&#xD;&#xA;                new struc((char) 0x62e, (char) 0x9d, (char) 0xb3, (char) 0xfe,&#xD;&#xA;                        (char) 0xc1),&#xD;&#xA;                new struc((char) 0x647, (char) 0xac, (char) 0xe4, (char) 0x93,&#xD;&#xA;                        (char) 0xd5),&#xD;&#xA;                new struc((char) 0x639, (char) 0xc9, (char) 0xd3, (char) 0x8b,&#xD;&#xA;                        (char) 0xa4),&#xD;&#xA;                new struc((char) 0x63a, (char) 0xca, (char) 0xdd, (char) 0x8c,&#xD;&#xA;                        (char) 0xa5),&#xD;&#xA;                new struc((char) 0x641, (char) 0xa6, (char) 0xde, (char) 0x8d,&#xD;&#xA;                        (char) 0xcc),&#xD;&#xA;                new struc((char) 0x642, (char) 0xa7, (char) 0xdf, (char) 0x8e,&#xD;&#xA;                        (char) 0xce),&#xD;&#xA;                new struc((char) 0x62b, (char) 0xbd, (char) 0xaf, (char) 0xea,&#xD;&#xA;                        (char) 0x99),&#xD;&#xA;                new struc((char) 0x635, (char) 0xc4, (char) 0xc8, (char) 0x87,&#xD;&#xA;                        (char) 0xa0),&#xD;&#xA;                new struc((char) 0x636, (char) 0xc5, (char) 0xcb, (char) 0x88,&#xD;&#xA;                        (char) 0xa1),&#xD;&#xA;                new struc((char) 0x637, (char) 0xc6, (char) 0xcd, (char) 0xcd,&#xD;&#xA;                        (char) 0xa2),&#xD;&#xA;                new struc((char) 0x643, (char) 0xcf, (char) 0xe0, (char) 0x8f,&#xD;&#xA;                        (char) 0xa8),&#xD;&#xA;                new struc((char) 0x645, (char) 0xd2, (char) 0xe2, (char) 0x91,&#xD;&#xA;                        (char) 0xaa),&#xD;&#xA;                new struc((char) 0x646, (char) 0xd4, (char) 0xe3, (char) 0x92,&#xD;&#xA;                        (char) 0xab),&#xD;&#xA;                new struc((char) 0x62a, (char) 0xbd, (char) 0xaf, (char) 0xea,&#xD;&#xA;                        (char) 0x99),&#xD;&#xA;                new struc((char) 0x627, (char) 0xbb, (char) 0x80, (char) 0xbb,&#xD;&#xA;                        (char) 0x80),&#xD;&#xA;                new struc((char) 0x644, (char) 0xd1, (char) 0xe1, (char) 0x90,&#xD;&#xA;                        (char) 0xa9),&#xD;&#xA;                new struc((char) 0x628, (char) 0xbc, (char) 0xae, (char) 0xe9,&#xD;&#xA;                        (char) 0x98),&#xD;&#xA;                new struc((char) 0x64a, (char) 0xdc, (char) 0xe6, (char) 0x95,&#xD;&#xA;                        (char) 0xdc),&#xD;&#xA;                new struc((char) 0x633, (char) 0xc2, (char) 0xb8, (char) 0xb8,&#xD;&#xA;                        (char) 0x9e),&#xD;&#xA;                new struc((char) 0x634, (char) 0xc3, (char) 0xb9, (char) 0xb9,&#xD;&#xA;                        (char) 0x9f),&#xD;&#xA;                new struc((char) 0x638, (char) 0xc7, (char) 0xcd, (char) 0xcd,&#xD;&#xA;                        (char) 0xc7),&#xD;&#xA;                new struc((char) 0x632, (char) 0xb7, (char) 0xb7, (char) 0xb7,&#xD;&#xA;                        (char) 0xb7),&#xD;&#xA;                new struc((char) 0x648, (char) 0x94, (char) 0x94, (char) 0x94,&#xD;&#xA;                        (char) 0x94),&#xD;&#xA;                new struc((char) 0x629, (char) 0xda, (char) 0xda, (char) 0xda,&#xD;&#xA;                        (char) 0xda),&#xD;&#xA;                new struc((char) 0x649, (char) 0xdc, (char) 0xe6, (char) 0x95,&#xD;&#xA;                        (char) 0xdc),&#xD;&#xA;                new struc((char) 0x631, (char) 0xb6, (char) 0xb6, (char) 0xb6,&#xD;&#xA;                        (char) 0xb6),&#xD;&#xA;                new struc((char) 0x624, (char) 0xe7, (char) 0xe7, (char) 0xe7,&#xD;&#xA;                        (char) 0xe7),&#xD;&#xA;                new struc((char) 0x621, (char) 0xba, (char) 0xba, (char) 0xba,&#xD;&#xA;                        (char) 0xba),&#xD;&#xA;                new struc((char) 0x626, (char) 0xd7, (char) 0xe8, (char) 0x97,&#xD;&#xA;                        (char) 0xd7),&#xD;&#xA;                new struc((char) 0x623, (char) 0x80, (char) 0x80, (char) 0x80,&#xD;&#xA;                        (char) 0x80),&#xD;&#xA;                new struc((char) 0x622, (char) 0x80, (char) 0x80, (char) 0x80,&#xD;&#xA;                        (char) 0x80),&#xD;&#xA;                new struc((char) 0x625, (char) 0x80, (char) 0x80, (char) 0x80,&#xD;&#xA;                        (char) 0x80),&#xD;&#xA;                new struc((char) 0x67e, (char) 0xbc, (char) 0xae, (char) 0xe9,&#xD;&#xA;                        (char) 0x98), // peh&#xD;&#xA;                new struc((char) 0x686, (char) 0x9b, (char) 0xb1, (char) 0xf9,&#xD;&#xA;                        (char) 0xbf), // cheh&#xD;&#xA;                new struc((char) 0x698, (char) 0xb7, (char) 0xb7, (char) 0xb7,&#xD;&#xA;                        (char) 0xb7), // jeh&#xD;&#xA;                new struc((char) 0x6a9, (char) 0xcf, (char) 0xe0, (char) 0x8f,&#xD;&#xA;                        (char) 0xa8), // keheh&#xD;&#xA;                new struc((char) 0x6af, (char) 0xcf, (char) 0xe0, (char) 0x8f,&#xD;&#xA;                        (char) 0xa8), // gaf&#xD;&#xA;                new struc((char) 0x6cc, (char) 0xdc, (char) 0xe6, (char) 0x95,&#xD;&#xA;                        (char) 0xdc), // yeh&#xD;&#xA;                new struc((char) 0x6c0, (char) 0xac, (char) 0xe4, (char) 0x93,&#xD;&#xA;                        (char) 0xd5) // heh with yeh&#xD;&#xA;        };&#xD;&#xA;    &#xD;&#xA;        private static final int N_DISTINCT_CHARACTERS = 43;&#xD;&#xA;    &#xD;&#xA;        private static final String ArabicReverse(String s) {&#xD;&#xA;            try {&#xD;&#xA;                String Out = """""""", rev;&#xD;&#xA;                s = MakeReverse(s);&#xD;&#xA;                char[] chs = new char[s.length()];&#xD;&#xA;                chs = s.toCharArray();&#xD;&#xA;                int i = 0;&#xD;&#xA;                while (i < s.length()) {&#xD;&#xA;                    if ((chs[i] >= '0' && chs[i] <= '9')) // isDigit(s[i]) ?&#xD;&#xA;                    {&#xD;&#xA;                        rev = """""""";&#xD;&#xA;                        while (i < s.length()&#xD;&#xA;                                && ((chs[i] >= '0' && chs[i] <= '9') || chs[i] == '/')) // isDigit(s[i])&#xD;&#xA;                                                                                        // ?&#xD;&#xA;                        {&#xD;&#xA;                            rev = rev + chs[i];&#xD;&#xA;                            ++i;&#xD;&#xA;                        }&#xD;&#xA;                        rev = MakeReverse(rev);&#xD;&#xA;                        Out = Out + rev;&#xD;&#xA;                    } else {&#xD;&#xA;                        Out = Out + chs[i];&#xD;&#xA;                        ++i;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                s = Out;&#xD;&#xA;            } catch (Exception ex) {&#xD;&#xA;                // throw new Exception(&#xD;&#xA;                // """"An exception has occurred in ArabicReverse function.\\n""""&#xD;&#xA;                // + ex.getMessage());&#xD;&#xA;            }&#xD;&#xA;            return s;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private static final boolean isFromTheSet1(/* WCHAR */char ch) {&#xD;&#xA;            char[] theSet1 = new char[] { (char) 0x62c, (char) 0x62d, (char) 0x62e,&#xD;&#xA;                    (char) 0x647, (char) 0x639, (char) 0x63a, (char) 0x641,&#xD;&#xA;                    (char) 0x642, (char) 0x62b, (char) 0x635, (char) 0x636,&#xD;&#xA;                    (char) 0x637, (char) 0x643, (char) 0x645, (char) 0x646,&#xD;&#xA;                    (char) 0x62a, (char) 0x644, (char) 0x628, (char) 0x64a,&#xD;&#xA;                    (char) 0x633, (char) 0x634, (char) 0x638, (char) 0x67e,&#xD;&#xA;                    (char) 0x686, (char) 0x6a9, (char) 0x6af, (char) 0x6cc,&#xD;&#xA;                    (char) 0x626 };&#xD;&#xA;            int i = 0;&#xD;&#xA;            while (i < 28) {&#xD;&#xA;                if (ch == theSet1[i])&#xD;&#xA;                    return true;&#xD;&#xA;                ++i;&#xD;&#xA;            }&#xD;&#xA;            return false;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private static final boolean isFromTheSet2(/* WCHAR */char ch) {&#xD;&#xA;            char[] theSet2 = new char[] { (char) 0x627, (char) 0x623, (char) 0x625,&#xD;&#xA;                    (char) 0x622, (char) 0x62f, (char) 0x630, (char) 0x631,&#xD;&#xA;                    (char) 0x632, (char) 0x648, (char) 0x624, (char) 0x629,&#xD;&#xA;                    (char) 0x649, (char) 0x698, (char) 0x6c0 };&#xD;&#xA;            int i = 0;&#xD;&#xA;            while (i < 14) {&#xD;&#xA;                if (ch == theSet2[i])&#xD;&#xA;                    return true;&#xD;&#xA;                ++i;&#xD;&#xA;            }&#xD;&#xA;            return false;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private static final String MakeReverse(String text) {&#xD;&#xA;            String Result = """""""";&#xD;&#xA;            char[] Ctext = new char[text.length()];&#xD;&#xA;            Ctext = text.toCharArray();&#xD;&#xA;            for (int i = (text.length()) - 1; i >= 0; i--) {&#xD;&#xA;                Result += Ctext[i];&#xD;&#xA;            }&#xD;&#xA;            return Result;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static final String ConvertBackToRealFarsi(String In) {&#xD;&#xA;    &#xD;&#xA;            if (!isFarsiConversionNeeded) {&#xD;&#xA;                return In;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            String strOut = """""""";&#xD;&#xA;            StringBuilder strBuilder = new StringBuilder("""""""");&#xD;&#xA;            int i = 0;&#xD;&#xA;            int j = 0;&#xD;&#xA;            char[] chIn = new char[In.length()];&#xD;&#xA;            chIn = In.toCharArray();&#xD;&#xA;    &#xD;&#xA;            for (i = 0; i < In.length(); i++) {&#xD;&#xA;                boolean found = false;&#xD;&#xA;                for (j = 0; j < arrStruc.length; j++) {&#xD;&#xA;                    if (chIn[i] == arrStruc[j].midGlyph ||&#xD;&#xA;                            chIn[i] == arrStruc[j].iniGlyph ||&#xD;&#xA;                            chIn[i] == arrStruc[j].endGlyph ||&#xD;&#xA;                            chIn[i] == arrStruc[j].isoGlyph) {&#xD;&#xA;                        strBuilder.append(arrStruc[j].character);&#xD;&#xA;                        found = true;&#xD;&#xA;                        break;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                if (!found)&#xD;&#xA;                    strBuilder.append(chIn[i]);&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            strOut = strBuilder.toString();&#xD;&#xA;        strOut = strOut.replace(szLa, """"لا"""");&#xD;&#xA;        strOut = strOut.replace(szLaStick, """"لا"""");&#xD;&#xA;    &#xD;&#xA;            return strOut;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static final String Convert(String In) {&#xD;&#xA;    &#xD;&#xA;            if (!isFarsiConversionNeeded) {&#xD;&#xA;                return In;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            if (In == null) {&#xD;&#xA;                return """""""";&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            boolean linkBefore, linkAfter;&#xD;&#xA;            String Out = In;&#xD;&#xA;            char[] chOut = new char[Out.length()];&#xD;&#xA;            chOut = Out.toCharArray();&#xD;&#xA;            char[] chIn = new char[In.length()];&#xD;&#xA;            chIn = In.toCharArray();&#xD;&#xA;    &#xD;&#xA;            for (int i = 0; i < In.length(); i++) {&#xD;&#xA;                /* WCHAR */&#xD;&#xA;                char ch = chIn[i];&#xD;&#xA;                if ((ch >= (char) 0x0621 && ch <= (char) 0x064a)&#xD;&#xA;                        || (ch == (char) 0x067e) || (ch == (char) 0x0686)&#xD;&#xA;                        || (ch == (char) 0x0698) || (ch == (char) 0x06a9)&#xD;&#xA;                        || (ch == (char) 0x06af) || (ch == (char) 0x06cc)&#xD;&#xA;                        || (ch == (char) 0x06c0)) // is a Farsi character?&#xD;&#xA;                {&#xD;&#xA;                    int idx = 0;&#xD;&#xA;                    while (idx < N_DISTINCT_CHARACTERS) {&#xD;&#xA;                        if (arrStruc[idx].character == chIn[i])&#xD;&#xA;                            break;&#xD;&#xA;                        ++idx;&#xD;&#xA;                    }&#xD;&#xA;    &#xD;&#xA;                    if (i == In.length() - 1)&#xD;&#xA;                        linkAfter = false;&#xD;&#xA;                    else&#xD;&#xA;                        linkAfter = (isFromTheSet1(chIn[i + 1]) || isFromTheSet2(chIn[i + 1]));&#xD;&#xA;                    if (i == 0)&#xD;&#xA;                        linkBefore = false;&#xD;&#xA;                    else&#xD;&#xA;                        linkBefore = isFromTheSet1(chIn[i - 1]);&#xD;&#xA;                    if (idx < N_DISTINCT_CHARACTERS) {&#xD;&#xA;                        if (linkBefore && linkAfter)&#xD;&#xA;                            chOut[i] = arrStruc[idx].midGlyph;&#xD;&#xA;                        if (linkBefore && !linkAfter)&#xD;&#xA;                            chOut[i] = arrStruc[idx].endGlyph;&#xD;&#xA;                        if (!linkBefore && linkAfter)&#xD;&#xA;                            chOut[i] = arrStruc[idx].iniGlyph;&#xD;&#xA;                        if (!linkBefore && !linkAfter)&#xD;&#xA;                            chOut[i] = arrStruc[idx].isoGlyph;&#xD;&#xA;                    } else {&#xD;&#xA;                        chOut[i] = chIn[i];&#xD;&#xA;                    }&#xD;&#xA;                } else {&#xD;&#xA;                    chOut[i] = chIn[i];&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            Out = """""""";&#xD;&#xA;            for (int j = 0; j < chOut.length; j++)&#xD;&#xA;                Out += chOut[j];&#xD;&#xA;            // Out = ArabicReverse(Out);&#xD;&#xA;    &#xD;&#xA;            Out = Out.replace((char) 0x200c, ' '); // Change NO SPACE to SPACE&#xD;&#xA;    &#xD;&#xA;            Out = Out.replace(szLamAndAlef, szLa); // Join 'Lam' and 'Alef' and&#xD;&#xA;                                                    // make 'La'&#xD;&#xA;            Out = Out.replace(szLamStickAndAlef, szLaStick); // Join 'Lam Stick'&#xD;&#xA;                                                                // and 'Alef'&#xD;&#xA;                                                                // and make 'La&#xD;&#xA;                                                                // Stick'&#xD;&#xA;    &#xD;&#xA;            return reorderWords(Out);&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private final static String reorderWords(String strIn)&#xD;&#xA;        {&#xD;&#xA;    &#xD;&#xA;            final int ST_RTL = 0;&#xD;&#xA;            final int ST_LTR = 1;&#xD;&#xA;    &#xD;&#xA;            String strOut = """""""";&#xD;&#xA;            String prevWord = """""""";&#xD;&#xA;            int state = ST_RTL;&#xD;&#xA;            char[] arr = strIn.toCharArray();&#xD;&#xA;            int i = 0;&#xD;&#xA;            while (i < arr.length) {&#xD;&#xA;                if (charIsLTR(arr[i]) && state != ST_LTR)&#xD;&#xA;                {&#xD;&#xA;                    // state changed to LTR&#xD;&#xA;                    state = ST_LTR;&#xD;&#xA;                    strOut = prevWord + strOut;&#xD;&#xA;                    prevWord = """""""";&#xD;&#xA;                    prevWord += arr[i];&#xD;&#xA;                }&#xD;&#xA;                else if (charIsRTL(arr[i]) && state != ST_RTL)&#xD;&#xA;                {&#xD;&#xA;                    // state changed to RTL&#xD;&#xA;                    state = ST_RTL;&#xD;&#xA;                    strOut = prevWord + strOut;&#xD;&#xA;                    prevWord = """""""";&#xD;&#xA;                    prevWord += arr[i];&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                {&#xD;&#xA;                    // state is not changed&#xD;&#xA;                    prevWord += arr[i];&#xD;&#xA;                }&#xD;&#xA;                i++;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            strOut = prevWord + strOut;&#xD;&#xA;    &#xD;&#xA;            return strOut;&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private final static boolean charIsLTR(char ch)&#xD;&#xA;        {&#xD;&#xA;            return (ch >= (char) 65 & ch <= (char) 122)&#xD;&#xA;                    |&#xD;&#xA;                    Character.isDigit(ch);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private final static boolean charIsRTL(char ch)&#xD;&#xA;        {&#xD;&#xA;            return ch >= (char) 0x0621;&#xD;&#xA;        }   &#xD;&#xA;    &#xD;&#xA;        private static Typeface typeface;&#xD;&#xA;    &#xD;&#xA;        public static final Typeface GetFarsiFont(Context context) {&#xD;&#xA;            if (typeface == null) {&#xD;&#xA;                typeface = Typeface.createFromAsset(context.getAssets(),&#xD;&#xA;                        // """"DroidSansFallback.ttf"""");&#xD;&#xA;                        """"TAHOMA.TTF"""");&#xD;&#xA;            }&#xD;&#xA;            return typeface;&#xD;&#xA;        }&#xD;&#xA;    }"
