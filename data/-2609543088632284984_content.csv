"Content"
"    /* C-Minus BNF Grammar */&#xD;&#xA;    &#xD;&#xA;    %token ELSE&#xD;&#xA;    %token IF&#xD;&#xA;    %token INT&#xD;&#xA;    %token RETURN&#xD;&#xA;    %token VOID&#xD;&#xA;    %token WHILE&#xD;&#xA;    &#xD;&#xA;    %token ID&#xD;&#xA;    %token NUM&#xD;&#xA;    &#xD;&#xA;    %token LTE&#xD;&#xA;    %token GTE&#xD;&#xA;    %token EQUAL&#xD;&#xA;    %token NOTEQUAL&#xD;&#xA;    %%&#xD;&#xA;    &#xD;&#xA;    program : declaration_list ;&#xD;&#xA;    &#xD;&#xA;    declaration_list : declaration_list declaration | declaration ;&#xD;&#xA;    &#xD;&#xA;    declaration : var_declaration | fun_declaration ;&#xD;&#xA;    &#xD;&#xA;    var_declaration : type_specifier ID ';'&#xD;&#xA;                    | type_specifier ID '[' NUM ']' ';' ;&#xD;&#xA;    &#xD;&#xA;    type_specifier : INT | VOID ;&#xD;&#xA;    &#xD;&#xA;    fun_declaration : type_specifier ID '(' params ')' compound_stmt ;&#xD;&#xA;    &#xD;&#xA;    params : param_list | VOID ;&#xD;&#xA;    &#xD;&#xA;    param_list : param_list ',' param&#xD;&#xA;               | param ;&#xD;&#xA;    &#xD;&#xA;    param : type_specifier ID | type_specifier ID '[' ']' ;&#xD;&#xA;    &#xD;&#xA;    compound_stmt : '{' local_declarations statement_list '}' ;&#xD;&#xA;    &#xD;&#xA;    local_declarations : local_declarations var_declaration&#xD;&#xA;                       | /* empty */ ;&#xD;&#xA;    &#xD;&#xA;    statement_list : statement_list statement&#xD;&#xA;                   | /* empty */ ;&#xD;&#xA;    &#xD;&#xA;    statement : expression_stmt&#xD;&#xA;              | compound_stmt&#xD;&#xA;              | selection_stmt&#xD;&#xA;              | iteration_stmt&#xD;&#xA;              | return_stmt ;&#xD;&#xA;    &#xD;&#xA;    expression_stmt : expression ';'&#xD;&#xA;                    | ';' ;&#xD;&#xA;    &#xD;&#xA;    selection_stmt : IF '(' expression ')' statement&#xD;&#xA;                   | IF '(' expression ')' statement ELSE statement ;&#xD;&#xA;    &#xD;&#xA;    iteration_stmt : WHILE '(' expression ')' statement ;&#xD;&#xA;    &#xD;&#xA;    return_stmt : RETURN ';' | RETURN expression ';' ;&#xD;&#xA;    &#xD;&#xA;    expression : var '=' expression | simple_expression ;&#xD;&#xA;    &#xD;&#xA;    var : ID | ID '[' expression ']' ;&#xD;&#xA;    &#xD;&#xA;    simple_expression : additive_expression relop additive_expression&#xD;&#xA;                      | additive_expression ;&#xD;&#xA;    &#xD;&#xA;    relop : LTE | '<' | '>' | GTE | EQUAL | NOTEQUAL ;&#xD;&#xA;    &#xD;&#xA;    additive_expression : additive_expression addop term | term ;&#xD;&#xA;    &#xD;&#xA;    addop : '+' | '-' ;&#xD;&#xA;    &#xD;&#xA;    term : term mulop factor | factor ;&#xD;&#xA;    &#xD;&#xA;    mulop : '*' | '/' ;&#xD;&#xA;    &#xD;&#xA;    factor : '(' expression ')' | var | call | NUM ;&#xD;&#xA;    &#xD;&#xA;    call : ID '(' args ')' ;&#xD;&#xA;    &#xD;&#xA;    args : arg_list | /* empty */ ;&#xD;&#xA;    &#xD;&#xA;    arg_list : arg_list ',' expression | expression ;"
