"Content"
"    def append_df_to_excel(filename, df, sheet_name='Sheet1', startrow=None,&#xD;&#xA;                           truncate_sheet=False, &#xD;&#xA;                           **to_excel_kwargs):&#xD;&#xA;        """"""""""""&#xD;&#xA;        Append a DataFrame [df] to existing Excel file [filename]&#xD;&#xA;        into [sheet_name] Sheet.&#xD;&#xA;        If [filename] doesn't exist, then this function will create it.&#xD;&#xA;        Parameters:&#xD;&#xA;          filename : File path or existing ExcelWriter&#xD;&#xA;                     (Example: '/path/to/file.xlsx')&#xD;&#xA;          df : dataframe to save to workbook&#xD;&#xA;          sheet_name : Name of sheet which will contain DataFrame.&#xD;&#xA;                       (default: 'Sheet1')&#xD;&#xA;          startrow : upper left cell row to dump data frame.&#xD;&#xA;                     Per default (startrow=None) calculate the last row&#xD;&#xA;                     in the existing DF and write to the next row...&#xD;&#xA;          truncate_sheet : truncate (remove and recreate) [sheet_name]&#xD;&#xA;                           before writing DataFrame to Excel file&#xD;&#xA;          to_excel_kwargs : arguments which will be passed to `DataFrame.to_excel()`&#xD;&#xA;                            [can be dictionary]&#xD;&#xA;        Returns: None&#xD;&#xA;        """"""""""""&#xD;&#xA;        from openpyxl import load_workbook&#xD;&#xA;        # ignore [engine] parameter if it was passed&#xD;&#xA;        if 'engine' in to_excel_kwargs:&#xD;&#xA;            to_excel_kwargs.pop('engine')&#xD;&#xA;        writer = pd.ExcelWriter(filename, engine='openpyxl')&#xD;&#xA;        try:&#xD;&#xA;            # try to open an existing workbook&#xD;&#xA;            writer.book = load_workbook(filename)&#xD;&#xA;            &#xD;&#xA;            # get the last row in the existing Excel sheet&#xD;&#xA;            # if it was not specified explicitly&#xD;&#xA;            if startrow is None and sheet_name in writer.book.sheetnames:&#xD;&#xA;                startrow = writer.book[sheet_name].max_row&#xD;&#xA;            # truncate sheet&#xD;&#xA;            if truncate_sheet and sheet_name in writer.book.sheetnames:&#xD;&#xA;                # index of [sheet_name] sheet&#xD;&#xA;                idx = writer.book.sheetnames.index(sheet_name)&#xD;&#xA;                # remove [sheet_name]&#xD;&#xA;                writer.book.remove(writer.book.worksheets[idx])&#xD;&#xA;                # create an empty sheet [sheet_name] using old index&#xD;&#xA;                writer.book.create_sheet(sheet_name, idx)&#xD;&#xA;            &#xD;&#xA;            # copy existing sheets&#xD;&#xA;            writer.sheets = {ws.title:ws for ws in writer.book.worksheets}&#xD;&#xA;        except FileNotFoundError:&#xD;&#xA;            # file does not exist yet, we will create it&#xD;&#xA;            pass&#xD;&#xA;        if startrow is None:&#xD;&#xA;            startrow = 0&#xD;&#xA;        # write out the new sheet&#xD;&#xA;        df.to_excel(writer, sheet_name, startrow=startrow, **to_excel_kwargs)&#xD;&#xA;        # save the workbook&#xD;&#xA;        writer.save()&#xD;&#xA;        "
