"Content"
"     public static class PredicateBuilder&#xD;&#xA;    {&#xD;&#xA;        public static Expression<Func<T, bool>> True<T>() { return f => true; }&#xD;&#xA;        public static Expression<Func<T, bool>> False<T>() { return f => false; }&#xD;&#xA;    &#xD;&#xA;        public static Expression<Func<T, bool>> Or<T>(&#xD;&#xA;            this Expression<Func<T, bool>> expr1,&#xD;&#xA;            Expression<Func<T, bool>> expr2)&#xD;&#xA;        {&#xD;&#xA;            var secondBody = expr2.Body.Replace(&#xD;&#xA;                expr2.Parameters[0], expr1.Parameters[0]);&#xD;&#xA;            return Expression.Lambda<Func<T, bool>>&#xD;&#xA;                  (Expression.OrElse(expr1.Body, secondBody), expr1.Parameters);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static Expression<Func<T, bool>> And<T>(&#xD;&#xA;            this Expression<Func<T, bool>> expr1,&#xD;&#xA;            Expression<Func<T, bool>> expr2)&#xD;&#xA;        {&#xD;&#xA;            var secondBody = expr2.Body.Replace(&#xD;&#xA;                expr2.Parameters[0], expr1.Parameters[0]);&#xD;&#xA;            return Expression.Lambda<Func<T, bool>>&#xD;&#xA;                  (Expression.AndAlso(expr1.Body, secondBody), expr1.Parameters);&#xD;&#xA;        }&#xD;&#xA;    }"
