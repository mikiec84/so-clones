"Content"
"    public class EasySSLSocketFactory implements SocketFactory, LayeredSocketFactory &#xD;&#xA;    {  &#xD;&#xA;    	private SSLContext sslcontext = null;  &#xD;&#xA;    &#xD;&#xA;    	private static SSLContext createEasySSLContext() throws IOException &#xD;&#xA;    	{  &#xD;&#xA;    		try&#xD;&#xA;    		{  &#xD;&#xA;    			SSLContext context = SSLContext.getInstance(""""TLS"""");  &#xD;&#xA;    			context.init(null, new TrustManager[] { new EasyX509TrustManager(null) }, null);  &#xD;&#xA;    			return context;  &#xD;&#xA;    		}&#xD;&#xA;    		catch (Exception e) &#xD;&#xA;    		{  &#xD;&#xA;    			throw new IOException(e.getMessage());  &#xD;&#xA;    		}  &#xD;&#xA;    	}  &#xD;&#xA;    &#xD;&#xA;    	private SSLContext getSSLContext() throws IOException &#xD;&#xA;    	{  &#xD;&#xA;    		if (this.sslcontext == null) &#xD;&#xA;    		{  &#xD;&#xA;    			this.sslcontext = createEasySSLContext();  &#xD;&#xA;    		}  &#xD;&#xA;    		return this.sslcontext;  &#xD;&#xA;    	}  &#xD;&#xA;    &#xD;&#xA;    	/** &#xD;&#xA;    	 * @see org.apache.http.conn.scheme.SocketFactory#connectSocket(java.net.Socket, java.lang.String, int, &#xD;&#xA;    	 *      java.net.InetAddress, int, org.apache.http.params.HttpParams) &#xD;&#xA;    	 */  &#xD;&#xA;    	public Socket connectSocket(Socket sock,&#xD;&#xA;    			String host,&#xD;&#xA;    			int port, &#xD;&#xA;    			InetAddress localAddress,&#xD;&#xA;    			int localPort,&#xD;&#xA;    			HttpParams params) &#xD;&#xA;    &#xD;&#xA;    					throws IOException, UnknownHostException, ConnectTimeoutException &#xD;&#xA;    					{  &#xD;&#xA;    		int connTimeout = HttpConnectionParams.getConnectionTimeout(params);  &#xD;&#xA;    		int soTimeout = HttpConnectionParams.getSoTimeout(params);  &#xD;&#xA;    		InetSocketAddress remoteAddress = new InetSocketAddress(host, port);  &#xD;&#xA;    		SSLSocket sslsock = (SSLSocket) ((sock != null) ? sock : createSocket());  &#xD;&#xA;    &#xD;&#xA;    		if ((localAddress != null) || (localPort > 0)) &#xD;&#xA;    		{  &#xD;&#xA;    			// we need to bind explicitly  &#xD;&#xA;    			if (localPort < 0) &#xD;&#xA;    			{  &#xD;&#xA;    				localPort = 0; // indicates """"any""""  &#xD;&#xA;    			}  &#xD;&#xA;    			InetSocketAddress isa = new InetSocketAddress(localAddress, localPort);  &#xD;&#xA;    			sslsock.bind(isa);  &#xD;&#xA;    		}  &#xD;&#xA;    &#xD;&#xA;    		sslsock.connect(remoteAddress, connTimeout);  &#xD;&#xA;    		sslsock.setSoTimeout(soTimeout);  &#xD;&#xA;    		return sslsock;    &#xD;&#xA;    					}  &#xD;&#xA;    &#xD;&#xA;    	/** &#xD;&#xA;    	 * @see org.apache.http.conn.scheme.SocketFactory#createSocket() &#xD;&#xA;    	 */  &#xD;&#xA;    	public Socket createSocket() throws IOException {  &#xD;&#xA;    		return getSSLContext().getSocketFactory().createSocket();  &#xD;&#xA;    	}  &#xD;&#xA;    &#xD;&#xA;    	/** &#xD;&#xA;    	 * @see org.apache.http.conn.scheme.SocketFactory#isSecure(java.net.Socket) &#xD;&#xA;    	 */  &#xD;&#xA;    	public boolean isSecure(Socket socket) throws IllegalArgumentException {  &#xD;&#xA;    		return true;  &#xD;&#xA;    	}  &#xD;&#xA;    &#xD;&#xA;    	/** &#xD;&#xA;    	 * @see org.apache.http.conn.scheme.LayeredSocketFactory#createSocket(java.net.Socket, java.lang.String, int, &#xD;&#xA;    	 *      boolean) &#xD;&#xA;    	 */  &#xD;&#xA;    	public Socket createSocket(Socket socket,&#xD;&#xA;    			String host, &#xD;&#xA;    			int port,&#xD;&#xA;    			boolean autoClose) throws IOException,  &#xD;&#xA;    			UnknownHostException &#xD;&#xA;    			{  &#xD;&#xA;    		return getSSLContext().getSocketFactory().createSocket(socket, host, port, autoClose);  &#xD;&#xA;    			}  &#xD;&#xA;    &#xD;&#xA;    	// -------------------------------------------------------------------  &#xD;&#xA;    	// javadoc in org.apache.http.conn.scheme.SocketFactory says :  &#xD;&#xA;    	// Both Object.equals() and Object.hashCode() must be overridden  &#xD;&#xA;    	// for the correct operation of some connection managers  &#xD;&#xA;    	// -------------------------------------------------------------------  &#xD;&#xA;    &#xD;&#xA;    	public boolean equals(Object obj) {  &#xD;&#xA;    		return ((obj != null) && obj.getClass().equals(EasySSLSocketFactory.class));  &#xD;&#xA;    	}  &#xD;&#xA;    &#xD;&#xA;    	public int hashCode() {  &#xD;&#xA;    		return EasySSLSocketFactory.class.hashCode();  &#xD;&#xA;    	}  &#xD;&#xA;    }"
