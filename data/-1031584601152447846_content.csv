"Content"
"    package de.mjpegsample.MjpegView;&#xD;&#xA;    &#xD;&#xA;    import java.io.BufferedInputStream;&#xD;&#xA;    import java.io.ByteArrayInputStream;&#xD;&#xA;    import java.io.DataInputStream;&#xD;&#xA;    import java.io.IOException;&#xD;&#xA;    import java.io.InputStream;&#xD;&#xA;    import java.net.URI;&#xD;&#xA;    import java.util.Properties;&#xD;&#xA;    &#xD;&#xA;    import org.apache.http.HttpResponse;&#xD;&#xA;    import org.apache.http.client.ClientProtocolException;&#xD;&#xA;    import org.apache.http.client.methods.HttpGet;&#xD;&#xA;    import org.apache.http.impl.client.DefaultHttpClient;&#xD;&#xA;    &#xD;&#xA;    import android.graphics.Bitmap;&#xD;&#xA;    import android.graphics.BitmapFactory;&#xD;&#xA;    &#xD;&#xA;    public class MjpegInputStream extends DataInputStream {&#xD;&#xA;        private final byte[] SOI_MARKER = { (byte) 0xFF, (byte) 0xD8 };&#xD;&#xA;        private final byte[] EOF_MARKER = { (byte) 0xFF, (byte) 0xD9 };&#xD;&#xA;        private final String CONTENT_LENGTH = """"Content-Length"""";&#xD;&#xA;        private final static int HEADER_MAX_LENGTH = 100;&#xD;&#xA;        private final static int FRAME_MAX_LENGTH = 40000 + HEADER_MAX_LENGTH;&#xD;&#xA;        private int mContentLength = -1;&#xD;&#xA;    	&#xD;&#xA;        public static MjpegInputStream read(String url) {&#xD;&#xA;            HttpResponse res;&#xD;&#xA;            DefaultHttpClient httpclient = new DefaultHttpClient();		&#xD;&#xA;            try {&#xD;&#xA;                res = httpclient.execute(new HttpGet(URI.create(url)));&#xD;&#xA;                return new MjpegInputStream(res.getEntity().getContent());				&#xD;&#xA;            } catch (ClientProtocolException e) {&#xD;&#xA;            } catch (IOException e) {}&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;    	&#xD;&#xA;        public MjpegInputStream(InputStream in) { super(new BufferedInputStream(in, FRAME_MAX_LENGTH)); }&#xD;&#xA;    	&#xD;&#xA;        private int getEndOfSeqeunce(DataInputStream in, byte[] sequence) throws IOException {&#xD;&#xA;            int seqIndex = 0;&#xD;&#xA;            byte c;&#xD;&#xA;            for(int i=0; i < FRAME_MAX_LENGTH; i++) {&#xD;&#xA;                c = (byte) in.readUnsignedByte();&#xD;&#xA;                if(c == sequence[seqIndex]) {&#xD;&#xA;                    seqIndex++;&#xD;&#xA;                    if(seqIndex == sequence.length) return i + 1;&#xD;&#xA;                } else seqIndex = 0;&#xD;&#xA;            }&#xD;&#xA;            return -1;&#xD;&#xA;        }&#xD;&#xA;    	&#xD;&#xA;        private int getStartOfSequence(DataInputStream in, byte[] sequence) throws IOException {&#xD;&#xA;            int end = getEndOfSeqeunce(in, sequence);&#xD;&#xA;            return (end < 0) ? (-1) : (end - sequence.length);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private int parseContentLength(byte[] headerBytes) throws IOException, NumberFormatException {&#xD;&#xA;            ByteArrayInputStream headerIn = new ByteArrayInputStream(headerBytes);&#xD;&#xA;            Properties props = new Properties();&#xD;&#xA;            props.load(headerIn);&#xD;&#xA;            return Integer.parseInt(props.getProperty(CONTENT_LENGTH));&#xD;&#xA;        }	&#xD;&#xA;    &#xD;&#xA;        public Bitmap readMjpegFrame() throws IOException {&#xD;&#xA;            mark(FRAME_MAX_LENGTH);&#xD;&#xA;            int headerLen = getStartOfSequence(this, SOI_MARKER);&#xD;&#xA;            reset();&#xD;&#xA;            byte[] header = new byte[headerLen];&#xD;&#xA;            readFully(header);&#xD;&#xA;            try {&#xD;&#xA;                mContentLength = parseContentLength(header);&#xD;&#xA;            } catch (NumberFormatException nfe) { &#xD;&#xA;                mContentLength = getEndOfSeqeunce(this, EOF_MARKER); &#xD;&#xA;            }&#xD;&#xA;            reset();&#xD;&#xA;            byte[] frameData = new byte[mContentLength];&#xD;&#xA;            skipBytes(headerLen);&#xD;&#xA;            readFully(frameData);&#xD;&#xA;            return BitmapFactory.decodeStream(new ByteArrayInputStream(frameData));&#xD;&#xA;        }&#xD;&#xA;    }"
