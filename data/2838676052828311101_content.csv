"Content"
"	class BoundedBuffer {&#xD;&#xA;	   final Lock lock = new ReentrantLock();&#xD;&#xA;	   final Condition notFull  = lock.newCondition(); &#xD;&#xA;	   final Condition notEmpty = lock.newCondition(); &#xD;&#xA;	   final Object[] items = new Object[100];&#xD;&#xA;	   int putptr, takeptr, count;&#xD;&#xA;	   public void put(Object x) throws InterruptedException {&#xD;&#xA;		 lock.lock();&#xD;&#xA;		 try {&#xD;&#xA;		   while (count == items.length)&#xD;&#xA;			 notFull.await();&#xD;&#xA;		   items[putptr] = x;&#xD;&#xA;		   if (++putptr == items.length) putptr = 0;&#xD;&#xA;		   ++count;&#xD;&#xA;		   notEmpty.signal();&#xD;&#xA;		 } finally {&#xD;&#xA;		   lock.unlock();&#xD;&#xA;		 }&#xD;&#xA;	   }&#xD;&#xA;	   public Object take() throws InterruptedException {&#xD;&#xA;		 lock.lock();&#xD;&#xA;		 try {&#xD;&#xA;		   while (count == 0)&#xD;&#xA;			 notEmpty.await();&#xD;&#xA;		   Object x = items[takeptr];&#xD;&#xA;		   if (++takeptr == items.length) takeptr = 0;&#xD;&#xA;		   --count;&#xD;&#xA;		   notFull.signal();&#xD;&#xA;		   return x;&#xD;&#xA;		 } finally {&#xD;&#xA;		   lock.unlock();&#xD;&#xA;		 }&#xD;&#xA;	   }&#xD;&#xA;	 }"
