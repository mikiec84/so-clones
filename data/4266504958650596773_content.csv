"Content"
"        // Returns a function, that, as long as it continues to be invoked, will not&#xD;&#xA;        // be triggered. The function will be called after it stops being called for&#xD;&#xA;        // N milliseconds. If `immediate` is passed, trigger the function on the&#xD;&#xA;        // leading edge, instead of the trailing.&#xD;&#xA;        function debounce(func, wait, immediate) {&#xD;&#xA;        	var timeout;&#xD;&#xA;        	return function() {&#xD;&#xA;        		var context = this, args = arguments;&#xD;&#xA;        		var later = function() {&#xD;&#xA;        			timeout = null;&#xD;&#xA;        			if (!immediate) func.apply(context, args);&#xD;&#xA;        		};&#xD;&#xA;        		var callNow = immediate && !timeout;&#xD;&#xA;        		clearTimeout(timeout);&#xD;&#xA;        		timeout = setTimeout(later, wait);&#xD;&#xA;        		if (callNow) func.apply(context, args);&#xD;&#xA;        	};&#xD;&#xA;        };"
