"Content"
"                /// <summary>&#xD;&#xA;    /// Finds a Child of a given item in the visual tree. &#xD;&#xA;    /// </summary>&#xD;&#xA;    /// <param name=""""parent"""">A direct parent of the queried item.</param>&#xD;&#xA;    /// <typeparam name=""""T"""">The type of the queried item.</typeparam>&#xD;&#xA;    /// <param name=""""childName"""">x:Name or Name of child. </param>&#xD;&#xA;    /// <returns>The first parent item that matches the submitted type parameter. &#xD;&#xA;    /// If not matching item can be found, &#xD;&#xA;    /// a null parent is being returned.</returns>&#xD;&#xA;    public static T FindChild<T>(DependencyObject parent, string childName)&#xD;&#xA;       where T : DependencyObject&#xD;&#xA;    {    &#xD;&#xA;      // Confirm parent and childName are valid. &#xD;&#xA;      if (parent == null) return null;&#xD;&#xA;      T foundChild = null;&#xD;&#xA;      int childrenCount = VisualTreeHelper.GetChildrenCount(parent);&#xD;&#xA;      for (int i = 0; i < childrenCount; i++)&#xD;&#xA;      {&#xD;&#xA;        var child = VisualTreeHelper.GetChild(parent, i);&#xD;&#xA;        // If the child is not of the request child type child&#xD;&#xA;        T childType = child as T;&#xD;&#xA;        if (childType == null)&#xD;&#xA;        {&#xD;&#xA;          // recursively drill down the tree&#xD;&#xA;          foundChild = FindChild<T>(child, childName);&#xD;&#xA;          // If the child is found, break so we do not overwrite the found child. &#xD;&#xA;          if (foundChild != null) break;&#xD;&#xA;        }&#xD;&#xA;        else if (!string.IsNullOrEmpty(childName))&#xD;&#xA;        {&#xD;&#xA;          var frameworkElement = child as FrameworkElement;&#xD;&#xA;          // If the child's name is set for search&#xD;&#xA;          if (frameworkElement != null && frameworkElement.Name == childName)&#xD;&#xA;          {&#xD;&#xA;            // if the child's name is of the request name&#xD;&#xA;            foundChild = (T)child;&#xD;&#xA;            break;&#xD;&#xA;          }&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;          // child element found.&#xD;&#xA;          foundChild = (T)child;&#xD;&#xA;          break;&#xD;&#xA;        }&#xD;&#xA;      }&#xD;&#xA;      return foundChild;&#xD;&#xA;    }"
